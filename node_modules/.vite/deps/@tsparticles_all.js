import {
  AlterType,
  AnimatableColor,
  AnimationOptions,
  AnimationStatus,
  Circle,
  CollisionMode,
  DestroyType,
  DivType,
  EasingType,
  ExternalInteractorBase,
  GradientType,
  OptionsColor,
  OutMode,
  OutModeDirection,
  ParticleOutType,
  ParticlesInteractorBase,
  PixelMode,
  Rectangle,
  RotateDirection,
  StartValueType,
  ValueWithRandom,
  Vector,
  arrayRandomIndex,
  calcPositionOrRandomFromSize,
  calcPositionOrRandomFromSizeRanged,
  calculateBounds,
  circleBounce,
  circleBounceDataFromParticle,
  clamp,
  colorMix,
  deepExtend,
  defaultAlpha,
  defaultAngle,
  degToRad,
  divMode,
  divModeExecute,
  double,
  doublePI,
  drawLine,
  errorPrefix,
  executeOnSingleOrMultiple,
  getDistance,
  getDistances,
  getHslAnimationFromHsl,
  getLinkColor,
  getLinkRandomColor,
  getLogger,
  getPosition,
  getRandom,
  getRangeMax,
  getRangeMin,
  getRangeValue,
  getSize,
  getStyleFromHsl,
  getStyleFromRgb,
  half,
  hslToRgb,
  hslaToRgba,
  initParticleNumericAnimationValue,
  isArray,
  isDivModeEnabled,
  isFunction,
  isInArray,
  isNull,
  isNumber,
  isObject,
  isPointInside,
  isSsr,
  isString,
  itemFromArray,
  itemFromSingleOrMultiple,
  loadFont,
  loadParticlesOptions,
  millisecondsToSeconds,
  mouseDownEvent,
  mouseLeaveEvent,
  mouseMoveEvent,
  none,
  originPoint,
  parseAlpha,
  percentDenominator,
  randomInRange,
  rangeColorToHsl,
  rangeColorToRgb,
  rectBounce,
  rgbToHsl,
  safeMatchMedia,
  setRangeValue,
  stringToAlpha,
  touchStartEvent,
  tsParticles,
  updateAnimation,
  updateColor
} from "./chunk-DBMBXZRZ.js";
import "./chunk-ROME4SDB.js";

// node_modules/@tsparticles/pjs/browser/marcbruederlin/Particles.js
var linksMinDistance = 120;
var moveMinSpeed = 0.5;
var particlesMinCount = 100;
var sizeMinValue = 3;
var Particles = class _Particles {
  static init(options) {
    var _a;
    const particles = new _Particles(), selector = options.selector;
    if (!selector) {
      throw new Error("No selector provided");
    }
    const el = document.querySelector(selector);
    if (!el) {
      throw new Error("No element found for selector");
    }
    void tsParticles.load({
      element: el,
      id: selector.replace(".", "").replace("!", ""),
      options: {
        fullScreen: {
          enable: false
        },
        particles: {
          color: {
            value: options.color ?? "!000000"
          },
          links: {
            color: "random",
            distance: options.minDistance ?? linksMinDistance,
            enable: options.connectParticles ?? false
          },
          move: {
            enable: true,
            speed: options.speed ?? moveMinSpeed
          },
          number: {
            value: options.maxParticles ?? particlesMinCount
          },
          size: {
            value: { min: 1, max: options.sizeVariations ?? sizeMinValue }
          }
        },
        responsive: (_a = options.responsive) == null ? void 0 : _a.map((responsive) => {
          var _a2, _b, _c, _d, _e;
          return {
            maxWidth: responsive.breakpoint,
            options: {
              particles: {
                color: {
                  value: (_a2 = responsive.options) == null ? void 0 : _a2.color
                },
                links: {
                  distance: (_b = responsive.options) == null ? void 0 : _b.minDistance,
                  enable: (_c = responsive.options) == null ? void 0 : _c.connectParticles
                },
                number: {
                  value: options.maxParticles
                },
                move: {
                  enable: true,
                  speed: (_d = responsive.options) == null ? void 0 : _d.speed
                },
                size: {
                  value: (_e = responsive.options) == null ? void 0 : _e.sizeVariations
                }
              }
            }
          };
        })
      }
    }).then((container) => {
      particles._container = container;
    });
    return particles;
  }
  destroy() {
    const container = this._container;
    container == null ? void 0 : container.destroy();
  }
  pauseAnimation() {
    const container = this._container;
    container == null ? void 0 : container.pause();
  }
  resumeAnimation() {
    const container = this._container;
    container == null ? void 0 : container.play();
  }
};

// node_modules/@tsparticles/pjs/browser/VincentGarreau/particles.js
var defaultMinOpacity = 0;
var defaultMinSize = 0;
var speedFactor = 3;
var defaultPjsOptions = {
  particles: {
    number: {
      value: 400,
      density: {
        enable: true,
        value_area: 800
      }
    },
    color: {
      value: "#fff"
    },
    shape: {
      type: "circle",
      stroke: {
        width: 0,
        color: "#ff0000"
      },
      polygon: {
        nb_sides: 5
      },
      image: {
        src: "",
        width: 100,
        height: 100
      }
    },
    opacity: {
      value: 1,
      random: false,
      anim: {
        enable: false,
        speed: 2,
        opacity_min: 0,
        sync: false
      }
    },
    size: {
      value: 20,
      random: false,
      anim: {
        enable: false,
        speed: 20,
        size_min: 0,
        sync: false
      }
    },
    line_linked: {
      enable: true,
      distance: 100,
      color: "#fff",
      opacity: 1,
      width: 1
    },
    move: {
      enable: true,
      speed: 2,
      direction: "none",
      random: false,
      straight: false,
      out_mode: "out",
      bounce: false,
      attract: {
        enable: false,
        rotateX: 3e3,
        rotateY: 3e3
      }
    }
  },
  interactivity: {
    detect_on: "canvas",
    events: {
      onhover: {
        enable: true,
        mode: "grab"
      },
      onclick: {
        enable: true,
        mode: "push"
      },
      resize: true
    },
    modes: {
      grab: {
        distance: 100,
        line_linked: {
          opacity: 1
        }
      },
      bubble: {
        distance: 200,
        size: 80,
        duration: 0.4,
        opacity: 1,
        speed: 3
      },
      repulse: {
        distance: 200,
        duration: 0.4
      },
      push: {
        particles_nb: 4
      },
      remove: {
        particles_nb: 2
      }
    }
  },
  retina_detect: false
};
var initParticlesJS = (engine) => {
  const particlesJS = (tagId, options) => {
    const fixedOptions = deepExtend(defaultPjsOptions, options);
    return engine.load({
      id: tagId,
      options: {
        fullScreen: {
          enable: false
        },
        detectRetina: fixedOptions.retina_detect,
        smooth: true,
        interactivity: {
          detectsOn: fixedOptions.interactivity.detect_on,
          events: {
            onHover: {
              enable: fixedOptions.interactivity.events.onhover.enable,
              mode: fixedOptions.interactivity.events.onhover.mode
            },
            onClick: {
              enable: fixedOptions.interactivity.events.onclick.enable,
              mode: fixedOptions.interactivity.events.onclick.mode
            },
            resize: {
              enable: fixedOptions.interactivity.events.resize
            }
          },
          modes: {
            grab: {
              distance: fixedOptions.interactivity.modes.grab.distance,
              links: {
                opacity: fixedOptions.interactivity.modes.grab.line_linked.opacity
              }
            },
            bubble: {
              distance: fixedOptions.interactivity.modes.bubble.distance,
              size: fixedOptions.interactivity.modes.bubble.size,
              duration: fixedOptions.interactivity.modes.bubble.duration,
              opacity: fixedOptions.interactivity.modes.bubble.opacity,
              speed: fixedOptions.interactivity.modes.bubble.speed
            },
            repulse: {
              distance: fixedOptions.interactivity.modes.repulse.distance,
              duration: fixedOptions.interactivity.modes.repulse.duration
            },
            push: {
              quantity: fixedOptions.interactivity.modes.push.particles_nb
            },
            remove: {
              quantity: fixedOptions.interactivity.modes.remove.particles_nb
            }
          }
        },
        particles: {
          collisions: {
            enable: fixedOptions.particles.move.bounce
          },
          number: {
            value: fixedOptions.particles.number.value,
            density: {
              enable: fixedOptions.particles.number.density.enable,
              width: fixedOptions.particles.number.density.value_area
            }
          },
          color: {
            value: fixedOptions.particles.color.value
          },
          stroke: {
            width: fixedOptions.particles.shape.stroke.width,
            color: {
              value: fixedOptions.particles.shape.stroke.color
            }
          },
          shape: {
            type: fixedOptions.particles.shape.type,
            options: {
              polygon: {
                sides: fixedOptions.particles.shape.polygon.nb_sides
              },
              image: {
                src: fixedOptions.particles.shape.image.src,
                width: fixedOptions.particles.shape.image.width,
                height: fixedOptions.particles.shape.image.height
              }
            }
          },
          opacity: {
            value: fixedOptions.particles.opacity.random ? {
              min: fixedOptions.particles.opacity.anim.enable ? fixedOptions.particles.opacity.anim.opacity_min : defaultMinOpacity,
              max: fixedOptions.particles.opacity.value
            } : fixedOptions.particles.opacity.value,
            animation: {
              enable: fixedOptions.particles.opacity.anim.enable,
              speed: fixedOptions.particles.opacity.anim.speed,
              sync: fixedOptions.particles.opacity.anim.sync
            }
          },
          size: {
            value: fixedOptions.particles.size.random ? {
              min: fixedOptions.particles.size.anim.enable ? fixedOptions.particles.size.anim.size_min : defaultMinSize,
              max: fixedOptions.particles.size.value
            } : fixedOptions.particles.size.value,
            animation: {
              enable: fixedOptions.particles.size.anim.enable,
              speed: fixedOptions.particles.size.anim.speed,
              sync: fixedOptions.particles.size.anim.sync
            }
          },
          links: {
            enable: fixedOptions.particles.line_linked.enable,
            distance: fixedOptions.particles.line_linked.distance,
            color: fixedOptions.particles.line_linked.color,
            opacity: fixedOptions.particles.line_linked.opacity,
            width: fixedOptions.particles.line_linked.width
          },
          move: {
            enable: fixedOptions.particles.move.enable,
            speed: fixedOptions.particles.move.speed / speedFactor,
            direction: fixedOptions.particles.move.direction,
            random: fixedOptions.particles.move.random,
            straight: fixedOptions.particles.move.straight,
            outModes: fixedOptions.particles.move.out_mode,
            attract: {
              enable: fixedOptions.particles.move.attract.enable,
              rotate: {
                x: fixedOptions.particles.move.attract.rotateX,
                y: fixedOptions.particles.move.attract.rotateY
              }
            }
          }
        }
      }
    });
  };
  particlesJS.load = (tagId, pathConfigJson, callback) => {
    engine.load({ id: tagId, url: pathConfigJson }).then((container) => {
      if (container) {
        callback(container);
      }
    }).catch(() => {
      callback(void 0);
    });
  };
  particlesJS.setOnClickHandler = (callback) => {
    engine.setOnClickHandler(callback);
  };
  const pJSDom = engine.dom();
  return { particlesJS, pJSDom };
};

// node_modules/@tsparticles/pjs/browser/index.js
var initPjs = (engine) => {
  engine.checkVersion("3.8.1");
  const { particlesJS, pJSDom } = initParticlesJS(engine);
  window.particlesJS = particlesJS;
  window.pJSDom = pJSDom;
  window.Particles = Particles;
  return { particlesJS, pJSDom, Particles };
};

// node_modules/@tsparticles/shape-arrow/browser/Utils.js
var double2 = 2;
var defaultHeightFactor = 0.5;
var defaultHeadWidthFactor = 0.2;
var defaultBodyHeightFactor = 0.5;
var half2 = 0.5;
var origin = {
  x: 0,
  y: 0
};
function drawArrow(data) {
  const { context, particle, radius } = data, width = radius * double2, heightFactor = particle.heightFactor ?? defaultHeightFactor, headWidthFactor = particle.headWidthFactor ?? defaultHeadWidthFactor, bodyHeightFactor = particle.bodyHeightFactor ?? defaultBodyHeightFactor, height = width * heightFactor, headWidth = width * headWidthFactor, bodyHeight = height * bodyHeightFactor;
  context.moveTo(-width * half2, origin.y);
  context.lineTo(-width * half2, -bodyHeight * half2);
  context.lineTo(width * half2 - headWidth, -bodyHeight * half2);
  context.lineTo(width * half2 - headWidth, -height * half2);
  context.lineTo(width * half2 + headWidth, origin.y);
  context.lineTo(width * half2 - headWidth, height * half2);
  context.lineTo(width * half2 - headWidth, bodyHeight * half2);
  context.lineTo(-width * half2, bodyHeight * half2);
  context.lineTo(-width * half2, origin.y);
}

// node_modules/@tsparticles/shape-arrow/browser/ArrowDrawer.js
var defaultHeightFactor2 = 0.5;
var defaultHeadWidthFactor2 = 0.2;
var defaultBodyHeightFactor2 = 0.5;
var ArrowDrawer = class {
  constructor() {
    this.validTypes = ["arrow"];
  }
  draw(data) {
    drawArrow(data);
  }
  particleInit(container, particle) {
    const shapeData = particle.shapeData;
    particle.heightFactor = getRangeValue((shapeData == null ? void 0 : shapeData.heightFactor) ?? defaultHeightFactor2);
    particle.headWidthFactor = getRangeValue((shapeData == null ? void 0 : shapeData.headWidthFactor) ?? defaultHeadWidthFactor2);
    particle.bodyHeightFactor = getRangeValue((shapeData == null ? void 0 : shapeData.bodyHeightFactor) ?? defaultBodyHeightFactor2);
  }
};

// node_modules/@tsparticles/shape-arrow/browser/index.js
async function loadArrowShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new ArrowDrawer(), refresh);
}

// node_modules/@tsparticles/effect-bubble/browser/BubbleDrawer.js
var bubbleFactor = 3;
var BubbleDrawer = class {
  draw(data) {
    const { context, radius } = data, bubbleRadius = radius / bubbleFactor;
    context.beginPath();
    context.arc(bubbleRadius, -bubbleRadius, bubbleRadius, defaultAngle, doublePI, false);
    context.closePath();
    context.fillStyle = "#fff9";
    context.fill();
  }
};

// node_modules/@tsparticles/effect-bubble/browser/index.js
async function loadBubbleEffect(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEffect("bubble", new BubbleDrawer(), refresh);
}

// node_modules/@tsparticles/plugin-canvas-mask/browser/Options/Classes/CanvasMaskOverride.js
var CanvasMaskOverride = class {
  constructor() {
    this.color = true;
    this.opacity = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.color !== void 0) {
      this.color = data.color;
    }
    if (data.opacity !== void 0) {
      this.opacity = data.opacity;
    }
  }
};

// node_modules/@tsparticles/plugin-canvas-mask/browser/Options/Classes/CanvasMaskPixels.js
var minAlpha = 0;
var CanvasMaskPixels = class {
  constructor() {
    this.filter = (pixel) => pixel.a > minAlpha;
    this.offset = 4;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.filter !== void 0) {
      if (isString(data.filter)) {
        if (Object.hasOwn(window, data.filter)) {
          const filter = window[data.filter];
          if (isFunction(filter)) {
            this.filter = filter;
          }
        }
      } else {
        this.filter = data.filter;
      }
    }
    if (data.offset !== void 0) {
      this.offset = data.offset;
    }
  }
};

// node_modules/@tsparticles/plugin-canvas-mask/browser/Options/Classes/ImageMask.js
var ImageMask = class {
  constructor() {
    this.src = "";
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.src !== void 0) {
      this.src = data.src;
    }
  }
};

// node_modules/@tsparticles/plugin-canvas-mask/browser/Options/Classes/FontTextMask.js
var FontTextMask = class {
  constructor() {
    this.family = "sans-serif";
    this.size = 100;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.family !== void 0) {
      this.family = data.family;
    }
    if (data.size !== void 0) {
      this.size = data.size;
    }
    if (data.style !== void 0) {
      this.style = data.style;
    }
    if (data.variant !== void 0) {
      this.variant = data.variant;
    }
    if (data.weight !== void 0) {
      this.weight = data.weight;
    }
  }
};

// node_modules/@tsparticles/plugin-canvas-mask/browser/Options/Classes/TextMaskLine.js
var TextMaskLine = class {
  constructor() {
    this.separator = "\n";
    this.spacing = 10;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.separator !== void 0) {
      this.separator = data.separator;
    }
    if (data.spacing !== void 0) {
      this.spacing = data.spacing;
    }
  }
};

// node_modules/@tsparticles/plugin-canvas-mask/browser/Options/Classes/TextMask.js
var TextMask = class {
  constructor() {
    this.color = "#000000";
    this.font = new FontTextMask();
    this.lines = new TextMaskLine();
    this.text = "";
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.color !== void 0) {
      this.color = data.color;
    }
    this.font.load(data.font);
    this.lines.load(data.lines);
    if (data.text !== void 0) {
      this.text = data.text;
    }
  }
};

// node_modules/@tsparticles/plugin-canvas-mask/browser/Options/Classes/CanvasMask.js
var CanvasMask = class {
  constructor() {
    this.enable = false;
    this.override = new CanvasMaskOverride();
    this.pixels = new CanvasMaskPixels();
    this.position = {
      x: 50,
      y: 50
    };
    this.scale = 1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.element !== void 0 && data.element instanceof HTMLCanvasElement) {
      this.element = data.element;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.image) {
      if (!this.image) {
        this.image = new ImageMask();
      }
      this.image.load(data.image);
    }
    this.pixels.load(data.pixels);
    if (data.position) {
      this.position = {
        x: data.position.x ?? this.position.x,
        y: data.position.y ?? this.position.y
      };
    }
    this.override.load(data.override);
    if (data.scale !== void 0) {
      this.scale = data.scale;
    }
    if (data.selector !== void 0) {
      this.selector = data.selector;
    }
    if (data.text) {
      if (!this.text) {
        this.text = new TextMask();
      }
      this.text.load(data.text);
    }
  }
};

// node_modules/@tsparticles/plugin-canvas-mask/browser/utils.js
var half3 = 0.5;
var origin2 = {
  x: 0,
  y: 0
};
var defaultWidth = 0;
function addParticlesFromCanvasPixels(container, data, position, scale, override, filter) {
  const { height, width } = data, numPixels = height * width, indexArray = shuffle(range(numPixels)), maxParticles = Math.min(numPixels, container.actualOptions.particles.number.value), canvasSize = container.canvas.size;
  let selectedPixels = 0;
  const positionOffset = {
    x: canvasSize.width * position.x / percentDenominator - width * scale * half3,
    y: canvasSize.height * position.y / percentDenominator - height * scale * half3
  };
  while (selectedPixels < maxParticles && indexArray.length) {
    const defaultIndex2 = 0, nextIndex = indexArray.pop() ?? defaultIndex2, pixelPos = {
      x: nextIndex % width,
      y: Math.floor(nextIndex / width)
    }, pixel = data.pixels[pixelPos.y][pixelPos.x], shouldCreateParticle = filter(pixel);
    if (!shouldCreateParticle) {
      continue;
    }
    const pos = {
      x: pixelPos.x * scale + positionOffset.x,
      y: pixelPos.y * scale + positionOffset.y
    }, pOptions = {};
    if (override.color) {
      pOptions.color = {
        value: pixel
      };
    }
    if (override.opacity) {
      pOptions.opacity = {
        value: pixel.a
      };
    }
    container.particles.addParticle(pos, pOptions);
    selectedPixels++;
  }
}
function getCanvasImageData(ctx, size, offset, clear = true) {
  const imageData = ctx.getImageData(origin2.x, origin2.y, size.width, size.height).data;
  if (clear) {
    ctx.clearRect(origin2.x, origin2.y, size.width, size.height);
  }
  const pixels = [];
  for (let i = 0; i < imageData.length; i += offset) {
    const idx = i / offset, pos = {
      x: idx % size.width,
      y: Math.floor(idx / size.width)
    };
    if (!pixels[pos.y]) {
      pixels[pos.y] = [];
    }
    const indexesOffset = {
      r: 0,
      g: 1,
      b: 2,
      a: 3
    }, alphaFactor2 = 255;
    pixels[pos.y][pos.x] = {
      r: imageData[i + indexesOffset.r],
      g: imageData[i + indexesOffset.g],
      b: imageData[i + indexesOffset.b],
      a: imageData[i + indexesOffset.a] / alphaFactor2
    };
  }
  return {
    pixels,
    width: Math.min(...pixels.map((row) => row.length)),
    height: pixels.length
  };
}
function getImageData(src, offset) {
  const image = new Image();
  image.crossOrigin = "Anonymous";
  const p = new Promise((resolve, reject) => {
    image.onerror = reject;
    image.onload = () => {
      const canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      const context = canvas.getContext("2d");
      if (!context) {
        return reject(new Error(`${errorPrefix} Could not get canvas context`));
      }
      context.drawImage(image, origin2.x, origin2.y, image.width, image.height, origin2.x, origin2.y, canvas.width, canvas.height);
      resolve(getCanvasImageData(context, canvas, offset));
    };
  });
  image.src = src;
  return p;
}
function getTextData(textOptions, offset) {
  const canvas = document.createElement("canvas"), context = canvas.getContext("2d"), { font, text, lines: linesOptions, color } = textOptions;
  if (!text || !context) {
    return;
  }
  const lines = text.split(linesOptions.separator), fontSize = isNumber(font.size) ? `${font.size}px` : font.size, linesData = [];
  let maxWidth = 0, totalHeight = 0;
  for (const line of lines) {
    context.font = `${font.style ?? ""} ${font.variant ?? ""} ${font.weight ?? ""} ${fontSize} ${font.family}`;
    const measure = context.measureText(line), lineData = {
      measure,
      text: line,
      height: measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent,
      width: measure.width
    };
    maxWidth = Math.max(maxWidth || defaultWidth, lineData.width);
    totalHeight += lineData.height + linesOptions.spacing;
    linesData.push(lineData);
  }
  canvas.width = maxWidth;
  canvas.height = totalHeight;
  let currentHeight = 0;
  for (const line of linesData) {
    context.font = `${font.style ?? ""} ${font.variant ?? ""} ${font.weight ?? ""} ${fontSize} ${font.family}`;
    context.fillStyle = color;
    context.fillText(line.text, origin2.x, currentHeight + line.measure.actualBoundingBoxAscent);
    currentHeight += line.height + linesOptions.spacing;
  }
  return getCanvasImageData(context, canvas, offset);
}
function shuffle(array) {
  const lengthOffset = 1, minIndex2 = 0;
  for (let currentIndex = array.length - lengthOffset; currentIndex >= minIndex2; currentIndex--) {
    const randomIndex = Math.floor(getRandom() * currentIndex);
    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
  }
  return array;
}
var range = (n2) => [...Array(n2).keys()];

// node_modules/@tsparticles/plugin-canvas-mask/browser/CanvasMaskInstance.js
var CanvasMaskInstance = class {
  constructor(container) {
    this._container = container;
  }
  async init() {
    const container = this._container, options = container.actualOptions.canvasMask;
    if (!(options == null ? void 0 : options.enable)) {
      return;
    }
    let pixelData = {
      pixels: [],
      height: 0,
      width: 0
    };
    const offset = options.pixels.offset;
    if (options.image) {
      const url = options.image.src;
      if (!url) {
        return;
      }
      pixelData = await getImageData(url, offset);
    } else if (options.text) {
      const textOptions = options.text;
      const data = getTextData(textOptions, offset);
      if (isNull(data)) {
        return;
      }
      pixelData = data;
    } else if (options.element ?? options.selector) {
      const canvas = options.element ?? (options.selector && document.querySelector(options.selector));
      if (!canvas) {
        return;
      }
      const context = canvas.getContext("2d");
      if (!context) {
        return;
      }
      pixelData = getCanvasImageData(context, canvas, offset);
    }
    addParticlesFromCanvasPixels(container, pixelData, options.position, options.scale, options.override, options.pixels.filter);
  }
};

// node_modules/@tsparticles/plugin-canvas-mask/browser/CanvasMaskPlugin.js
var CanvasMaskPlugin = class {
  constructor() {
    this.id = "canvasMask";
  }
  getPlugin(container) {
    return Promise.resolve(new CanvasMaskInstance(container));
  }
  loadOptions(options, source) {
    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
      return;
    }
    let canvasMaskOptions = options.canvasMask;
    if ((canvasMaskOptions == null ? void 0 : canvasMaskOptions.load) === void 0) {
      options.canvasMask = canvasMaskOptions = new CanvasMask();
    }
    canvasMaskOptions.load(source == null ? void 0 : source.canvasMask);
  }
  needsPlugin(options) {
    var _a;
    return ((_a = options == null ? void 0 : options.canvasMask) == null ? void 0 : _a.enable) ?? false;
  }
};

// node_modules/@tsparticles/plugin-canvas-mask/browser/index.js
async function loadCanvasMaskPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPlugin(new CanvasMaskPlugin(), refresh);
}

// node_modules/@tsparticles/shape-cards/browser/Utils.js
function drawPath(data, path) {
  if (!path.segments.length || !path.segments[0].values.length) {
    return;
  }
  const { context, radius } = data;
  context.moveTo(path.segments[0].values[0].x * radius, path.segments[0].values[0].y * radius);
  for (const segment of path.segments) {
    context.bezierCurveTo(segment.values[1].x * radius, segment.values[1].y * radius, segment.values[2].x * radius, segment.values[2].y * radius, segment.values[3].x * radius, segment.values[3].y * radius);
  }
  for (let i = path.segments.length - 1; i >= 0; i--) {
    const segment = path.segments[i];
    context.bezierCurveTo(-segment.values[2].x * radius, segment.values[2].y * radius, -segment.values[1].x * radius, segment.values[1].y * radius, -segment.values[0].x * radius, segment.values[0].y * radius);
  }
}
var n = 1 / 2;
var paths = {
  heart: {
    segments: [
      {
        values: [
          { x: 0, y: n },
          { x: 0, y: n },
          { x: n, y: 0 },
          { x: n, y: -n / 2 }
        ]
      },
      {
        values: [
          { x: n, y: -n / 2 },
          { x: n, y: -n / 2 },
          { x: n, y: -n },
          { x: n / 2, y: -n }
        ]
      },
      {
        values: [
          { x: n / 2, y: -n },
          { x: n / 2, y: -n },
          { x: 0, y: -n },
          { x: 0, y: -n / 2 }
        ]
      }
    ]
  },
  diamond: {
    segments: [
      {
        values: [
          { x: 0, y: n },
          { x: 0, y: n },
          { x: 3 * n / 4, y: 0 },
          { x: 3 * n / 4, y: 0 }
        ]
      },
      {
        values: [
          { x: 3 * n / 4, y: 0 },
          { x: 3 * n / 4, y: 0 },
          { x: 0, y: -n },
          { x: 0, y: -n }
        ]
      }
    ]
  },
  club: {
    segments: [
      {
        values: [
          { x: 0, y: -n },
          { x: 0, y: -n },
          { x: n / 2, y: -n },
          { x: n / 2, y: -n / 2 }
        ]
      },
      {
        values: [
          { x: n / 2, y: -n / 2 },
          { x: n / 2, y: -n / 2 },
          { x: n, y: -n / 2 },
          { x: n, y: 0 }
        ]
      },
      {
        values: [
          { x: n, y: 0 },
          { x: n, y: 0 },
          { x: n, y: n / 2 },
          { x: n / 2, y: n / 2 }
        ]
      },
      {
        values: [
          { x: n / 2, y: n / 2 },
          { x: n / 2, y: n / 2 },
          { x: n / 8, y: n / 2 },
          { x: n / 8, y: n / 8 }
        ]
      },
      {
        values: [
          { x: n / 8, y: n / 8 },
          { x: n / 8, y: n / 2 },
          { x: n / 2, y: n },
          { x: n / 2, y: n }
        ]
      },
      {
        values: [
          { x: n / 2, y: n },
          { x: n / 2, y: n },
          { x: 0, y: n },
          { x: 0, y: n }
        ]
      }
    ]
  },
  spade: {
    segments: [
      {
        values: [
          { x: 0, y: -n },
          { x: 0, y: -n },
          { x: n, y: -n / 2 },
          { x: n, y: 0 }
        ]
      },
      {
        values: [
          { x: n, y: 0 },
          { x: n, y: 0 },
          { x: n, y: n / 2 },
          { x: n / 2, y: n / 2 }
        ]
      },
      {
        values: [
          { x: n / 2, y: n / 2 },
          { x: n / 2, y: n / 2 },
          { x: n / 8, y: n / 2 },
          { x: n / 8, y: n / 8 }
        ]
      },
      {
        values: [
          { x: n / 8, y: n / 8 },
          { x: n / 8, y: n / 2 },
          { x: n / 2, y: n },
          { x: n / 2, y: n }
        ]
      },
      {
        values: [
          { x: n / 2, y: n },
          { x: n / 2, y: n },
          { x: 0, y: n },
          { x: 0, y: n }
        ]
      }
    ]
  }
};

// node_modules/@tsparticles/shape-cards/browser/ClubDrawer.js
var ClubDrawer = class {
  constructor() {
    this.validTypes = ["club", "clubs"];
  }
  draw(data) {
    drawPath(data, paths.club);
  }
};

// node_modules/@tsparticles/shape-cards/browser/DiamondDrawer.js
var DiamondDrawer = class {
  constructor() {
    this.validTypes = ["diamond", "diamonds"];
  }
  draw(data) {
    drawPath(data, paths.diamond);
  }
};

// node_modules/@tsparticles/shape-cards/browser/HeartDrawer.js
var HeartDrawer = class {
  constructor() {
    this.validTypes = ["heart", "hearts"];
  }
  draw(data) {
    drawPath(data, paths.heart);
  }
};

// node_modules/@tsparticles/shape-cards/browser/SpadeDrawer.js
var SpadeDrawer = class {
  constructor() {
    this.validTypes = ["spade", "spades"];
  }
  draw(data) {
    drawPath(data, paths.spade);
  }
};

// node_modules/@tsparticles/shape-cards/browser/index.js
async function loadCardsShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new SpadeDrawer(), refresh);
  await engine.addShape(new HeartDrawer(), refresh);
  await engine.addShape(new DiamondDrawer(), refresh);
  await engine.addShape(new ClubDrawer(), refresh);
}

// node_modules/@tsparticles/shape-cog/browser/Utils.js
var double3 = 2;
var doublePI2 = Math.PI * double3;
var minAngle = 0;
var origin3 = { x: 0, y: 0 };
var taperFactor = 5e-3;
function drawCogHole(data) {
  const { context, particle, radius } = data;
  if (particle.cogHoleRadius === void 0 || particle.cogInnerRadius === void 0 || particle.cogInnerTaper === void 0 || particle.cogNotches === void 0 || particle.cogOuterTaper === void 0) {
    return;
  }
  const holeRadius = radius * particle.cogHoleRadius / percentDenominator;
  context.globalCompositeOperation = "destination-out";
  context.beginPath();
  context.moveTo(holeRadius, origin3.y);
  context.arc(origin3.x, origin3.y, holeRadius, minAngle, doublePI2);
  context.closePath();
  context.fill();
  context.globalCompositeOperation = "source-over";
}
function drawCog(data) {
  const { context, particle, radius } = data;
  if (particle.cogHoleRadius === void 0 || particle.cogInnerRadius === void 0 || particle.cogInnerTaper === void 0 || particle.cogNotches === void 0 || particle.cogOuterTaper === void 0) {
    return;
  }
  const angle = doublePI2 / (particle.cogNotches * double3), taperAI = angle * particle.cogInnerTaper * taperFactor, taperAO = angle * particle.cogOuterTaper * taperFactor, innerRadius = radius * particle.cogInnerRadius / percentDenominator;
  let a = angle, toggle = false;
  context.moveTo(radius * Math.cos(taperAO), radius * Math.sin(taperAO));
  for (; a <= doublePI2; a += angle) {
    if (toggle) {
      context.lineTo(innerRadius * Math.cos(a - taperAI), innerRadius * Math.sin(a - taperAI));
      context.lineTo(radius * Math.cos(a + taperAO), radius * Math.sin(a + taperAO));
    } else {
      context.lineTo(radius * Math.cos(a - taperAO), radius * Math.sin(a - taperAO));
      context.lineTo(innerRadius * Math.cos(a + taperAI), innerRadius * Math.sin(a + taperAI));
    }
    toggle = !toggle;
  }
}

// node_modules/@tsparticles/shape-cog/browser/CogDrawer.js
var defaultHoleRadius = 44;
var defaultInnerRadius = 72;
var defaultInnerTaper = 35;
var defaultNotches = 7;
var defaultOuterTaper = 50;
var CogDrawer = class {
  constructor() {
    this.validTypes = ["cog"];
  }
  afterDraw(data) {
    drawCogHole(data);
  }
  draw(data) {
    drawCog(data);
  }
  particleInit(container, particle) {
    const shapeData = particle.shapeData;
    particle.cogHoleRadius = getRangeValue((shapeData == null ? void 0 : shapeData.holeRadius) ?? defaultHoleRadius);
    particle.cogInnerRadius = getRangeValue((shapeData == null ? void 0 : shapeData.innerRadius) ?? defaultInnerRadius);
    particle.cogInnerTaper = getRangeValue((shapeData == null ? void 0 : shapeData.innerTaper) ?? defaultInnerTaper);
    particle.cogNotches = getRangeValue((shapeData == null ? void 0 : shapeData.notches) ?? defaultNotches);
    particle.cogOuterTaper = getRangeValue((shapeData == null ? void 0 : shapeData.outerTaper) ?? defaultOuterTaper);
  }
};

// node_modules/@tsparticles/shape-cog/browser/index.js
async function loadCogShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new CogDrawer(), refresh);
}

// node_modules/@tsparticles/simplex-noise/browser/utils.js
function shuffleSeed(seed) {
  const newSeed = new Uint32Array(1);
  newSeed[0] = seed[0] * 1664525 + 1013904223;
  return newSeed;
}

// node_modules/@tsparticles/simplex-noise/browser/Classes/SimplexNoise2D.js
var SimplexNoise2D = class {
  constructor() {
    this._NORM_2D = 1 / 47;
    this._SQUISH_2D = (Math.sqrt(2 + 1) - 1) / 2;
    this._STRETCH_2D = (1 / Math.sqrt(2 + 1) - 1) / 2;
    this._base2D = [
      [1, 1, 0, 1, 0, 1, 0, 0, 0],
      [1, 1, 0, 1, 0, 1, 2, 1, 1]
    ];
    this._gradients2D = [
      5,
      2,
      2,
      5,
      -5,
      2,
      -2,
      5,
      5,
      -2,
      2,
      -5,
      -5,
      -2,
      -2,
      -5
    ];
    this._lookup = [];
    this._lookupPairs2D = [
      0,
      1,
      1,
      0,
      4,
      1,
      17,
      0,
      20,
      2,
      21,
      2,
      22,
      5,
      23,
      5,
      26,
      4,
      39,
      3,
      42,
      4,
      43,
      3
    ];
    this._p2D = [
      0,
      0,
      1,
      -1,
      0,
      0,
      -1,
      1,
      0,
      2,
      1,
      1,
      1,
      2,
      2,
      0,
      1,
      2,
      0,
      2,
      1,
      0,
      0,
      0
    ];
    this._perm = new Uint8Array(256);
    this._perm2D = new Uint8Array(256);
  }
  noise(x, y) {
    const { _gradients2D, _NORM_2D, _SQUISH_2D, _STRETCH_2D, _lookup, _perm, _perm2D } = this;
    const stretchOffset = (x + y) * _STRETCH_2D, xs = x + stretchOffset, ys = y + stretchOffset, xsb = Math.floor(xs), ysb = Math.floor(ys), squishOffset = (xsb + ysb) * _SQUISH_2D, dx0 = x - (xsb + squishOffset), dy0 = y - (ysb + squishOffset), xins = xs - xsb, yins = ys - ysb, inSum = xins + yins, hash = xins - yins + 1 | inSum << 1 | inSum + yins << 2 | inSum + xins << 4;
    let value = 0;
    for (let c = _lookup[hash]; c !== void 0; c = c.next) {
      const dx = dx0 + c.dx, dy = dy0 + c.dy, attn = 2 - dx * dx - dy * dy;
      if (attn > 0) {
        const px = xsb + c.xsb, py = ysb + c.ysb, indexPartA = _perm[px & 255], index = _perm2D[indexPartA + py & 255], valuePart = _gradients2D[index] * dx + _gradients2D[index + 1] * dy;
        value += attn * attn * attn * attn * valuePart;
      }
    }
    return value * _NORM_2D;
  }
  seed(clientSeed) {
    const { _p2D, _base2D, _lookupPairs2D } = this;
    const contributions = [];
    for (let i = 0; i < _p2D.length; i += 4) {
      const baseSet = _base2D[_p2D[i]];
      let previous = null, current = null;
      for (let k = 0; k < baseSet.length; k += 3) {
        current = this._contribution2D(baseSet[k], baseSet[k + 1], baseSet[k + 2]);
        if (previous === null) {
          contributions[i / 4] = current;
        } else {
          previous.next = current;
        }
        previous = current;
      }
      if (current) {
        current.next = this._contribution2D(_p2D[i + 1], _p2D[i + 2], _p2D[i + 3]);
      }
    }
    this._lookup = [];
    for (let i = 0; i < _lookupPairs2D.length; i += 2) {
      this._lookup[_lookupPairs2D[i]] = contributions[_lookupPairs2D[i + 1]];
    }
    this._perm = new Uint8Array(256);
    this._perm2D = new Uint8Array(256);
    const source = new Uint8Array(256);
    for (let i = 0; i < 256; i++) {
      source[i] = i;
    }
    let seed = new Uint32Array(1);
    seed[0] = clientSeed;
    seed = shuffleSeed(shuffleSeed(shuffleSeed(seed)));
    for (let i = 255; i >= 0; i--) {
      seed = shuffleSeed(seed);
      const r = new Uint32Array(1);
      r[0] = (seed[0] + 31) % (i + 1);
      if (r[0] < 0) {
        r[0] += i + 1;
      }
      this._perm[i] = source[r[0]];
      this._perm2D[i] = this._perm[i] & 14;
      source[r[0]] = source[i];
    }
  }
  _contribution2D(multiplier, xsb, ysb) {
    const { _SQUISH_2D } = this;
    return {
      dx: -xsb - multiplier * _SQUISH_2D,
      dy: -ysb - multiplier * _SQUISH_2D,
      xsb,
      ysb
    };
  }
};

// node_modules/@tsparticles/simplex-noise/browser/Classes/SimplexNoise3D.js
var SimplexNoise3D = class {
  constructor() {
    this._NORM_3D = 1 / 103;
    this._SQUISH_3D = (Math.sqrt(3 + 1) - 1) / 3;
    this._STRETCH_3D = (1 / Math.sqrt(3 + 1) - 1) / 3;
    this._base3D = [
      [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1],
      [2, 1, 1, 0, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 1],
      [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 1, 1, 0, 2, 1, 0, 1, 2, 0, 1, 1]
    ];
    this._gradients3D = [
      -11,
      4,
      4,
      -4,
      11,
      4,
      -4,
      4,
      11,
      11,
      4,
      4,
      4,
      11,
      4,
      4,
      4,
      11,
      -11,
      -4,
      4,
      -4,
      -11,
      4,
      -4,
      -4,
      11,
      11,
      -4,
      4,
      4,
      -11,
      4,
      4,
      -4,
      11,
      -11,
      4,
      -4,
      -4,
      11,
      -4,
      -4,
      4,
      -11,
      11,
      4,
      -4,
      4,
      11,
      -4,
      4,
      4,
      -11,
      -11,
      -4,
      -4,
      -4,
      -11,
      -4,
      -4,
      -4,
      -11,
      11,
      -4,
      -4,
      4,
      -11,
      -4,
      4,
      -4,
      -11
    ];
    this._lookup = [];
    this._lookupPairs3D = [
      0,
      2,
      1,
      1,
      2,
      2,
      5,
      1,
      6,
      0,
      7,
      0,
      32,
      2,
      34,
      2,
      129,
      1,
      133,
      1,
      160,
      5,
      161,
      5,
      518,
      0,
      519,
      0,
      546,
      4,
      550,
      4,
      645,
      3,
      647,
      3,
      672,
      5,
      673,
      5,
      674,
      4,
      677,
      3,
      678,
      4,
      679,
      3,
      680,
      13,
      681,
      13,
      682,
      12,
      685,
      14,
      686,
      12,
      687,
      14,
      712,
      20,
      714,
      18,
      809,
      21,
      813,
      23,
      840,
      20,
      841,
      21,
      1198,
      19,
      1199,
      22,
      1226,
      18,
      1230,
      19,
      1325,
      23,
      1327,
      22,
      1352,
      15,
      1353,
      17,
      1354,
      15,
      1357,
      17,
      1358,
      16,
      1359,
      16,
      1360,
      11,
      1361,
      10,
      1362,
      11,
      1365,
      10,
      1366,
      9,
      1367,
      9,
      1392,
      11,
      1394,
      11,
      1489,
      10,
      1493,
      10,
      1520,
      8,
      1521,
      8,
      1878,
      9,
      1879,
      9,
      1906,
      7,
      1910,
      7,
      2005,
      6,
      2007,
      6,
      2032,
      8,
      2033,
      8,
      2034,
      7,
      2037,
      6,
      2038,
      7,
      2039,
      6
    ];
    this._p3D = [
      0,
      0,
      1,
      -1,
      0,
      0,
      1,
      0,
      -1,
      0,
      0,
      -1,
      1,
      0,
      0,
      0,
      1,
      -1,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      -1,
      1,
      0,
      2,
      1,
      1,
      0,
      1,
      1,
      1,
      -1,
      0,
      2,
      1,
      0,
      1,
      1,
      1,
      -1,
      1,
      0,
      2,
      0,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      3,
      2,
      1,
      0,
      3,
      1,
      2,
      0,
      1,
      3,
      2,
      0,
      1,
      3,
      1,
      0,
      2,
      1,
      3,
      0,
      2,
      1,
      3,
      0,
      1,
      2,
      1,
      1,
      1,
      0,
      0,
      2,
      2,
      0,
      0,
      1,
      1,
      0,
      1,
      0,
      2,
      0,
      2,
      0,
      1,
      1,
      0,
      0,
      1,
      2,
      0,
      0,
      2,
      2,
      0,
      0,
      0,
      0,
      1,
      1,
      -1,
      1,
      2,
      0,
      0,
      0,
      0,
      1,
      -1,
      1,
      1,
      2,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      -1,
      2,
      3,
      1,
      1,
      1,
      2,
      0,
      0,
      2,
      2,
      3,
      1,
      1,
      1,
      2,
      2,
      0,
      0,
      2,
      3,
      1,
      1,
      1,
      2,
      0,
      2,
      0,
      2,
      1,
      1,
      -1,
      1,
      2,
      0,
      0,
      2,
      2,
      1,
      1,
      -1,
      1,
      2,
      2,
      0,
      0,
      2,
      1,
      -1,
      1,
      1,
      2,
      0,
      0,
      2,
      2,
      1,
      -1,
      1,
      1,
      2,
      0,
      2,
      0,
      2,
      1,
      1,
      1,
      -1,
      2,
      2,
      0,
      0,
      2,
      1,
      1,
      1,
      -1,
      2,
      0,
      2,
      0
    ];
    this._perm = new Uint8Array(256);
    this._perm3D = new Uint8Array(256);
  }
  noise(x, y, z) {
    const { _STRETCH_3D, _NORM_3D, _SQUISH_3D, _lookup, _perm, _perm3D, _gradients3D } = this, stretchOffset = (x + y + z) * _STRETCH_3D, xs = x + stretchOffset, ys = y + stretchOffset, zs = z + stretchOffset, xsb = Math.floor(xs), ysb = Math.floor(ys), zsb = Math.floor(zs), squishOffset = (xsb + ysb + zsb) * _SQUISH_3D, dx0 = x - (xsb + squishOffset), dy0 = y - (ysb + squishOffset), dz0 = z - (zsb + squishOffset), xins = xs - xsb, yins = ys - ysb, zins = zs - zsb, inSum = xins + yins + zins, hash = yins - zins + 1 | xins - yins + 1 << 1 | xins - zins + 1 << 2 | inSum << 3 | inSum + zins << 5 | inSum + yins << 7 | inSum + xins << 9;
    let value = 0;
    for (let c = _lookup[hash]; c !== void 0; c = c.next) {
      const dx = dx0 + c.dx, dy = dy0 + c.dy, dz = dz0 + c.dz, attn = 2 - dx * dx - dy * dy - dz * dz;
      if (attn > 0) {
        const px = xsb + c.xsb, py = ysb + c.ysb, pz = zsb + c.zsb, indexPartA = _perm[px & 255], indexPartB = _perm[indexPartA + py & 255], index = _perm3D[indexPartB + pz & 255], valuePart = _gradients3D[index] * dx + _gradients3D[index + 1] * dy + _gradients3D[index + 2] * dz;
        value += attn * attn * attn * attn * valuePart;
      }
    }
    return value * _NORM_3D;
  }
  seed(clientSeed) {
    const { _base3D, _lookupPairs3D, _p3D } = this, contributions = [];
    for (let i = 0; i < _p3D.length; i += 9) {
      const baseSet = _base3D[_p3D[i]];
      let previous = null, current = null;
      for (let k = 0; k < baseSet.length; k += 4) {
        current = this._contribution3D(baseSet[k], baseSet[k + 1], baseSet[k + 2], baseSet[k + 3]);
        if (previous === null) {
          contributions[i / 9] = current;
        } else {
          previous.next = current;
        }
        previous = current;
      }
      if (current) {
        current.next = this._contribution3D(_p3D[i + 1], _p3D[i + 2], _p3D[i + 3], _p3D[i + 4]);
        current.next.next = this._contribution3D(_p3D[i + 5], _p3D[i + 6], _p3D[i + 7], _p3D[i + 8]);
      }
    }
    this._lookup = [];
    for (let i = 0; i < _lookupPairs3D.length; i += 2) {
      this._lookup[_lookupPairs3D[i]] = contributions[_lookupPairs3D[i + 1]];
    }
    this._perm = new Uint8Array(256);
    this._perm3D = new Uint8Array(256);
    const source = new Uint8Array(256);
    for (let i = 0; i < 256; i++) {
      source[i] = i;
    }
    let seed = new Uint32Array(1);
    seed[0] = clientSeed;
    seed = shuffleSeed(shuffleSeed(shuffleSeed(seed)));
    for (let i = 255; i >= 0; i--) {
      seed = shuffleSeed(seed);
      const r = new Uint32Array(1);
      r[0] = (seed[0] + 31) % (i + 1);
      if (r[0] < 0) {
        r[0] += i + 1;
      }
      this._perm[i] = source[r[0]];
      this._perm3D[i] = this._perm[i] % 24 * 3;
      source[r[0]] = source[i];
    }
  }
  _contribution3D(multiplier, xsb, ysb, zsb) {
    const { _SQUISH_3D } = this;
    return {
      dx: -xsb - multiplier * _SQUISH_3D,
      dy: -ysb - multiplier * _SQUISH_3D,
      dz: -zsb - multiplier * _SQUISH_3D,
      xsb,
      ysb,
      zsb
    };
  }
};

// node_modules/@tsparticles/simplex-noise/browser/Classes/SimplexNoise4D.js
var SimplexNoise4D = class {
  constructor() {
    this._NORM_4D = 1 / 30;
    this._SQUISH_4D = (Math.sqrt(4 + 1) - 1) * 0.25;
    this._STRETCH_4D = (1 / Math.sqrt(4 + 1) - 1) * 0.25;
    this._lookup = [];
    this._perm = new Uint8Array(0);
    this._perm4D = new Uint8Array(0);
    this._base4D = [
      [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1],
      [3, 1, 1, 1, 0, 3, 1, 1, 0, 1, 3, 1, 0, 1, 1, 3, 0, 1, 1, 1, 4, 1, 1, 1, 1],
      [
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        2,
        1,
        1,
        0,
        0,
        2,
        1,
        0,
        1,
        0,
        2,
        1,
        0,
        0,
        1,
        2,
        0,
        1,
        1,
        0,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        1
      ],
      [
        3,
        1,
        1,
        1,
        0,
        3,
        1,
        1,
        0,
        1,
        3,
        1,
        0,
        1,
        1,
        3,
        0,
        1,
        1,
        1,
        2,
        1,
        1,
        0,
        0,
        2,
        1,
        0,
        1,
        0,
        2,
        1,
        0,
        0,
        1,
        2,
        0,
        1,
        1,
        0,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        1
      ]
    ];
    this._gradients4D = [
      3,
      1,
      1,
      1,
      1,
      3,
      1,
      1,
      1,
      1,
      3,
      1,
      1,
      1,
      1,
      3,
      -3,
      1,
      1,
      1,
      -1,
      3,
      1,
      1,
      -1,
      1,
      3,
      1,
      -1,
      1,
      1,
      3,
      3,
      -1,
      1,
      1,
      1,
      -3,
      1,
      1,
      1,
      -1,
      3,
      1,
      1,
      -1,
      1,
      3,
      -3,
      -1,
      1,
      1,
      -1,
      -3,
      1,
      1,
      -1,
      -1,
      3,
      1,
      -1,
      -1,
      1,
      3,
      3,
      1,
      -1,
      1,
      1,
      3,
      -1,
      1,
      1,
      1,
      -3,
      1,
      1,
      1,
      -1,
      3,
      -3,
      1,
      -1,
      1,
      -1,
      3,
      -1,
      1,
      -1,
      1,
      -3,
      1,
      -1,
      1,
      -1,
      3,
      3,
      -1,
      -1,
      1,
      1,
      -3,
      -1,
      1,
      1,
      -1,
      -3,
      1,
      1,
      -1,
      -1,
      3,
      -3,
      -1,
      -1,
      1,
      -1,
      -3,
      -1,
      1,
      -1,
      -1,
      -3,
      1,
      -1,
      -1,
      -1,
      3,
      3,
      1,
      1,
      -1,
      1,
      3,
      1,
      -1,
      1,
      1,
      3,
      -1,
      1,
      1,
      1,
      -3,
      -3,
      1,
      1,
      -1,
      -1,
      3,
      1,
      -1,
      -1,
      1,
      3,
      -1,
      -1,
      1,
      1,
      -3,
      3,
      -1,
      1,
      -1,
      1,
      -3,
      1,
      -1,
      1,
      -1,
      3,
      -1,
      1,
      -1,
      1,
      -3,
      -3,
      -1,
      1,
      -1,
      -1,
      -3,
      1,
      -1,
      -1,
      -1,
      3,
      -1,
      -1,
      -1,
      1,
      -3,
      3,
      1,
      -1,
      -1,
      1,
      3,
      -1,
      -1,
      1,
      1,
      -3,
      -1,
      1,
      1,
      -1,
      -3,
      -3,
      1,
      -1,
      -1,
      -1,
      3,
      -1,
      -1,
      -1,
      1,
      -3,
      -1,
      -1,
      1,
      -1,
      -3,
      3,
      -1,
      -1,
      -1,
      1,
      -3,
      -1,
      -1,
      1,
      -1,
      -3,
      -1,
      1,
      -1,
      -1,
      -3,
      -3,
      -1,
      -1,
      -1,
      -1,
      -3,
      -1,
      -1,
      -1,
      -1,
      -3,
      -1,
      -1,
      -1,
      -1,
      -3
    ];
    this._lookupPairs4D = [
      0,
      3,
      1,
      2,
      2,
      3,
      5,
      2,
      6,
      1,
      7,
      1,
      8,
      3,
      9,
      2,
      10,
      3,
      13,
      2,
      16,
      3,
      18,
      3,
      22,
      1,
      23,
      1,
      24,
      3,
      26,
      3,
      33,
      2,
      37,
      2,
      38,
      1,
      39,
      1,
      41,
      2,
      45,
      2,
      54,
      1,
      55,
      1,
      56,
      0,
      57,
      0,
      58,
      0,
      59,
      0,
      60,
      0,
      61,
      0,
      62,
      0,
      63,
      0,
      256,
      3,
      258,
      3,
      264,
      3,
      266,
      3,
      272,
      3,
      274,
      3,
      280,
      3,
      282,
      3,
      2049,
      2,
      2053,
      2,
      2057,
      2,
      2061,
      2,
      2081,
      2,
      2085,
      2,
      2089,
      2,
      2093,
      2,
      2304,
      9,
      2305,
      9,
      2312,
      9,
      2313,
      9,
      16390,
      1,
      16391,
      1,
      16406,
      1,
      16407,
      1,
      16422,
      1,
      16423,
      1,
      16438,
      1,
      16439,
      1,
      16642,
      8,
      16646,
      8,
      16658,
      8,
      16662,
      8,
      18437,
      6,
      18439,
      6,
      18469,
      6,
      18471,
      6,
      18688,
      9,
      18689,
      9,
      18690,
      8,
      18693,
      6,
      18694,
      8,
      18695,
      6,
      18696,
      9,
      18697,
      9,
      18706,
      8,
      18710,
      8,
      18725,
      6,
      18727,
      6,
      131128,
      0,
      131129,
      0,
      131130,
      0,
      131131,
      0,
      131132,
      0,
      131133,
      0,
      131134,
      0,
      131135,
      0,
      131352,
      7,
      131354,
      7,
      131384,
      7,
      131386,
      7,
      133161,
      5,
      133165,
      5,
      133177,
      5,
      133181,
      5,
      133376,
      9,
      133377,
      9,
      133384,
      9,
      133385,
      9,
      133400,
      7,
      133402,
      7,
      133417,
      5,
      133421,
      5,
      133432,
      7,
      133433,
      5,
      133434,
      7,
      133437,
      5,
      147510,
      4,
      147511,
      4,
      147518,
      4,
      147519,
      4,
      147714,
      8,
      147718,
      8,
      147730,
      8,
      147734,
      8,
      147736,
      7,
      147738,
      7,
      147766,
      4,
      147767,
      4,
      147768,
      7,
      147770,
      7,
      147774,
      4,
      147775,
      4,
      149509,
      6,
      149511,
      6,
      149541,
      6,
      149543,
      6,
      149545,
      5,
      149549,
      5,
      149558,
      4,
      149559,
      4,
      149561,
      5,
      149565,
      5,
      149566,
      4,
      149567,
      4,
      149760,
      9,
      149761,
      9,
      149762,
      8,
      149765,
      6,
      149766,
      8,
      149767,
      6,
      149768,
      9,
      149769,
      9,
      149778,
      8,
      149782,
      8,
      149784,
      7,
      149786,
      7,
      149797,
      6,
      149799,
      6,
      149801,
      5,
      149805,
      5,
      149814,
      4,
      149815,
      4,
      149816,
      7,
      149817,
      5,
      149818,
      7,
      149821,
      5,
      149822,
      4,
      149823,
      4,
      149824,
      37,
      149825,
      37,
      149826,
      36,
      149829,
      34,
      149830,
      36,
      149831,
      34,
      149832,
      37,
      149833,
      37,
      149842,
      36,
      149846,
      36,
      149848,
      35,
      149850,
      35,
      149861,
      34,
      149863,
      34,
      149865,
      33,
      149869,
      33,
      149878,
      32,
      149879,
      32,
      149880,
      35,
      149881,
      33,
      149882,
      35,
      149885,
      33,
      149886,
      32,
      149887,
      32,
      150080,
      49,
      150082,
      48,
      150088,
      49,
      150098,
      48,
      150104,
      47,
      150106,
      47,
      151873,
      46,
      151877,
      45,
      151881,
      46,
      151909,
      45,
      151913,
      44,
      151917,
      44,
      152128,
      49,
      152129,
      46,
      152136,
      49,
      152137,
      46,
      166214,
      43,
      166215,
      42,
      166230,
      43,
      166247,
      42,
      166262,
      41,
      166263,
      41,
      166466,
      48,
      166470,
      43,
      166482,
      48,
      166486,
      43,
      168261,
      45,
      168263,
      42,
      168293,
      45,
      168295,
      42,
      168512,
      31,
      168513,
      28,
      168514,
      31,
      168517,
      28,
      168518,
      25,
      168519,
      25,
      280952,
      40,
      280953,
      39,
      280954,
      40,
      280957,
      39,
      280958,
      38,
      280959,
      38,
      281176,
      47,
      281178,
      47,
      281208,
      40,
      281210,
      40,
      282985,
      44,
      282989,
      44,
      283001,
      39,
      283005,
      39,
      283208,
      30,
      283209,
      27,
      283224,
      30,
      283241,
      27,
      283256,
      22,
      283257,
      22,
      297334,
      41,
      297335,
      41,
      297342,
      38,
      297343,
      38,
      297554,
      29,
      297558,
      24,
      297562,
      29,
      297590,
      24,
      297594,
      21,
      297598,
      21,
      299365,
      26,
      299367,
      23,
      299373,
      26,
      299383,
      23,
      299389,
      20,
      299391,
      20,
      299584,
      31,
      299585,
      28,
      299586,
      31,
      299589,
      28,
      299590,
      25,
      299591,
      25,
      299592,
      30,
      299593,
      27,
      299602,
      29,
      299606,
      24,
      299608,
      30,
      299610,
      29,
      299621,
      26,
      299623,
      23,
      299625,
      27,
      299629,
      26,
      299638,
      24,
      299639,
      23,
      299640,
      22,
      299641,
      22,
      299642,
      21,
      299645,
      20,
      299646,
      21,
      299647,
      20,
      299648,
      61,
      299649,
      60,
      299650,
      61,
      299653,
      60,
      299654,
      59,
      299655,
      59,
      299656,
      58,
      299657,
      57,
      299666,
      55,
      299670,
      54,
      299672,
      58,
      299674,
      55,
      299685,
      52,
      299687,
      51,
      299689,
      57,
      299693,
      52,
      299702,
      54,
      299703,
      51,
      299704,
      56,
      299705,
      56,
      299706,
      53,
      299709,
      50,
      299710,
      53,
      299711,
      50,
      299904,
      61,
      299906,
      61,
      299912,
      58,
      299922,
      55,
      299928,
      58,
      299930,
      55,
      301697,
      60,
      301701,
      60,
      301705,
      57,
      301733,
      52,
      301737,
      57,
      301741,
      52,
      301952,
      79,
      301953,
      79,
      301960,
      76,
      301961,
      76,
      316038,
      59,
      316039,
      59,
      316054,
      54,
      316071,
      51,
      316086,
      54,
      316087,
      51,
      316290,
      78,
      316294,
      78,
      316306,
      73,
      316310,
      73,
      318085,
      77,
      318087,
      77,
      318117,
      70,
      318119,
      70,
      318336,
      79,
      318337,
      79,
      318338,
      78,
      318341,
      77,
      318342,
      78,
      318343,
      77,
      430776,
      56,
      430777,
      56,
      430778,
      53,
      430781,
      50,
      430782,
      53,
      430783,
      50,
      431e3,
      75,
      431002,
      72,
      431032,
      75,
      431034,
      72,
      432809,
      74,
      432813,
      69,
      432825,
      74,
      432829,
      69,
      433032,
      76,
      433033,
      76,
      433048,
      75,
      433065,
      74,
      433080,
      75,
      433081,
      74,
      447158,
      71,
      447159,
      68,
      447166,
      71,
      447167,
      68,
      447378,
      73,
      447382,
      73,
      447386,
      72,
      447414,
      71,
      447418,
      72,
      447422,
      71,
      449189,
      70,
      449191,
      70,
      449197,
      69,
      449207,
      68,
      449213,
      69,
      449215,
      68,
      449408,
      67,
      449409,
      67,
      449410,
      66,
      449413,
      64,
      449414,
      66,
      449415,
      64,
      449416,
      67,
      449417,
      67,
      449426,
      66,
      449430,
      66,
      449432,
      65,
      449434,
      65,
      449445,
      64,
      449447,
      64,
      449449,
      63,
      449453,
      63,
      449462,
      62,
      449463,
      62,
      449464,
      65,
      449465,
      63,
      449466,
      65,
      449469,
      63,
      449470,
      62,
      449471,
      62,
      449472,
      19,
      449473,
      19,
      449474,
      18,
      449477,
      16,
      449478,
      18,
      449479,
      16,
      449480,
      19,
      449481,
      19,
      449490,
      18,
      449494,
      18,
      449496,
      17,
      449498,
      17,
      449509,
      16,
      449511,
      16,
      449513,
      15,
      449517,
      15,
      449526,
      14,
      449527,
      14,
      449528,
      17,
      449529,
      15,
      449530,
      17,
      449533,
      15,
      449534,
      14,
      449535,
      14,
      449728,
      19,
      449729,
      19,
      449730,
      18,
      449734,
      18,
      449736,
      19,
      449737,
      19,
      449746,
      18,
      449750,
      18,
      449752,
      17,
      449754,
      17,
      449784,
      17,
      449786,
      17,
      451520,
      19,
      451521,
      19,
      451525,
      16,
      451527,
      16,
      451528,
      19,
      451529,
      19,
      451557,
      16,
      451559,
      16,
      451561,
      15,
      451565,
      15,
      451577,
      15,
      451581,
      15,
      451776,
      19,
      451777,
      19,
      451784,
      19,
      451785,
      19,
      465858,
      18,
      465861,
      16,
      465862,
      18,
      465863,
      16,
      465874,
      18,
      465878,
      18,
      465893,
      16,
      465895,
      16,
      465910,
      14,
      465911,
      14,
      465918,
      14,
      465919,
      14,
      466114,
      18,
      466118,
      18,
      466130,
      18,
      466134,
      18,
      467909,
      16,
      467911,
      16,
      467941,
      16,
      467943,
      16,
      468160,
      13,
      468161,
      13,
      468162,
      13,
      468163,
      13,
      468164,
      13,
      468165,
      13,
      468166,
      13,
      468167,
      13,
      580568,
      17,
      580570,
      17,
      580585,
      15,
      580589,
      15,
      580598,
      14,
      580599,
      14,
      580600,
      17,
      580601,
      15,
      580602,
      17,
      580605,
      15,
      580606,
      14,
      580607,
      14,
      580824,
      17,
      580826,
      17,
      580856,
      17,
      580858,
      17,
      582633,
      15,
      582637,
      15,
      582649,
      15,
      582653,
      15,
      582856,
      12,
      582857,
      12,
      582872,
      12,
      582873,
      12,
      582888,
      12,
      582889,
      12,
      582904,
      12,
      582905,
      12,
      596982,
      14,
      596983,
      14,
      596990,
      14,
      596991,
      14,
      597202,
      11,
      597206,
      11,
      597210,
      11,
      597214,
      11,
      597234,
      11,
      597238,
      11,
      597242,
      11,
      597246,
      11,
      599013,
      10,
      599015,
      10,
      599021,
      10,
      599023,
      10,
      599029,
      10,
      599031,
      10,
      599037,
      10,
      599039,
      10,
      599232,
      13,
      599233,
      13,
      599234,
      13,
      599235,
      13,
      599236,
      13,
      599237,
      13,
      599238,
      13,
      599239,
      13,
      599240,
      12,
      599241,
      12,
      599250,
      11,
      599254,
      11,
      599256,
      12,
      599257,
      12,
      599258,
      11,
      599262,
      11,
      599269,
      10,
      599271,
      10,
      599272,
      12,
      599273,
      12,
      599277,
      10,
      599279,
      10,
      599282,
      11,
      599285,
      10,
      599286,
      11,
      599287,
      10,
      599288,
      12,
      599289,
      12,
      599290,
      11,
      599293,
      10,
      599294,
      11,
      599295,
      10
    ];
    this._p4D = [
      0,
      0,
      1,
      -1,
      0,
      0,
      0,
      1,
      0,
      -1,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      -1,
      1,
      0,
      0,
      0,
      0,
      1,
      -1,
      0,
      0,
      0,
      1,
      0,
      -1,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      -1,
      1,
      0,
      0,
      0,
      0,
      1,
      -1,
      0,
      0,
      -1,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      -1,
      1,
      0,
      2,
      1,
      1,
      0,
      0,
      1,
      1,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      0,
      2,
      1,
      0,
      1,
      0,
      1,
      1,
      -1,
      1,
      0,
      1,
      1,
      0,
      1,
      -1,
      0,
      2,
      0,
      1,
      1,
      0,
      1,
      -1,
      1,
      1,
      0,
      1,
      0,
      1,
      1,
      -1,
      0,
      2,
      1,
      0,
      0,
      1,
      1,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      1,
      0,
      2,
      0,
      1,
      0,
      1,
      1,
      -1,
      1,
      0,
      1,
      1,
      0,
      1,
      -1,
      1,
      0,
      2,
      0,
      0,
      1,
      1,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      1,
      1,
      1,
      4,
      2,
      1,
      1,
      0,
      4,
      1,
      2,
      1,
      0,
      4,
      1,
      1,
      2,
      0,
      1,
      4,
      2,
      1,
      0,
      1,
      4,
      1,
      2,
      0,
      1,
      4,
      1,
      1,
      0,
      2,
      1,
      4,
      2,
      0,
      1,
      1,
      4,
      1,
      0,
      2,
      1,
      4,
      1,
      0,
      1,
      2,
      1,
      4,
      0,
      2,
      1,
      1,
      4,
      0,
      1,
      2,
      1,
      4,
      0,
      1,
      1,
      2,
      1,
      2,
      1,
      1,
      0,
      0,
      3,
      2,
      1,
      0,
      0,
      3,
      1,
      2,
      0,
      0,
      1,
      2,
      1,
      0,
      1,
      0,
      3,
      2,
      0,
      1,
      0,
      3,
      1,
      0,
      2,
      0,
      1,
      2,
      0,
      1,
      1,
      0,
      3,
      0,
      2,
      1,
      0,
      3,
      0,
      1,
      2,
      0,
      1,
      2,
      1,
      0,
      0,
      1,
      3,
      2,
      0,
      0,
      1,
      3,
      1,
      0,
      0,
      2,
      1,
      2,
      0,
      1,
      0,
      1,
      3,
      0,
      2,
      0,
      1,
      3,
      0,
      1,
      0,
      2,
      1,
      2,
      0,
      0,
      1,
      1,
      3,
      0,
      0,
      2,
      1,
      3,
      0,
      0,
      1,
      2,
      2,
      3,
      1,
      1,
      1,
      0,
      2,
      1,
      1,
      1,
      -1,
      2,
      2,
      0,
      0,
      0,
      2,
      3,
      1,
      1,
      0,
      1,
      2,
      1,
      1,
      -1,
      1,
      2,
      2,
      0,
      0,
      0,
      2,
      3,
      1,
      0,
      1,
      1,
      2,
      1,
      -1,
      1,
      1,
      2,
      2,
      0,
      0,
      0,
      2,
      3,
      1,
      1,
      1,
      0,
      2,
      1,
      1,
      1,
      -1,
      2,
      0,
      2,
      0,
      0,
      2,
      3,
      1,
      1,
      0,
      1,
      2,
      1,
      1,
      -1,
      1,
      2,
      0,
      2,
      0,
      0,
      2,
      3,
      0,
      1,
      1,
      1,
      2,
      -1,
      1,
      1,
      1,
      2,
      0,
      2,
      0,
      0,
      2,
      3,
      1,
      1,
      1,
      0,
      2,
      1,
      1,
      1,
      -1,
      2,
      0,
      0,
      2,
      0,
      2,
      3,
      1,
      0,
      1,
      1,
      2,
      1,
      -1,
      1,
      1,
      2,
      0,
      0,
      2,
      0,
      2,
      3,
      0,
      1,
      1,
      1,
      2,
      -1,
      1,
      1,
      1,
      2,
      0,
      0,
      2,
      0,
      2,
      3,
      1,
      1,
      0,
      1,
      2,
      1,
      1,
      -1,
      1,
      2,
      0,
      0,
      0,
      2,
      2,
      3,
      1,
      0,
      1,
      1,
      2,
      1,
      -1,
      1,
      1,
      2,
      0,
      0,
      0,
      2,
      2,
      3,
      0,
      1,
      1,
      1,
      2,
      -1,
      1,
      1,
      1,
      2,
      0,
      0,
      0,
      2,
      2,
      1,
      1,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      0,
      0,
      0,
      0,
      0,
      2,
      1,
      1,
      -1,
      1,
      0,
      1,
      1,
      0,
      1,
      -1,
      0,
      0,
      0,
      0,
      0,
      2,
      1,
      -1,
      1,
      1,
      0,
      1,
      0,
      1,
      1,
      -1,
      0,
      0,
      0,
      0,
      0,
      2,
      1,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      1,
      0,
      0,
      0,
      0,
      0,
      2,
      1,
      -1,
      1,
      0,
      1,
      1,
      0,
      1,
      -1,
      1,
      0,
      0,
      0,
      0,
      0,
      2,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      2,
      1,
      1,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      2,
      2,
      0,
      0,
      0,
      2,
      1,
      1,
      -1,
      1,
      0,
      1,
      1,
      0,
      1,
      -1,
      2,
      2,
      0,
      0,
      0,
      2,
      1,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      1,
      2,
      2,
      0,
      0,
      0,
      2,
      1,
      1,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      2,
      0,
      2,
      0,
      0,
      2,
      1,
      -1,
      1,
      1,
      0,
      1,
      0,
      1,
      1,
      -1,
      2,
      0,
      2,
      0,
      0,
      2,
      1,
      -1,
      1,
      0,
      1,
      1,
      0,
      1,
      -1,
      1,
      2,
      0,
      2,
      0,
      0,
      2,
      1,
      1,
      -1,
      1,
      0,
      1,
      1,
      0,
      1,
      -1,
      2,
      0,
      0,
      2,
      0,
      2,
      1,
      -1,
      1,
      1,
      0,
      1,
      0,
      1,
      1,
      -1,
      2,
      0,
      0,
      2,
      0,
      2,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      1,
      1,
      2,
      0,
      0,
      2,
      0,
      2,
      1,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      1,
      2,
      0,
      0,
      0,
      2,
      2,
      1,
      -1,
      1,
      0,
      1,
      1,
      0,
      1,
      -1,
      1,
      2,
      0,
      0,
      0,
      2,
      2,
      1,
      -1,
      0,
      1,
      1,
      1,
      0,
      -1,
      1,
      1,
      2,
      0,
      0,
      0,
      2,
      3,
      1,
      1,
      0,
      0,
      0,
      2,
      2,
      0,
      0,
      0,
      2,
      1,
      1,
      1,
      -1,
      3,
      1,
      0,
      1,
      0,
      0,
      2,
      0,
      2,
      0,
      0,
      2,
      1,
      1,
      1,
      -1,
      3,
      1,
      0,
      0,
      1,
      0,
      2,
      0,
      0,
      2,
      0,
      2,
      1,
      1,
      1,
      -1,
      3,
      1,
      1,
      0,
      0,
      0,
      2,
      2,
      0,
      0,
      0,
      2,
      1,
      1,
      -1,
      1,
      3,
      1,
      0,
      1,
      0,
      0,
      2,
      0,
      2,
      0,
      0,
      2,
      1,
      1,
      -1,
      1,
      3,
      1,
      0,
      0,
      0,
      1,
      2,
      0,
      0,
      0,
      2,
      2,
      1,
      1,
      -1,
      1,
      3,
      1,
      1,
      0,
      0,
      0,
      2,
      2,
      0,
      0,
      0,
      2,
      1,
      -1,
      1,
      1,
      3,
      1,
      0,
      0,
      1,
      0,
      2,
      0,
      0,
      2,
      0,
      2,
      1,
      -1,
      1,
      1,
      3,
      1,
      0,
      0,
      0,
      1,
      2,
      0,
      0,
      0,
      2,
      2,
      1,
      -1,
      1,
      1,
      3,
      1,
      0,
      1,
      0,
      0,
      2,
      0,
      2,
      0,
      0,
      2,
      -1,
      1,
      1,
      1,
      3,
      1,
      0,
      0,
      1,
      0,
      2,
      0,
      0,
      2,
      0,
      2,
      -1,
      1,
      1,
      1,
      3,
      1,
      0,
      0,
      0,
      1,
      2,
      0,
      0,
      0,
      2,
      2,
      -1,
      1,
      1,
      1,
      3,
      3,
      2,
      1,
      0,
      0,
      3,
      1,
      2,
      0,
      0,
      4,
      1,
      1,
      1,
      1,
      3,
      3,
      2,
      0,
      1,
      0,
      3,
      1,
      0,
      2,
      0,
      4,
      1,
      1,
      1,
      1,
      3,
      3,
      0,
      2,
      1,
      0,
      3,
      0,
      1,
      2,
      0,
      4,
      1,
      1,
      1,
      1,
      3,
      3,
      2,
      0,
      0,
      1,
      3,
      1,
      0,
      0,
      2,
      4,
      1,
      1,
      1,
      1,
      3,
      3,
      0,
      2,
      0,
      1,
      3,
      0,
      1,
      0,
      2,
      4,
      1,
      1,
      1,
      1,
      3,
      3,
      0,
      0,
      2,
      1,
      3,
      0,
      0,
      1,
      2,
      4,
      1,
      1,
      1,
      1,
      3,
      3,
      2,
      1,
      0,
      0,
      3,
      1,
      2,
      0,
      0,
      2,
      1,
      1,
      1,
      -1,
      3,
      3,
      2,
      0,
      1,
      0,
      3,
      1,
      0,
      2,
      0,
      2,
      1,
      1,
      1,
      -1,
      3,
      3,
      0,
      2,
      1,
      0,
      3,
      0,
      1,
      2,
      0,
      2,
      1,
      1,
      1,
      -1,
      3,
      3,
      2,
      1,
      0,
      0,
      3,
      1,
      2,
      0,
      0,
      2,
      1,
      1,
      -1,
      1,
      3,
      3,
      2,
      0,
      0,
      1,
      3,
      1,
      0,
      0,
      2,
      2,
      1,
      1,
      -1,
      1,
      3,
      3,
      0,
      2,
      0,
      1,
      3,
      0,
      1,
      0,
      2,
      2,
      1,
      1,
      -1,
      1,
      3,
      3,
      2,
      0,
      1,
      0,
      3,
      1,
      0,
      2,
      0,
      2,
      1,
      -1,
      1,
      1,
      3,
      3,
      2,
      0,
      0,
      1,
      3,
      1,
      0,
      0,
      2,
      2,
      1,
      -1,
      1,
      1,
      3,
      3,
      0,
      0,
      2,
      1,
      3,
      0,
      0,
      1,
      2,
      2,
      1,
      -1,
      1,
      1,
      3,
      3,
      0,
      2,
      1,
      0,
      3,
      0,
      1,
      2,
      0,
      2,
      -1,
      1,
      1,
      1,
      3,
      3,
      0,
      2,
      0,
      1,
      3,
      0,
      1,
      0,
      2,
      2,
      -1,
      1,
      1,
      1,
      3,
      3,
      0,
      0,
      2,
      1,
      3,
      0,
      0,
      1,
      2,
      2,
      -1,
      1,
      1,
      1
    ];
  }
  noise(x, y, z, w) {
    const { _perm, _perm4D, _lookup, _STRETCH_4D, _SQUISH_4D, _gradients4D, _NORM_4D } = this;
    const stretchOffset = (x + y + z + w) * _STRETCH_4D, xs = x + stretchOffset, ys = y + stretchOffset, zs = z + stretchOffset, ws = w + stretchOffset, xsb = Math.floor(xs), ysb = Math.floor(ys), zsb = Math.floor(zs), wsb = Math.floor(ws), squishOffset = (xsb + ysb + zsb + wsb) * _SQUISH_4D, dx0 = x - (xsb + squishOffset), dy0 = y - (ysb + squishOffset), dz0 = z - (zsb + squishOffset), dw0 = w - (wsb + squishOffset), xins = xs - xsb, yins = ys - ysb, zins = zs - zsb, wins = ws - wsb, inSum = xins + yins + zins + wins, hash = zins - wins + 1 | yins - zins + 1 << 1 | yins - wins + 1 << 2 | xins - yins + 1 << 3 | xins - zins + 1 << 4 | xins - wins + 1 << 5 | inSum << 6 | inSum + wins << 8 | inSum + zins << 11 | inSum + yins << 14 | inSum + xins << 17;
    let value = 0;
    for (let c = _lookup[hash]; c !== void 0; c = c.next) {
      const dx = dx0 + c.dx, dy = dy0 + c.dy, dz = dz0 + c.dz, dw = dw0 + c.dw, attn = 2 - dx * dx - dy * dy - dz * dz - dw * dw;
      if (attn > 0) {
        const px = xsb + c.xsb, py = ysb + c.ysb, pz = zsb + c.zsb, pw = wsb + c.wsb, indexPartA = _perm[px & 255], indexPartB = _perm[indexPartA + py & 255], indexPartC = _perm[indexPartB + pz & 255], index = _perm4D[indexPartC + pw & 255], valuePart = _gradients4D[index] * dx + _gradients4D[index + 1] * dy + _gradients4D[index + 2] * dz + _gradients4D[index + 3] * dw;
        value += attn * attn * attn * attn * valuePart;
      }
    }
    return value * _NORM_4D;
  }
  seed(clientSeed) {
    const { _p4D, _base4D, _lookupPairs4D } = this;
    const contributions = [];
    for (let i = 0; i < _p4D.length; i += 16) {
      const baseSet = _base4D[_p4D[i]];
      let previous = null, current = null;
      for (let k = 0; k < baseSet.length; k += 5) {
        current = this._contribution4D(baseSet[k], baseSet[k + 1], baseSet[k + 2], baseSet[k + 3], baseSet[k + 4]);
        if (previous === null) {
          contributions[i / 16] = current;
        } else {
          previous.next = current;
        }
        previous = current;
      }
      if (current) {
        current.next = this._contribution4D(_p4D[i + 1], _p4D[i + 2], _p4D[i + 3], _p4D[i + 4], _p4D[i + 5]);
        current.next.next = this._contribution4D(_p4D[i + 6], _p4D[i + 7], _p4D[i + 8], _p4D[i + 9], _p4D[i + 10]);
        current.next.next.next = this._contribution4D(_p4D[i + 11], _p4D[i + 12], _p4D[i + 13], _p4D[i + 14], _p4D[i + 15]);
      }
    }
    this._lookup = [];
    for (let i = 0; i < _lookupPairs4D.length; i += 2) {
      this._lookup[_lookupPairs4D[i]] = contributions[_lookupPairs4D[i + 1]];
    }
    this._perm = new Uint8Array(256);
    this._perm4D = new Uint8Array(256);
    const source = new Uint8Array(256);
    for (let i = 0; i < 256; i++) {
      source[i] = i;
    }
    let seed = new Uint32Array(1);
    seed[0] = clientSeed;
    seed = shuffleSeed(shuffleSeed(shuffleSeed(seed)));
    for (let i = 255; i >= 0; i--) {
      seed = shuffleSeed(seed);
      const r = new Uint32Array(1);
      r[0] = (seed[0] + 31) % (i + 1);
      if (r[0] < 0) {
        r[0] += i + 1;
      }
      this._perm[i] = source[r[0]];
      this._perm4D[i] = this._perm[i] & 252;
      source[r[0]] = source[i];
    }
  }
  _contribution4D(multiplier, xsb, ysb, zsb, wsb) {
    const { _SQUISH_4D } = this;
    return {
      dx: -xsb - multiplier * _SQUISH_4D,
      dy: -ysb - multiplier * _SQUISH_4D,
      dz: -zsb - multiplier * _SQUISH_4D,
      dw: -wsb - multiplier * _SQUISH_4D,
      xsb,
      ysb,
      zsb,
      wsb
    };
  }
};

// node_modules/@tsparticles/simplex-noise/browser/SimplexNoise.js
var SimplexNoise = class {
  constructor() {
    this.noise2d = new SimplexNoise2D();
    this.noise3d = new SimplexNoise3D();
    this.noise4d = new SimplexNoise4D();
  }
};

// node_modules/@tsparticles/path-curl-noise/browser/CurlNoiseGenerator.js
var defaultOptions = {
  speed: 0.2,
  step: 250
};
var double4 = 2;
var CurlNoiseGenerator = class {
  constructor() {
    const simplex = new SimplexNoise();
    this._simplex = simplex.noise2d;
    this.options = deepExtend({}, defaultOptions);
  }
  generate(particle) {
    const pos = particle.getPosition(), { speed, step } = this.options, x = pos.x / step, y = pos.y / step, eps = 1e-3, n1a = this._simplex.noise(x, y + eps), n2a = this._simplex.noise(x, y - eps), a = (n1a - n2a) / (double4 * eps), n1b = this._simplex.noise(x + eps, y), n2b = this._simplex.noise(x - eps, y), b = (n1b - n2b) / (double4 * eps);
    particle.velocity.x = 0;
    particle.velocity.y = 0;
    return Vector.create(speed * a, speed * -b);
  }
  init(container) {
    const sourceOptions = container.actualOptions.particles.move.path.options;
    this.options.seed = sourceOptions == null ? void 0 : sourceOptions.seed;
    this.options.speed = ((sourceOptions == null ? void 0 : sourceOptions.speed) ?? defaultOptions.speed) * container.retina.pixelRatio;
    this.options.step = (sourceOptions == null ? void 0 : sourceOptions.step) ?? defaultOptions.step;
    this._simplex.seed(this.options.seed ?? getRandom());
  }
  reset() {
  }
  update() {
  }
};

// node_modules/@tsparticles/path-curl-noise/browser/index.js
var curlNoisePathName = "curlNoise";
async function loadCurlNoisePath(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPathGenerator(curlNoisePathName, new CurlNoiseGenerator(), refresh);
}

// node_modules/@tsparticles/path-curves/browser/Curves.js
function CurvesPathGen(rndFunc, period, nbHarmonics, attenHarmonics, lowValue = 0, highValue = 1) {
  const arP0 = [], arP1 = [], amplitudes = [], increments = [], phases = [], randomFunc = rndFunc ?? getRandom;
  let globAmplitude = 0;
  if (nbHarmonics < 1)
    nbHarmonics = 1;
  for (let kh = 1; kh <= nbHarmonics; ++kh) {
    arP0[kh] = randomFunc();
    arP1[kh] = randomFunc();
    amplitudes[kh] = kh === 1 ? 1 : amplitudes[kh - 1] * attenHarmonics;
    globAmplitude += amplitudes[kh];
    increments[kh] = kh / period;
    phases[kh] = randomFunc();
  }
  amplitudes.forEach((value, kh) => amplitudes[kh] = value / globAmplitude * (highValue - lowValue));
  return () => {
    let pf, pfl, signal = 0;
    for (let kh = nbHarmonics; kh >= 1; --kh) {
      pf = phases[kh] += increments[kh];
      if (phases[kh] >= 1) {
        pf = phases[kh] -= 1;
        arP0[kh] = arP1[kh];
        arP1[kh] = randomFunc();
      }
      pfl = pf ** 2 * (3 - 2 * pf);
      signal += (arP0[kh] * (1 - pfl) + arP1[kh] * pfl) * amplitudes[kh];
    }
    return signal + lowValue;
  };
}

// node_modules/@tsparticles/path-curves/browser/CurvesPathGenerator.js
var double5 = 2;
var doublePI3 = Math.PI * double5;
function randomVelocity() {
  const offset = 0.8, factor = 0.6;
  return getRandom() * factor + offset;
}
var CurvesPathGenerator = class {
  constructor() {
    this.options = {
      rndFunc: null,
      period: 100,
      nbHarmonics: 2,
      attenHarmonics: 0.8,
      lowValue: -0.03,
      highValue: 0.03
    };
  }
  generate(p) {
    if (!p.pathGen) {
      const options = this.options;
      p.pathGen = CurvesPathGen(options.rndFunc, options.period, options.nbHarmonics, options.attenHarmonics, options.lowValue, options.highValue);
    }
    if (!p.curveVelocity) {
      p.curveVelocity = Vector.origin;
      p.curveVelocity.length = randomVelocity();
      p.curveVelocity.angle = getRandom() * doublePI3;
    } else {
      p.curveVelocity.length += 0.01;
      p.curveVelocity.angle = (p.curveVelocity.angle + p.pathGen()) % doublePI3;
    }
    p.velocity.x = 0;
    p.velocity.y = 0;
    return p.curveVelocity;
  }
  init(container) {
    const sourceOptions = container.actualOptions.particles.move.path.options, { options } = this;
    if (isFunction(sourceOptions.rndFunc)) {
      options.rndFunc = sourceOptions.rndFunc;
    } else if (isString(sourceOptions.rndFunc)) {
      options.rndFunc = window[sourceOptions.rndFunc] ?? this.options.rndFunc;
    }
    options.period = sourceOptions.period ?? options.period;
    options.nbHarmonics = sourceOptions.nbHarmonics ?? options.nbHarmonics;
    options.attenHarmonics = sourceOptions.attenHarmonics ?? options.attenHarmonics;
    options.lowValue = sourceOptions.lowValue ?? options.lowValue;
    options.highValue = sourceOptions.highValue ?? options.highValue;
  }
  reset(particle) {
    delete particle.pathGen;
    delete particle.curveVelocity;
  }
  update() {
  }
};

// node_modules/@tsparticles/path-curves/browser/index.js
var curvesPathName = "curvesPathGenerator";
async function loadCurvesPath(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPathGenerator(curvesPathName, new CurvesPathGenerator(), refresh);
}

// node_modules/@tsparticles/plugin-easing-back/browser/index.js
async function loadEasingBackPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEasing(EasingType.easeInBack, (value) => {
    const c1 = 1.70158, c3 = c1 + 1;
    return c3 * value ** 3 - c1 * value ** 2;
  }, false);
  await engine.addEasing(EasingType.easeOutBack, (value) => {
    const c1 = 1.70158, c3 = c1 + 1;
    return 1 + c3 * Math.pow(value - 1, 3) + c1 * Math.pow(value - 1, 2);
  }, false);
  await engine.addEasing(EasingType.easeInOutBack, (value) => {
    const c1 = 1.70158, c2 = c1 * 1.525;
    return value < 0.5 ? (2 * value) ** 2 * ((c2 + 1) * 2 * value - c2) / 2 : ((2 * value - 2) ** 2 * ((c2 + 1) * (value * 2 - 2) + c2) + 2) / 2;
  }, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-easing-circ/browser/index.js
async function loadEasingCircPlugin(engine, refresh) {
  engine.checkVersion("3.8.1");
  await engine.addEasing(EasingType.easeInCirc, (value) => 1 - Math.sqrt(1 - value ** 2), false);
  await engine.addEasing(EasingType.easeOutCirc, (value) => Math.sqrt(1 - (value - 1) ** 2), false);
  await engine.addEasing(EasingType.easeInOutCirc, (value) => value < 0.5 ? (1 - Math.sqrt(1 - (2 * value) ** 2)) / 2 : (Math.sqrt(1 - (-2 * value + 2) ** 2) + 1) / 2, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-easing-cubic/browser/index.js
async function loadEasingCubicPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEasing(EasingType.easeInCubic, (value) => value ** 3, false);
  await engine.addEasing(EasingType.easeOutCubic, (value) => 1 - (1 - value) ** 3, false);
  await engine.addEasing(EasingType.easeInOutCubic, (value) => value < 0.5 ? 4 * value ** 3 : 1 - (-2 * value + 2) ** 3 / 2, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-easing-expo/browser/index.js
async function loadEasingExpoPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEasing(EasingType.easeInExpo, (value) => !value ? 0 : 2 ** (10 * value - 10), false);
  await engine.addEasing(EasingType.easeOutExpo, (value) => value === 1 ? 1 : 1 - Math.pow(2, -10 * value), false);
  await engine.addEasing(EasingType.easeInOutExpo, (value) => {
    if (value === 1) {
      return !value ? 0 : 1;
    } else if (!value) {
      return 0;
    } else {
      return value < 0.5 ? 2 ** (20 * value - 10) / 2 : (2 - 2 ** (-20 * value + 10)) / 2;
    }
  }, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-easing-linear/browser/index.js
async function loadEasingLinearPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEasing(EasingType.easeInLinear, (value) => {
    return value;
  }, false);
  await engine.addEasing(EasingType.easeOutLinear, (value) => {
    return value;
  }, false);
  await engine.addEasing(EasingType.easeInOutLinear, (value) => {
    return value;
  }, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-easing-quart/browser/index.js
async function loadEasingQuartPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEasing(EasingType.easeInQuart, (value) => value ** 4, false);
  await engine.addEasing(EasingType.easeOutQuart, (value) => 1 - (1 - value) ** 4, false);
  await engine.addEasing(EasingType.easeInOutQuart, (value) => value < 0.5 ? 8 * value ** 4 : 1 - (-2 * value + 2) ** 4 / 2, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-easing-quint/browser/index.js
async function loadEasingQuintPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEasing(EasingType.easeInQuint, (value) => value ** 5, false);
  await engine.addEasing(EasingType.easeOutQuint, (value) => 1 - (1 - value) ** 5, false);
  await engine.addEasing(EasingType.easeInOutQuint, (value) => value < 0.5 ? 16 * value ** 5 : 1 - (-2 * value + 2) ** 5 / 2, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-easing-sine/browser/index.js
async function loadEasingSinePlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEasing(EasingType.easeInSine, (value) => 1 - Math.cos(value * Math.PI / 2), false);
  await engine.addEasing(EasingType.easeOutSine, (value) => Math.sin(value * Math.PI / 2), false);
  await engine.addEasing(EasingType.easeInOutSine, (value) => -(Math.cos(Math.PI * value) - 1) / 2, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterLife.js
var EmitterLife = class {
  constructor() {
    this.wait = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.count !== void 0) {
      this.count = data.count;
    }
    if (data.delay !== void 0) {
      this.delay = setRangeValue(data.delay);
    }
    if (data.duration !== void 0) {
      this.duration = setRangeValue(data.duration);
    }
    if (data.wait !== void 0) {
      this.wait = data.wait;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterRate.js
var EmitterRate = class {
  constructor() {
    this.quantity = 1;
    this.delay = 0.1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.quantity !== void 0) {
      this.quantity = setRangeValue(data.quantity);
    }
    if (data.delay !== void 0) {
      this.delay = setRangeValue(data.delay);
    }
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShapeReplace.js
var EmitterShapeReplace = class {
  constructor() {
    this.color = false;
    this.opacity = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.color !== void 0) {
      this.color = data.color;
    }
    if (data.opacity !== void 0) {
      this.opacity = data.opacity;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShape.js
var EmitterShape = class {
  constructor() {
    this.options = {};
    this.replace = new EmitterShapeReplace();
    this.type = "square";
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.options !== void 0) {
      this.options = deepExtend({}, data.options ?? {});
    }
    this.replace.load(data.replace);
    if (data.type !== void 0) {
      this.type = data.type;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterSize.js
var EmitterSize = class {
  constructor() {
    this.mode = PixelMode.percent;
    this.height = 0;
    this.width = 0;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.mode !== void 0) {
      this.mode = data.mode;
    }
    if (data.height !== void 0) {
      this.height = data.height;
    }
    if (data.width !== void 0) {
      this.width = data.width;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js
var Emitter = class {
  constructor() {
    this.autoPlay = true;
    this.fill = true;
    this.life = new EmitterLife();
    this.rate = new EmitterRate();
    this.shape = new EmitterShape();
    this.startCount = 0;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.autoPlay !== void 0) {
      this.autoPlay = data.autoPlay;
    }
    if (data.size !== void 0) {
      if (!this.size) {
        this.size = new EmitterSize();
      }
      this.size.load(data.size);
    }
    if (data.direction !== void 0) {
      this.direction = data.direction;
    }
    this.domId = data.domId;
    if (data.fill !== void 0) {
      this.fill = data.fill;
    }
    this.life.load(data.life);
    this.name = data.name;
    this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {
      return deepExtend({}, particles);
    });
    this.rate.load(data.rate);
    this.shape.load(data.shape);
    if (data.position !== void 0) {
      this.position = {};
      if (data.position.x !== void 0) {
        this.position.x = setRangeValue(data.position.x);
      }
      if (data.position.y !== void 0) {
        this.position.y = setRangeValue(data.position.y);
      }
    }
    if (data.spawnColor !== void 0) {
      if (this.spawnColor === void 0) {
        this.spawnColor = new AnimatableColor();
      }
      this.spawnColor.load(data.spawnColor);
    }
    if (data.startCount !== void 0) {
      this.startCount = data.startCount;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/Enums/EmitterClickMode.js
var EmitterClickMode;
(function(EmitterClickMode2) {
  EmitterClickMode2["emitter"] = "emitter";
})(EmitterClickMode || (EmitterClickMode = {}));

// node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js
var half4 = 0.5;
var defaultLifeDelay = 0;
var minLifeCount = 0;
var defaultSpawnDelay = 0;
var defaultEmitDelay = 0;
var defaultLifeCount = -1;
var defaultColorAnimationFactor = 1;
function setParticlesOptionsColor(particlesOptions, color) {
  if (particlesOptions.color) {
    particlesOptions.color.value = color;
  } else {
    particlesOptions.color = {
      value: color
    };
  }
}
var EmitterInstance = class {
  constructor(engine, emitters, container, options, position) {
    var _a, _b;
    this.emitters = emitters;
    this.container = container;
    this._destroy = () => {
      var _a2, _b2;
      (_a2 = this._mutationObserver) == null ? void 0 : _a2.disconnect();
      this._mutationObserver = void 0;
      (_b2 = this._resizeObserver) == null ? void 0 : _b2.disconnect();
      this._resizeObserver = void 0;
      this.emitters.removeEmitter(this);
      this._engine.dispatchEvent("emitterDestroyed", {
        container: this.container,
        data: {
          emitter: this
        }
      });
    };
    this._prepareToDie = () => {
      var _a2;
      if (this._paused) {
        return;
      }
      const duration = ((_a2 = this.options.life) == null ? void 0 : _a2.duration) !== void 0 ? getRangeValue(this.options.life.duration) : void 0, minDuration2 = 0, minLifeCount2 = 0;
      if (this.container.retina.reduceFactor && (this._lifeCount > minLifeCount2 || this._immortal) && duration !== void 0 && duration > minDuration2) {
        this._duration = duration * millisecondsToSeconds;
      }
    };
    this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {
      const container2 = this.container;
      if (!animation.enable) {
        return initValue;
      }
      const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = delay * millisecondsToSeconds / container2.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);
      return (initValue + colorSpeed * container2.fpsLimit / emitFactor + colorOffset * factor) % maxValue;
    };
    this._engine = engine;
    this._currentDuration = 0;
    this._currentEmitDelay = 0;
    this._currentSpawnDelay = 0;
    this._initialPosition = position;
    if (options instanceof Emitter) {
      this.options = options;
    } else {
      this.options = new Emitter();
      this.options.load(options);
    }
    this._spawnDelay = getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds / this.container.retina.reduceFactor;
    this.position = this._initialPosition ?? this._calcPosition();
    this.name = this.options.name;
    this.fill = this.options.fill;
    this._firstSpawn = !this.options.life.wait;
    this._startParticlesAdded = false;
    let particlesOptions = deepExtend({}, this.options.particles);
    particlesOptions ?? (particlesOptions = {});
    particlesOptions.move ?? (particlesOptions.move = {});
    (_a = particlesOptions.move).direction ?? (_a.direction = this.options.direction);
    if (this.options.spawnColor) {
      this.spawnColor = rangeColorToHsl(this._engine, this.options.spawnColor);
    }
    this._paused = !this.options.autoPlay;
    this._particlesOptions = particlesOptions;
    this._size = this._calcSize();
    this.size = getSize(this._size, this.container.canvas.size);
    this._lifeCount = this.options.life.count ?? defaultLifeCount;
    this._immortal = this._lifeCount <= minLifeCount;
    if (this.options.domId) {
      const element = document.getElementById(this.options.domId);
      if (element) {
        this._mutationObserver = new MutationObserver(() => {
          this.resize();
        });
        this._resizeObserver = new ResizeObserver(() => {
          this.resize();
        });
        this._mutationObserver.observe(element, {
          attributes: true,
          attributeFilter: ["style", "width", "height"]
        });
        this._resizeObserver.observe(element);
      }
    }
    const shapeOptions = this.options.shape, shapeGenerator = (_b = this._engine.emitterShapeManager) == null ? void 0 : _b.getShapeGenerator(shapeOptions.type);
    if (shapeGenerator) {
      this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);
    }
    this._engine.dispatchEvent("emitterCreated", {
      container,
      data: {
        emitter: this
      }
    });
    this.play();
  }
  externalPause() {
    this._paused = true;
    this.pause();
  }
  externalPlay() {
    this._paused = false;
    this.play();
  }
  async init() {
    var _a;
    await ((_a = this._shape) == null ? void 0 : _a.init());
  }
  pause() {
    if (this._paused) {
      return;
    }
    delete this._emitDelay;
  }
  play() {
    if (this._paused) {
      return;
    }
    if (!(this.container.retina.reduceFactor && (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) && (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {
      return;
    }
    if (this._emitDelay === void 0) {
      const delay = getRangeValue(this.options.rate.delay);
      this._emitDelay = delay * millisecondsToSeconds / this.container.retina.reduceFactor;
    }
    if (this._lifeCount > minLifeCount || this._immortal) {
      this._prepareToDie();
    }
  }
  resize() {
    var _a;
    const initialPosition = this._initialPosition;
    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();
    this._size = this._calcSize();
    this.size = getSize(this._size, this.container.canvas.size);
    (_a = this._shape) == null ? void 0 : _a.resize(this.position, this.size);
  }
  update(delta) {
    var _a;
    if (this._paused) {
      return;
    }
    if (this._firstSpawn) {
      this._firstSpawn = false;
      this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;
      this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;
    }
    if (!this._startParticlesAdded) {
      this._startParticlesAdded = true;
      this._emitParticles(this.options.startCount);
    }
    if (this._duration !== void 0) {
      this._currentDuration += delta.value;
      if (this._currentDuration >= this._duration) {
        this.pause();
        if (this._spawnDelay !== void 0) {
          delete this._spawnDelay;
        }
        if (!this._immortal) {
          this._lifeCount--;
        }
        if (this._lifeCount > minLifeCount || this._immortal) {
          this.position = this._calcPosition();
          (_a = this._shape) == null ? void 0 : _a.resize(this.position, this.size);
          this._spawnDelay = getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds / this.container.retina.reduceFactor;
        } else {
          this._destroy();
        }
        this._currentDuration -= this._duration;
        delete this._duration;
      }
    }
    if (this._spawnDelay !== void 0) {
      this._currentSpawnDelay += delta.value;
      if (this._currentSpawnDelay >= this._spawnDelay) {
        this._engine.dispatchEvent("emitterPlay", {
          container: this.container
        });
        this.play();
        this._currentSpawnDelay -= this._currentSpawnDelay;
        delete this._spawnDelay;
      }
    }
    if (this._emitDelay !== void 0) {
      this._currentEmitDelay += delta.value;
      if (this._currentEmitDelay >= this._emitDelay) {
        this._emit();
        this._currentEmitDelay -= this._emitDelay;
      }
    }
  }
  _calcPosition() {
    if (this.options.domId) {
      const element = document.getElementById(this.options.domId);
      if (element) {
        const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;
        return {
          x: (elRect.x + elRect.width * half4) * pxRatio,
          y: (elRect.y + elRect.height * half4) * pxRatio
        };
      }
    }
    return calcPositionOrRandomFromSizeRanged({
      size: this.container.canvas.size,
      position: this.options.position
    });
  }
  _calcSize() {
    const container = this.container;
    if (this.options.domId) {
      const element = document.getElementById(this.options.domId);
      if (element) {
        const elRect = element.getBoundingClientRect();
        return {
          width: elRect.width * container.retina.pixelRatio,
          height: elRect.height * container.retina.pixelRatio,
          mode: PixelMode.precise
        };
      }
    }
    return this.options.size ?? (() => {
      const size = new EmitterSize();
      size.load({
        height: 0,
        mode: PixelMode.percent,
        width: 0
      });
      return size;
    })();
  }
  _emit() {
    if (this._paused) {
      return;
    }
    const quantity = getRangeValue(this.options.rate.quantity);
    this._emitParticles(quantity);
  }
  _emitParticles(quantity) {
    var _a;
    const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);
    for (let i = 0; i < quantity; i++) {
      const particlesOptions = deepExtend({}, singleParticlesOptions);
      if (this.spawnColor) {
        const hslAnimation = (_a = this.options.spawnColor) == null ? void 0 : _a.animation;
        if (hslAnimation) {
          const maxValues = {
            h: 360,
            s: 100,
            l: 100
          }, colorFactor = 3.6;
          this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);
          this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);
          this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);
        }
        setParticlesOptionsColor(particlesOptions, this.spawnColor);
      }
      const shapeOptions = this.options.shape;
      let position = this.position;
      if (this._shape) {
        const shapePosData = this._shape.randomPosition();
        if (shapePosData) {
          position = shapePosData.position;
          const replaceData = shapeOptions.replace;
          if (replaceData.color && shapePosData.color) {
            setParticlesOptionsColor(particlesOptions, shapePosData.color);
          }
          if (replaceData.opacity) {
            if (particlesOptions.opacity) {
              particlesOptions.opacity.value = shapePosData.opacity;
            } else {
              particlesOptions.opacity = {
                value: shapePosData.opacity
              };
            }
          }
        } else {
          position = null;
        }
      }
      if (position) {
        this.container.particles.addParticle(position, particlesOptions);
      }
    }
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/Emitters.js
var Emitters = class {
  constructor(engine, container) {
    this.container = container;
    this._engine = engine;
    this.array = [];
    this.emitters = [];
    this.interactivityEmitters = {
      random: {
        count: 1,
        enable: false
      },
      value: []
    };
    const defaultIndex2 = 0;
    container.getEmitter = (idxOrName) => idxOrName === void 0 || isNumber(idxOrName) ? this.array[idxOrName ?? defaultIndex2] : this.array.find((t) => t.name === idxOrName);
    container.addEmitter = async (options, position) => this.addEmitter(options, position);
    container.removeEmitter = (idxOrName) => {
      const emitter = container.getEmitter(idxOrName);
      if (emitter) {
        this.removeEmitter(emitter);
      }
    };
    container.playEmitter = (idxOrName) => {
      const emitter = container.getEmitter(idxOrName);
      if (emitter) {
        emitter.externalPlay();
      }
    };
    container.pauseEmitter = (idxOrName) => {
      const emitter = container.getEmitter(idxOrName);
      if (emitter) {
        emitter.externalPause();
      }
    };
  }
  async addEmitter(options, position) {
    const emitterOptions = new Emitter();
    emitterOptions.load(options);
    const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);
    await emitter.init();
    this.array.push(emitter);
    return emitter;
  }
  handleClickMode(mode) {
    const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;
    if (mode !== EmitterClickMode.emitter) {
      return;
    }
    let emittersModeOptions;
    if (modeEmitters && isArray(modeEmitters.value)) {
      const minLength = 0;
      if (modeEmitters.value.length > minLength && modeEmitters.random.enable) {
        emittersModeOptions = [];
        const usedIndexes = [];
        for (let i = 0; i < modeEmitters.random.count; i++) {
          const idx = arrayRandomIndex(modeEmitters.value);
          if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {
            i--;
            continue;
          }
          usedIndexes.push(idx);
          emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));
        }
      } else {
        emittersModeOptions = modeEmitters.value;
      }
    } else {
      emittersModeOptions = modeEmitters == null ? void 0 : modeEmitters.value;
    }
    const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;
    void executeOnSingleOrMultiple(emittersOptions, async (emitter) => {
      await this.addEmitter(emitter, ePosition);
    });
  }
  async init() {
    this.emitters = this.container.actualOptions.emitters;
    this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;
    if (!this.emitters) {
      return;
    }
    if (isArray(this.emitters)) {
      for (const emitterOptions of this.emitters) {
        await this.addEmitter(emitterOptions);
      }
    } else {
      await this.addEmitter(this.emitters);
    }
  }
  pause() {
    for (const emitter of this.array) {
      emitter.pause();
    }
  }
  play() {
    for (const emitter of this.array) {
      emitter.play();
    }
  }
  removeEmitter(emitter) {
    const index = this.array.indexOf(emitter), minIndex2 = 0, deleteCount = 1;
    if (index >= minIndex2) {
      this.array.splice(index, deleteCount);
    }
  }
  resize() {
    for (const emitter of this.array) {
      emitter.resize();
    }
  }
  stop() {
    this.array = [];
  }
  update(delta) {
    for (const emitter of this.array) {
      emitter.update(delta);
    }
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/EmittersPlugin.js
var EmittersPlugin = class {
  constructor(engine) {
    this._engine = engine;
    this.id = "emitters";
  }
  getPlugin(container) {
    return Promise.resolve(new Emitters(this._engine, container));
  }
  loadOptions(options, source) {
    var _a, _b;
    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
      return;
    }
    if (source == null ? void 0 : source.emitters) {
      options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {
        const tmp = new Emitter();
        tmp.load(emitter);
        return tmp;
      });
    }
    const interactivityEmitters = (_b = (_a = source == null ? void 0 : source.interactivity) == null ? void 0 : _a.modes) == null ? void 0 : _b.emitters;
    if (interactivityEmitters) {
      if (isArray(interactivityEmitters)) {
        options.interactivity.modes.emitters = {
          random: {
            count: 1,
            enable: true
          },
          value: interactivityEmitters.map((s) => {
            const tmp = new Emitter();
            tmp.load(s);
            return tmp;
          })
        };
      } else {
        const emitterMode = interactivityEmitters;
        if (emitterMode.value !== void 0) {
          const defaultCount = 1;
          if (isArray(emitterMode.value)) {
            options.interactivity.modes.emitters = {
              random: {
                count: emitterMode.random.count ?? defaultCount,
                enable: emitterMode.random.enable ?? false
              },
              value: emitterMode.value.map((s) => {
                const tmp = new Emitter();
                tmp.load(s);
                return tmp;
              })
            };
          } else {
            const tmp = new Emitter();
            tmp.load(emitterMode.value);
            options.interactivity.modes.emitters = {
              random: {
                count: emitterMode.random.count ?? defaultCount,
                enable: emitterMode.random.enable ?? false
              },
              value: tmp
            };
          }
        } else {
          const emitterOptions = options.interactivity.modes.emitters = {
            random: {
              count: 1,
              enable: false
            },
            value: new Emitter()
          };
          emitterOptions.value.load(interactivityEmitters);
        }
      }
    }
  }
  needsPlugin(options) {
    var _a, _b, _c;
    if (!options) {
      return false;
    }
    const emitters = options.emitters;
    return isArray(emitters) && !!emitters.length || emitters !== void 0 || !!((_c = (_b = (_a = options.interactivity) == null ? void 0 : _a.events) == null ? void 0 : _b.onClick) == null ? void 0 : _c.mode) && isInArray(EmitterClickMode.emitter, options.interactivity.events.onClick.mode);
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/ShapeManager.js
var shapeGeneratorss = /* @__PURE__ */ new Map();
var ShapeManager = class {
  constructor(engine) {
    this._engine = engine;
  }
  addShapeGenerator(name, generator) {
    if (!this.getShapeGenerator(name)) {
      shapeGeneratorss.set(name, generator);
    }
  }
  getShapeGenerator(name) {
    return shapeGeneratorss.get(name);
  }
  getSupportedShapeGenerators() {
    return shapeGeneratorss.keys();
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js
var EmitterShapeBase = class {
  constructor(position, size, fill, options) {
    this.position = position;
    this.size = size;
    this.fill = fill;
    this.options = options;
  }
  resize(position, size) {
    this.position = position;
    this.size = size;
  }
};

// node_modules/@tsparticles/plugin-emitters/browser/index.js
async function loadEmittersPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  if (!engine.emitterShapeManager) {
    engine.emitterShapeManager = new ShapeManager(engine);
  }
  if (!engine.addEmitterShapeGenerator) {
    engine.addEmitterShapeGenerator = (name, generator) => {
      var _a;
      (_a = engine.emitterShapeManager) == null ? void 0 : _a.addShapeGenerator(name, generator);
    };
  }
  const plugin = new EmittersPlugin(engine);
  await engine.addPlugin(plugin, refresh);
}

// node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/utils.js
var origin4 = {
  x: 0,
  y: 0
};
var minWidth = 0;
function getCanvasImageData2(ctx, size, offset, clear = true) {
  const imageData = ctx.getImageData(origin4.x, origin4.y, size.width, size.height).data;
  if (clear) {
    ctx.clearRect(origin4.x, origin4.y, size.width, size.height);
  }
  const pixels = [];
  for (let i = 0; i < imageData.length; i += offset) {
    const idx = i / offset, pos = {
      x: idx % size.width,
      y: Math.floor(idx / size.width)
    };
    if (!pixels[pos.y]) {
      pixels[pos.y] = [];
    }
    const indexesOffset = {
      r: 0,
      g: 1,
      b: 2,
      a: 3
    }, alphaFactor2 = 255;
    pixels[pos.y][pos.x] = {
      r: imageData[i + indexesOffset.r],
      g: imageData[i + indexesOffset.g],
      b: imageData[i + indexesOffset.b],
      a: imageData[i + indexesOffset.a] / alphaFactor2
    };
  }
  return {
    pixels,
    width: Math.min(...pixels.map((row) => row.length)),
    height: pixels.length
  };
}
function getImageData2(src, offset) {
  const image = new Image();
  image.crossOrigin = "Anonymous";
  const p = new Promise((resolve, reject) => {
    image.onerror = reject;
    image.onload = () => {
      const canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      const context = canvas.getContext("2d");
      if (!context) {
        return reject(new Error(`${errorPrefix} Could not get canvas context`));
      }
      context.drawImage(image, origin4.x, origin4.y, image.width, image.height, origin4.x, origin4.y, canvas.width, canvas.height);
      resolve(getCanvasImageData2(context, canvas, offset));
    };
  });
  image.src = src;
  return p;
}
function getTextData2(textOptions, offset, fill) {
  const canvas = document.createElement("canvas"), context = canvas.getContext("2d"), { font, text, lines: linesOptions, color } = textOptions;
  if (!text || !context) {
    return;
  }
  const lines = text.split(linesOptions.separator), fontSize = isNumber(font.size) ? `${font.size}px` : font.size, linesData = [];
  let maxWidth = 0, totalHeight = 0;
  for (const line of lines) {
    context.font = `${font.style || ""} ${font.variant || ""} ${font.weight || ""} ${fontSize} ${font.family}`;
    const measure = context.measureText(line), lineData = {
      measure,
      text: line,
      height: measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent,
      width: measure.width
    };
    maxWidth = Math.max(maxWidth || minWidth, lineData.width);
    totalHeight += lineData.height + linesOptions.spacing;
    linesData.push(lineData);
  }
  canvas.width = maxWidth;
  canvas.height = totalHeight;
  let currentHeight = 0;
  for (const line of linesData) {
    context.font = `${font.style || ""} ${font.variant || ""} ${font.weight || ""} ${fontSize} ${font.family}`;
    if (fill) {
      context.fillStyle = color;
      context.fillText(line.text, origin4.x, currentHeight + line.measure.actualBoundingBoxAscent);
    } else {
      context.strokeStyle = color;
      context.strokeText(line.text, origin4.x, currentHeight + line.measure.actualBoundingBoxAscent);
    }
    currentHeight += line.height + linesOptions.spacing;
  }
  return getCanvasImageData2(context, canvas, offset);
}

// node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/EmittersCanvasShape.js
var maxRetries = 100;
var half5 = 0.5;
var EmittersCanvasShape = class extends EmitterShapeBase {
  constructor(position, size, fill, options) {
    super(position, size, fill, options);
    const filter = options.filter, minAlpha3 = 0;
    let filterFunc = (pixel) => pixel.a > minAlpha3;
    if (filter !== void 0) {
      if (isString(filter)) {
        if (Object.hasOwn(window, filter)) {
          const wndFilter = window[filter];
          if (isFunction(wndFilter)) {
            filterFunc = wndFilter;
          }
        }
      } else {
        filterFunc = filter;
      }
    }
    this.filter = filterFunc;
    this.scale = options.scale;
    this.pixelData = {
      pixels: [],
      height: 0,
      width: 0
    };
  }
  async init() {
    let pixelData;
    const options = this.options, selector = options.selector, pixels = options.pixels, image = options.image, element = options.element, text = options.text, offset = pixels.offset;
    if (image) {
      const url = image.src;
      if (!url) {
        return;
      }
      pixelData = await getImageData2(url, offset);
    } else if (text) {
      const data = getTextData2(text, offset, this.fill);
      if (isNull(data)) {
        return;
      }
      pixelData = data;
    } else if (element ?? selector) {
      const canvas = element ?? (selector && document.querySelector(selector));
      if (!canvas) {
        return;
      }
      const context = canvas.getContext("2d");
      if (!context) {
        return;
      }
      pixelData = getCanvasImageData2(context, canvas, offset);
    }
    if (!pixelData) {
      return;
    }
    this.pixelData = pixelData;
  }
  randomPosition() {
    const { height, width } = this.pixelData, data = this.pixelData, position = this.position, scale = this.scale, positionOffset = {
      x: position.x - width * scale * half5,
      y: position.y - height * scale * half5
    };
    for (let i = 0; i < maxRetries; i++) {
      const nextIndex = Math.floor(getRandom() * width * height), pixelPos = {
        x: nextIndex % width,
        y: Math.floor(nextIndex / width)
      }, pixel = data.pixels[pixelPos.y][pixelPos.x], shouldCreateParticle = this.filter(pixel);
      if (!shouldCreateParticle) {
        continue;
      }
      return {
        position: {
          x: pixelPos.x * scale + positionOffset.x,
          y: pixelPos.y * scale + positionOffset.y
        },
        color: { ...pixel },
        opacity: pixel.a
      };
    }
    return null;
  }
  resize(position, size) {
    super.resize(position, size);
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/PixelsOptions.js
var PixelsOptions = class {
  constructor() {
    this.offset = 4;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.offset !== void 0) {
      this.offset = data.offset;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/TextFontOptions.js
var TextFontOptions = class {
  constructor() {
    this.family = "Verdana";
    this.size = 32;
    this.style = "";
    this.variant = "";
    this.weight = "";
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.family !== void 0) {
      this.family = data.family;
    }
    if (data.size !== void 0) {
      this.size = data.size;
    }
    if (data.style !== void 0) {
      this.style = data.style;
    }
    if (data.variant !== void 0) {
      this.variant = data.variant;
    }
    if (data.weight !== void 0) {
      this.weight = data.weight;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/TextLinesOptions.js
var TextLinesOptions = class {
  constructor() {
    this.separator = "\n";
    this.spacing = 0;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.separator !== void 0) {
      this.separator = data.separator;
    }
    if (data.spacing !== void 0) {
      this.spacing = data.spacing;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/TextOptions.js
var TextOptions = class {
  constructor() {
    this.color = "#000000";
    this.font = new TextFontOptions();
    this.lines = new TextLinesOptions();
    this.text = "";
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.color !== void 0) {
      this.color = data.color;
    }
    this.font.load(data.font);
    this.lines.load(data.lines);
    if (data.text !== void 0) {
      this.text = data.text;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/EmittersCanvasShapeOptions.js
var minAlpha2 = 0;
var EmittersCanvasShapeOptions = class {
  constructor() {
    this.filter = (pixel) => pixel.a > minAlpha2;
    this.pixels = new PixelsOptions();
    this.scale = 1;
    this.selector = "";
    this.text = new TextOptions();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.element !== void 0) {
      this.element = data.element;
    }
    if (data.filter !== void 0) {
      this.filter = data.filter;
    }
    this.pixels.load(data.pixels);
    if (data.scale !== void 0) {
      this.scale = data.scale;
    }
    if (data.selector !== void 0) {
      this.selector = data.selector;
    }
    if (data.image !== void 0) {
      this.image = data.image;
    }
    this.text.load(data.text);
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/EmittersCanvasShapeGenerator.js
var EmittersCanvasShapeGenerator = class {
  generate(position, size, fill, options) {
    const shapeOptions = new EmittersCanvasShapeOptions();
    shapeOptions.load(options);
    return new EmittersCanvasShape(position, size, fill, shapeOptions);
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/index.js
async function loadEmittersShapeCanvas(engine, refresh = true) {
  var _a;
  const emittersEngine = engine;
  emittersEngine.checkVersion("3.8.1");
  (_a = emittersEngine.addEmitterShapeGenerator) == null ? void 0 : _a.call(emittersEngine, "canvas", new EmittersCanvasShapeGenerator());
  await emittersEngine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-emitters-shape-path/browser/utils.js
var maxAttempts = 100;
var half6 = 0.5;
function generateRandomPointWithinPath(ctx, path, center, size) {
  let randomPoint = null;
  for (let attempts = 0; attempts < maxAttempts; attempts++) {
    const tmpPoint = {
      x: center.x + getRandom() * size.width - size.width * half6,
      y: center.y + getRandom() * size.height - size.height * half6
    };
    if (ctx.isPointInPath(path, tmpPoint.x, tmpPoint.y)) {
      randomPoint = tmpPoint;
      break;
    }
  }
  return randomPoint;
}
function generateRandomPointOnPathPerimeter(ctx, path, center, size) {
  let randomPoint = null;
  for (let attempts = 0; attempts < maxAttempts; attempts++) {
    const tmpPoint = {
      x: center.x + getRandom() * size.width - size.width * half6,
      y: center.y + getRandom() * size.height - size.height * half6
    };
    if (ctx.isPointInStroke(path, tmpPoint.x, tmpPoint.y)) {
      randomPoint = tmpPoint;
      break;
    }
  }
  return randomPoint;
}

// node_modules/@tsparticles/plugin-emitters-shape-path/browser/EmittersPathShape.js
var half7 = 0.5;
var EmittersPathShape = class extends EmitterShapeBase {
  constructor(position, size, fill, options) {
    super(position, size, fill, options);
    const ctx = document.createElement("canvas").getContext("2d");
    if (!ctx) {
      throw new Error(`${errorPrefix} No 2d context available`);
    }
    this.checkContext = ctx;
    this.points = options.points;
    const pathData = this.points, path = new Path2D(), offset = {
      x: position.x - size.width * half7,
      y: position.y - size.height * half7
    };
    for (const [index, point] of pathData.entries()) {
      const coords = {
        x: offset.x + point.x * size.width / percentDenominator,
        y: offset.y + point.y * size.height / percentDenominator
      };
      if (!index) {
        path.moveTo(coords.x, coords.y);
      } else {
        path.lineTo(coords.x, coords.y);
      }
    }
    const firstIndex2 = 0, firstPathData = pathData[firstIndex2];
    if (firstPathData) {
      const coords = {
        x: offset.x + firstPathData.x * size.width / percentDenominator,
        y: offset.y + firstPathData.y * size.height / percentDenominator
      };
      path.lineTo(coords.x, coords.y);
    }
    this.path = path;
  }
  async init() {
  }
  randomPosition() {
    const ctx = this.checkContext, position = this.position, size = this.size, fill = this.fill, path = this.path, res = fill ? generateRandomPointWithinPath(ctx, path, position, size) : generateRandomPointOnPathPerimeter(ctx, path, position, size);
    return res ? { position: res } : null;
  }
  resize(position, size) {
    super.resize(position, size);
    const pathData = this.points, path = new Path2D(), offset = {
      x: position.x - size.width * half7,
      y: position.y - size.height * half7
    };
    for (const [index, point] of pathData.entries()) {
      const coords = {
        x: offset.x + point.x * size.width / percentDenominator,
        y: offset.y + point.y * size.height / percentDenominator
      };
      if (!index) {
        path.moveTo(coords.x, coords.y);
      } else {
        path.lineTo(coords.x, coords.y);
      }
    }
    const firstIndex2 = 0, firstPathData = pathData[firstIndex2];
    if (firstPathData) {
      const coords = {
        x: offset.x + firstPathData.x * size.width / percentDenominator,
        y: offset.y + firstPathData.y * size.height / percentDenominator
      };
      path.lineTo(coords.x, coords.y);
    }
    this.path = path;
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-path/browser/Options/Classes/EmittersPathShapeOptions.js
var defaultPosition = { x: 50, y: 50 };
var EmittersPathShapeOptions = class {
  constructor() {
    this.points = [];
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.points !== void 0) {
      this.points = data.points.map((t) => ({ x: t.x ?? defaultPosition.x, y: t.y ?? defaultPosition.y }));
    }
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-path/browser/EmittersPathShapeGenerator.js
var EmittersPathShapeGenerator = class {
  generate(position, size, fill, options) {
    const shapeOptions = new EmittersPathShapeOptions();
    shapeOptions.load(options);
    return new EmittersPathShape(position, size, fill, shapeOptions);
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-path/browser/index.js
async function loadEmittersShapePath(engine, refresh = true) {
  var _a;
  const emittersEngine = engine;
  emittersEngine.checkVersion("3.8.1");
  (_a = emittersEngine.addEmitterShapeGenerator) == null ? void 0 : _a.call(emittersEngine, "path", new EmittersPathShapeGenerator());
  await emittersEngine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/utils.js
var double6 = 2;
var doublePI4 = Math.PI * double6;
var defaultRotation = 0;
var maxAttempts2 = 100;
function generateRandomPolygon(position, sides7, radius, rotationAngle = defaultRotation) {
  const polygon2 = [], angle = doublePI4 / sides7;
  for (let i = 0; i < sides7; i++) {
    const currentAngle = angle * i + rotationAngle;
    polygon2.push({
      x: position.x + radius * Math.cos(currentAngle),
      y: position.y + radius * Math.sin(currentAngle)
    });
  }
  return polygon2;
}
function generateRandomPointWithinPolygon(polygon2) {
  const firstIndex2 = 0, firstPoint = polygon2[firstIndex2], min = { ...firstPoint }, max = { ...firstPoint };
  for (const point of polygon2) {
    if (point.x < min.x) {
      min.x = point.x;
    }
    if (point.x > max.x) {
      max.x = point.x;
    }
    if (point.y < min.y) {
      min.y = point.y;
    }
    if (point.y > max.y) {
      max.y = point.y;
    }
  }
  let randomPoint = null;
  for (let attempts = 0; attempts < maxAttempts2; attempts++) {
    const tmpPoint = {
      x: min.x + getRandom() * (max.x - min.x),
      y: min.y + getRandom() * (max.y - min.y)
    };
    if (isPointInPolygon(tmpPoint, polygon2)) {
      randomPoint = tmpPoint;
      break;
    }
  }
  return randomPoint;
}
function generateRandomPointOnPolygonPerimeter(polygon2) {
  const sideIndex = Math.floor(getRandom() * polygon2.length), startPoint = polygon2[sideIndex], offset = 1, endPoint = polygon2[(sideIndex + offset) % polygon2.length], t = getRandom();
  return { x: startPoint.x + (endPoint.x - startPoint.x) * t, y: startPoint.y + (endPoint.y - startPoint.y) * t };
}
function isPointInPolygon(point, polygon2) {
  let inside = false;
  const offset = 1;
  for (let i = 0, j = polygon2.length - offset; i < polygon2.length; j = i++) {
    const pi = polygon2[i], pj = polygon2[j];
    const intersect = pi.y > point.y !== pj.y > point.y && point.x < (pj.x - pi.x) * (point.y - pi.y) / (pj.y - pi.y) + pi.x;
    if (intersect) {
      inside = !inside;
    }
  }
  return inside;
}

// node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/EmittersPolygonShape.js
var half8 = 0.5;
var EmittersPolygonShape = class extends EmitterShapeBase {
  constructor(position, size, fill, options) {
    super(position, size, fill, options);
    this.sides = options.sides;
    this.angle = degToRad(options.angle);
    this.polygon = generateRandomPolygon(position, this.sides, size.width * half8, this.angle);
  }
  async init() {
  }
  randomPosition() {
    const fill = this.fill, polygon2 = this.polygon, res = fill ? generateRandomPointWithinPolygon(polygon2) : generateRandomPointOnPolygonPerimeter(polygon2);
    return res ? { position: res } : null;
  }
  resize(position, size) {
    super.resize(position, size);
    this.polygon = generateRandomPolygon(position, this.sides, size.width * half8, this.angle);
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/Options/Classes/EmittersPolygonShapeOptions.js
var EmittersPolygonShapeOptions = class {
  constructor() {
    this.angle = 0;
    this.sides = 5;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.angle !== void 0) {
      this.angle = data.angle;
    }
    if (data.sides !== void 0) {
      this.sides = data.sides;
    }
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/EmittersPolygonShapeGenerator.js
var EmittersPolygonShapeGenerator = class {
  generate(position, size, fill, options) {
    const shapeOptions = new EmittersPolygonShapeOptions();
    shapeOptions.load(options);
    return new EmittersPolygonShape(position, size, fill, shapeOptions);
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/index.js
async function loadEmittersShapePolygon(engine, refresh = true) {
  var _a;
  const emittersEngine = engine;
  emittersEngine.checkVersion("3.8.1");
  (_a = emittersEngine.addEmitterShapeGenerator) == null ? void 0 : _a.call(emittersEngine, "polygon", new EmittersPolygonShapeGenerator());
  await emittersEngine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-export-image/browser/ExportImageInstance.js
var ExportImageInstance = class {
  constructor(container, engine) {
    this._exportImage = async (data) => {
      const element = this._container.canvas.element;
      if (!element) {
        return;
      }
      return new Promise((resolve) => {
        element.toBlob((blob) => {
          if (!blob) {
            resolve(void 0);
            return;
          }
          resolve(blob);
        }, data.type ?? "image/png", data.quality);
      });
    };
    this._container = container;
    this._engine = engine;
  }
  async export(type, data) {
    const res = {
      supported: false
    };
    switch (type) {
      case "image":
        res.supported = true;
        res.blob = await this._exportImage(data);
        break;
    }
    return res;
  }
};

// node_modules/@tsparticles/plugin-export-image/browser/ExportImagePlugin.js
var ExportImagePlugin = class {
  constructor(engine) {
    this.id = "export-image";
    this._engine = engine;
  }
  getPlugin(container) {
    return Promise.resolve(new ExportImageInstance(container, this._engine));
  }
  loadOptions() {
  }
  needsPlugin() {
    return true;
  }
};

// node_modules/@tsparticles/plugin-export-image/browser/index.js
async function loadExportImagePlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPlugin(new ExportImagePlugin(engine), refresh);
}

// node_modules/@tsparticles/plugin-export-json/browser/ExportJSONInstance.js
var indent = 2;
var ExportJSONInstance = class {
  constructor(container, engine) {
    this._exportJSON = async () => {
      const json = JSON.stringify(this._container.actualOptions, (key, value) => {
        if (key.startsWith("_")) {
          return;
        }
        return value;
      }, indent);
      return Promise.resolve(new Blob([json], { type: "application/json" }));
    };
    this._container = container;
    this._engine = engine;
  }
  async export(type) {
    const res = {
      supported: false
    };
    switch (type) {
      case "json":
        res.supported = true;
        res.blob = await this._exportJSON();
        break;
    }
    return res;
  }
};

// node_modules/@tsparticles/plugin-export-json/browser/ExportJSONPlugin.js
var ExportJSONPlugin = class {
  constructor(engine) {
    this.id = "export-json";
    this._engine = engine;
  }
  getPlugin(container) {
    return Promise.resolve(new ExportJSONInstance(container, this._engine));
  }
  loadOptions() {
  }
  needsPlugin() {
    return true;
  }
};

// node_modules/@tsparticles/plugin-export-json/browser/index.js
async function loadExportJSONPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPlugin(new ExportJSONPlugin(engine), refresh);
}

// node_modules/@tsparticles/plugin-export-video/browser/ExportVideoInstance.js
var videoTypes = ["webm", "ogg", "mp4", "x-matroska"];
var codecs = [
  "vp9",
  "vp9.0",
  "vp8",
  "vp8.0",
  "avc1",
  "av1",
  "h265",
  "h.265",
  "h264",
  "h.264",
  "opus",
  "pcm",
  "aac",
  "mpeg",
  "mp4a"
];
function getVideoSupportedMimeTypes() {
  const isSupported = (type) => MediaRecorder.isTypeSupported(type), supported = [];
  videoTypes.forEach((type) => {
    const mimeType = `video/${type}`;
    codecs.forEach((codec) => [
      `${mimeType};codecs=${codec}`,
      `${mimeType};codecs=${codec.toUpperCase()}`
    ].forEach((variation) => {
      if (isSupported(variation)) {
        supported.push(variation);
      }
    }));
    if (isSupported(mimeType)) {
      supported.push(mimeType);
    }
  });
  return supported;
}
var ExportVideoInstance = class {
  constructor(container, engine) {
    this._supportedTypes = [];
    this._exportVideo = async (data) => {
      const element = this._container.canvas.element;
      if (!element) {
        return;
      }
      return new Promise((resolve) => {
        const stream = element.captureStream(data.fps ?? this._container.actualOptions.fpsLimit), firstIndex2 = 0, mimeType = data.mimeType ?? this._supportedTypes[firstIndex2], recorder = new MediaRecorder(stream, {
          mimeType
        }), chunks = [], defaultDuration = 5;
        recorder.addEventListener("dataavailable", (event) => {
          chunks.push(event.data);
        });
        recorder.addEventListener("stop", () => {
          resolve(new Blob(chunks, { type: mimeType }));
        });
        recorder.start();
        setTimeout(() => {
          recorder.stop();
        }, data.duration ?? defaultDuration * millisecondsToSeconds);
      });
    };
    this._container = container;
    this._engine = engine;
    this._supportedTypes = getVideoSupportedMimeTypes();
  }
  async export(type, data) {
    const res = {
      supported: false
    };
    switch (type) {
      case "video":
        res.supported = true;
        res.blob = await this._exportVideo(data);
        break;
    }
    return res;
  }
};

// node_modules/@tsparticles/plugin-export-video/browser/ExportVideoPlugin.js
var ExportVideoPlugin = class {
  constructor(engine) {
    this.id = "export-video";
    this._engine = engine;
  }
  getPlugin(container) {
    return Promise.resolve(new ExportVideoInstance(container, this._engine));
  }
  loadOptions() {
  }
  needsPlugin() {
    return true;
  }
};

// node_modules/@tsparticles/plugin-export-video/browser/index.js
async function loadExportVideoPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPlugin(new ExportVideoPlugin(engine), refresh);
}

// node_modules/@tsparticles/interaction-external-particle/browser/Options/Classes/InteractivityParticle.js
var InteractivityParticle = class {
  constructor() {
    this.replaceCursor = false;
    this.pauseOnStop = false;
    this.stopDelay = 0;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.options !== void 0) {
      this.options = deepExtend({}, data.options);
    }
    if (data.replaceCursor !== void 0) {
      this.replaceCursor = data.replaceCursor;
    }
    if (data.pauseOnStop !== void 0) {
      this.pauseOnStop = data.pauseOnStop;
    }
    if (data.stopDelay !== void 0) {
      this.stopDelay = data.stopDelay;
    }
  }
};

// node_modules/@tsparticles/interaction-external-particle/browser/InteractivityParticleMaker.js
var particleMode = "particle";
var InteractivityParticleMaker = class extends ExternalInteractorBase {
  constructor(container) {
    super(container);
  }
  clear() {
  }
  init() {
  }
  interact() {
    var _a, _b, _c, _d;
    const container = this.container, { interactivity } = container, options = container.actualOptions;
    if (!container.retina.reduceFactor) {
      return;
    }
    const mousePos = interactivity.mouse.position, interactivityParticleOptions = options.interactivity.modes.particle;
    if (!interactivityParticleOptions) {
      return;
    }
    const mouseStopped = interactivityParticleOptions.pauseOnStop && (interactivity.mouse.position === this._lastPosition || ((_a = interactivity.mouse.position) == null ? void 0 : _a.x) === ((_b = this._lastPosition) == null ? void 0 : _b.x) && ((_c = interactivity.mouse.position) == null ? void 0 : _c.y) === ((_d = this._lastPosition) == null ? void 0 : _d.y)), clearDelay = interactivityParticleOptions.stopDelay;
    if (mousePos) {
      this._lastPosition = { ...mousePos };
    } else {
      delete this._lastPosition;
    }
    if (!this._lastPosition) {
      return;
    }
    if (mouseStopped) {
      if (this._clearTimeout) {
        return;
      }
      this._clearTimeout = setTimeout(() => {
        if (!this._particle) {
          return;
        }
        if (interactivityParticleOptions.replaceCursor) {
          const element = interactivity.element;
          if (element) {
            if (element instanceof Window) {
              document.body.style.cursor = "";
            } else {
              element.style.cursor = "";
            }
          }
        }
        this.container.particles.remove(this._particle, void 0, true);
        delete this._particle;
      }, clearDelay);
      return;
    }
    if (this._clearTimeout) {
      clearTimeout(this._clearTimeout);
      delete this._clearTimeout;
    }
    if (!this._particle) {
      const particleOptions = deepExtend(interactivityParticleOptions.options, {
        move: {
          enable: false
        }
      });
      this._particle = container.particles.addParticle(this._lastPosition, particleOptions);
      if (interactivityParticleOptions.replaceCursor) {
        const element = interactivity.element;
        if (element) {
          if (element instanceof Window) {
            document.body.style.cursor = "none";
          } else {
            element.style.cursor = "none";
          }
        }
      }
    }
    if (!this._particle) {
      return;
    }
    this._particle.position.x = this._lastPosition.x;
    this._particle.position.y = this._lastPosition.y;
  }
  isEnabled(particle) {
    const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((particle == null ? void 0 : particle.interactivity) ?? options.interactivity).events;
    return mouse.clicking && mouse.inside && !!mouse.position && isInArray(particleMode, events.onClick.mode) || mouse.inside && !!mouse.position && isInArray(particleMode, events.onHover.mode);
  }
  loadModeOptions(options, ...sources) {
    if (!options.particle) {
      options.particle = new InteractivityParticle();
    }
    for (const source of sources) {
      options.particle.load(source == null ? void 0 : source.particle);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-particle/browser/index.js
async function loadExternalParticleInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalParticle", (container) => {
    return Promise.resolve(new InteractivityParticleMaker(container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-pop/browser/Popper.js
var popMode = "pop";
var Popper = class extends ExternalInteractorBase {
  constructor(container) {
    super(container);
    this.handleClickMode = (mode) => {
      const container2 = this.container;
      if (mode !== popMode) {
        return;
      }
      const clickPos = container2.interactivity.mouse.clickPosition;
      if (!clickPos) {
        return;
      }
      const poppedParticles = container2.particles.quadTree.queryCircle(clickPos, container2.retina.pixelRatio);
      if (!poppedParticles.length) {
        return;
      }
      for (const particle of poppedParticles) {
        container2.particles.remove(particle);
      }
    };
  }
  clear() {
  }
  init() {
  }
  interact() {
  }
  isEnabled() {
    return true;
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-pop/browser/index.js
async function loadExternalPopInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalPop", (container) => {
    return Promise.resolve(new Popper(container));
  }, refresh);
}

// node_modules/@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSizeLimit.js
var AbsorberSizeLimit = class {
  constructor() {
    this.radius = 0;
    this.mass = 0;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.mass !== void 0) {
      this.mass = data.mass;
    }
    if (data.radius !== void 0) {
      this.radius = data.radius;
    }
  }
};

// node_modules/@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSize.js
var AbsorberSize = class extends ValueWithRandom {
  constructor() {
    super();
    this.density = 5;
    this.value = 50;
    this.limit = new AbsorberSizeLimit();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    super.load(data);
    if (data.density !== void 0) {
      this.density = data.density;
    }
    if (isNumber(data.limit)) {
      this.limit.radius = data.limit;
    } else {
      this.limit.load(data.limit);
    }
  }
};

// node_modules/@tsparticles/plugin-absorbers/browser/Options/Classes/Absorber.js
var Absorber = class {
  constructor() {
    this.color = new OptionsColor();
    this.color.value = "#000000";
    this.draggable = false;
    this.opacity = 1;
    this.destroy = true;
    this.orbits = false;
    this.size = new AbsorberSize();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.color !== void 0) {
      this.color = OptionsColor.create(this.color, data.color);
    }
    if (data.draggable !== void 0) {
      this.draggable = data.draggable;
    }
    this.name = data.name;
    if (data.opacity !== void 0) {
      this.opacity = data.opacity;
    }
    if (data.position !== void 0) {
      this.position = {};
      if (data.position.x !== void 0) {
        this.position.x = setRangeValue(data.position.x);
      }
      if (data.position.y !== void 0) {
        this.position.y = setRangeValue(data.position.y);
      }
    }
    if (data.size !== void 0) {
      this.size.load(data.size);
    }
    if (data.destroy !== void 0) {
      this.destroy = data.destroy;
    }
    if (data.orbits !== void 0) {
      this.orbits = data.orbits;
    }
  }
};

// node_modules/@tsparticles/plugin-absorbers/browser/Enums/AbsorberClickMode.js
var AbsorberClickMode;
(function(AbsorberClickMode2) {
  AbsorberClickMode2["absorber"] = "absorber";
})(AbsorberClickMode || (AbsorberClickMode = {}));

// node_modules/@tsparticles/plugin-absorbers/browser/AbsorberInstance.js
var squareExp = 2;
var absorbFactor = 0.033;
var minOrbitLength = 0;
var minRadius = 0;
var minMass = 0;
var minAngle2 = 0;
var double7 = 2;
var maxAngle = Math.PI * double7;
var minVelocity = 0;
var AbsorberInstance = class {
  constructor(absorbers, container, engine, options, position) {
    var _a;
    this._calcPosition = () => {
      const exactPosition = calcPositionOrRandomFromSizeRanged({
        size: this._container.canvas.size,
        position: this.options.position
      });
      return Vector.create(exactPosition.x, exactPosition.y);
    };
    this._updateParticlePosition = (particle, v) => {
      if (particle.destroyed) {
        return;
      }
      const container2 = this._container, canvasSize = container2.canvas.size;
      if (particle.needsNewPosition) {
        const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });
        particle.position.setTo(newPosition);
        particle.velocity.setTo(particle.initialVelocity);
        particle.absorberOrbit = void 0;
        particle.needsNewPosition = false;
      }
      if (this.options.orbits) {
        if (particle.absorberOrbit === void 0) {
          particle.absorberOrbit = Vector.origin;
          particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);
          particle.absorberOrbit.angle = getRandom() * maxAngle;
        }
        if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {
          const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;
          particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));
        }
        if (particle.absorberOrbitDirection === void 0) {
          particle.absorberOrbitDirection = particle.velocity.x >= minVelocity ? RotateDirection.clockwise : RotateDirection.counterClockwise;
        }
        const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;
        particle.velocity.setTo(Vector.origin);
        const updateFunc = {
          x: orbitDirection === RotateDirection.clockwise ? Math.cos : Math.sin,
          y: orbitDirection === RotateDirection.clockwise ? Math.sin : Math.cos
        };
        particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);
        particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);
        particle.absorberOrbit.length -= v.length;
        particle.absorberOrbit.angle += (particle.retina.moveSpeed ?? minVelocity) * container2.retina.pixelRatio / percentDenominator * container2.retina.reduceFactor;
      } else {
        const addV = Vector.origin;
        addV.length = v.length;
        addV.angle = v.angle;
        particle.velocity.addTo(addV);
      }
    };
    this._absorbers = absorbers;
    this._container = container;
    this._engine = engine;
    this.initialPosition = position ? Vector.create(position.x, position.y) : void 0;
    if (options instanceof Absorber) {
      this.options = options;
    } else {
      this.options = new Absorber();
      this.options.load(options);
    }
    this.dragging = false;
    this.name = this.options.name;
    this.opacity = this.options.opacity;
    this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;
    this.mass = this.size * this.options.size.density * container.retina.reduceFactor;
    const limit = this.options.size.limit;
    this.limit = {
      radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,
      mass: limit.mass
    };
    this.color = rangeColorToRgb(this._engine, this.options.color) ?? {
      b: 0,
      g: 0,
      r: 0
    };
    this.position = ((_a = this.initialPosition) == null ? void 0 : _a.copy()) ?? this._calcPosition();
  }
  attract(particle) {
    const container = this._container, options = this.options;
    if (options.draggable) {
      const mouse = container.interactivity.mouse;
      if (mouse.clicking && mouse.downPosition) {
        const mouseDist = getDistance(this.position, mouse.downPosition);
        if (mouseDist <= this.size) {
          this.dragging = true;
        }
      } else {
        this.dragging = false;
      }
      if (this.dragging && mouse.position) {
        this.position.x = mouse.position.x;
        this.position.y = mouse.position.y;
      }
    }
    const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);
    v.length = this.mass / Math.pow(distance, squareExp) * container.retina.reduceFactor;
    if (distance < this.size + particle.getRadius()) {
      const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;
      if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== void 0 && particle.absorberOrbit.length < minOrbitLength) {
        if (options.destroy) {
          particle.destroy();
        } else {
          particle.needsNewPosition = true;
          this._updateParticlePosition(particle, v);
        }
      } else {
        if (options.destroy) {
          particle.size.value -= sizeFactor;
        }
        this._updateParticlePosition(particle, v);
      }
      if (this.limit.radius <= minRadius || this.size < this.limit.radius) {
        this.size += sizeFactor;
      }
      if (this.limit.mass <= minMass || this.mass < this.limit.mass) {
        this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;
      }
    } else {
      this._updateParticlePosition(particle, v);
    }
  }
  draw(context) {
    context.translate(this.position.x, this.position.y);
    context.beginPath();
    context.arc(originPoint.x, originPoint.y, this.size, minAngle2, maxAngle, false);
    context.closePath();
    context.fillStyle = getStyleFromRgb(this.color, this.opacity);
    context.fill();
  }
  resize() {
    const initialPosition = this.initialPosition;
    this.position = initialPosition && isPointInside(initialPosition, this._container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();
  }
};

// node_modules/@tsparticles/plugin-absorbers/browser/Absorbers.js
var defaultIndex = 0;
var Absorbers = class {
  constructor(container, engine) {
    this._container = container;
    this._engine = engine;
    this.array = [];
    this.absorbers = [];
    this.interactivityAbsorbers = [];
    container.getAbsorber = (idxOrName) => idxOrName === void 0 || isNumber(idxOrName) ? this.array[idxOrName ?? defaultIndex] : this.array.find((t) => t.name === idxOrName);
    container.addAbsorber = async (options, position) => this.addAbsorber(options, position);
  }
  async addAbsorber(options, position) {
    const absorber = new AbsorberInstance(this, this._container, this._engine, options, position);
    this.array.push(absorber);
    return Promise.resolve(absorber);
  }
  draw(context) {
    for (const absorber of this.array) {
      absorber.draw(context);
    }
  }
  handleClickMode(mode) {
    const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;
    if (mode === AbsorberClickMode.absorber) {
      const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this._container.interactivity.mouse.clickPosition;
      void this.addAbsorber(absorbersOptions, aPosition);
    }
  }
  async init() {
    this.absorbers = this._container.actualOptions.absorbers;
    this.interactivityAbsorbers = this._container.actualOptions.interactivity.modes.absorbers;
    const promises = executeOnSingleOrMultiple(this.absorbers, async (absorber) => {
      await this.addAbsorber(absorber);
    });
    if (promises instanceof Array) {
      await Promise.all(promises);
    } else {
      await promises;
    }
  }
  particleUpdate(particle) {
    for (const absorber of this.array) {
      absorber.attract(particle);
      if (particle.destroyed) {
        break;
      }
    }
  }
  removeAbsorber(absorber) {
    const index = this.array.indexOf(absorber), deleteCount = 1;
    if (index >= defaultIndex) {
      this.array.splice(index, deleteCount);
    }
  }
  resize() {
    for (const absorber of this.array) {
      absorber.resize();
    }
  }
  stop() {
    this.array = [];
  }
};

// node_modules/@tsparticles/plugin-absorbers/browser/AbsorbersPlugin.js
var AbsorbersPlugin = class {
  constructor(engine) {
    this.id = "absorbers";
    this._engine = engine;
  }
  async getPlugin(container) {
    return Promise.resolve(new Absorbers(container, this._engine));
  }
  loadOptions(options, source) {
    var _a, _b;
    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
      return;
    }
    if (source == null ? void 0 : source.absorbers) {
      options.absorbers = executeOnSingleOrMultiple(source.absorbers, (absorber) => {
        const tmp = new Absorber();
        tmp.load(absorber);
        return tmp;
      });
    }
    options.interactivity.modes.absorbers = executeOnSingleOrMultiple((_b = (_a = source == null ? void 0 : source.interactivity) == null ? void 0 : _a.modes) == null ? void 0 : _b.absorbers, (absorber) => {
      const tmp = new Absorber();
      tmp.load(absorber);
      return tmp;
    });
  }
  needsPlugin(options) {
    var _a, _b, _c;
    if (!options) {
      return false;
    }
    const absorbers = options.absorbers;
    if (isArray(absorbers)) {
      return !!absorbers.length;
    } else if (absorbers) {
      return true;
    } else if (((_c = (_b = (_a = options.interactivity) == null ? void 0 : _a.events) == null ? void 0 : _b.onClick) == null ? void 0 : _c.mode) && isInArray(AbsorberClickMode.absorber, options.interactivity.events.onClick.mode)) {
      return true;
    }
    return false;
  }
};

// node_modules/@tsparticles/plugin-absorbers/browser/index.js
async function loadAbsorbersPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPlugin(new AbsorbersPlugin(engine), refresh);
}

// node_modules/@tsparticles/updater-destroy/browser/Options/Classes/DestroyBounds.js
var DestroyBounds = class {
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.bottom !== void 0) {
      this.bottom = setRangeValue(data.bottom);
    }
    if (data.left !== void 0) {
      this.left = setRangeValue(data.left);
    }
    if (data.right !== void 0) {
      this.right = setRangeValue(data.right);
    }
    if (data.top !== void 0) {
      this.top = setRangeValue(data.top);
    }
  }
};

// node_modules/@tsparticles/updater-destroy/browser/Enums/DestroyMode.js
var DestroyMode;
(function(DestroyMode2) {
  DestroyMode2["none"] = "none";
  DestroyMode2["split"] = "split";
})(DestroyMode || (DestroyMode = {}));

// node_modules/@tsparticles/updater-destroy/browser/Options/Classes/SplitFactor.js
var SplitFactor = class extends ValueWithRandom {
  constructor() {
    super();
    this.value = 3;
  }
};

// node_modules/@tsparticles/updater-destroy/browser/Options/Classes/SplitRate.js
var SplitRate = class extends ValueWithRandom {
  constructor() {
    super();
    this.value = { min: 4, max: 9 };
  }
};

// node_modules/@tsparticles/updater-destroy/browser/Options/Classes/Split.js
var Split = class {
  constructor() {
    this.count = 1;
    this.factor = new SplitFactor();
    this.rate = new SplitRate();
    this.sizeOffset = true;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.color !== void 0) {
      this.color = OptionsColor.create(this.color, data.color);
    }
    if (data.count !== void 0) {
      this.count = data.count;
    }
    this.factor.load(data.factor);
    this.rate.load(data.rate);
    this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {
      return deepExtend({}, particles);
    });
    if (data.sizeOffset !== void 0) {
      this.sizeOffset = data.sizeOffset;
    }
    if (data.colorOffset) {
      this.colorOffset = this.colorOffset ?? {};
      if (data.colorOffset.h !== void 0) {
        this.colorOffset.h = data.colorOffset.h;
      }
      if (data.colorOffset.s !== void 0) {
        this.colorOffset.s = data.colorOffset.s;
      }
      if (data.colorOffset.l !== void 0) {
        this.colorOffset.l = data.colorOffset.l;
      }
    }
  }
};

// node_modules/@tsparticles/updater-destroy/browser/Options/Classes/Destroy.js
var Destroy = class {
  constructor() {
    this.bounds = new DestroyBounds();
    this.mode = DestroyMode.none;
    this.split = new Split();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.mode) {
      this.mode = data.mode;
    }
    if (data.bounds) {
      this.bounds.load(data.bounds);
    }
    this.split.load(data.split);
  }
};

// node_modules/@tsparticles/updater-destroy/browser/Utils.js
var defaultOffset = 0;
var minDestroySize = 0.5;
var defaultSplitCount = 0;
var increment = 1;
var unbreakableTime = 500;
var minSplitCount = 0;
function addSplitParticle(engine, container, parent, splitParticlesOptions) {
  const destroyOptions = parent.options.destroy;
  if (!destroyOptions) {
    return;
  }
  const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getRangeValue(splitOptions.factor.value), parentColor = parent.getFillColor();
  if (splitOptions.color) {
    options.color.load(splitOptions.color);
  } else if (splitOptions.colorOffset && parentColor) {
    options.color.load({
      value: {
        hsl: {
          h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? defaultOffset),
          s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? defaultOffset),
          l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? defaultOffset)
        }
      }
    });
  } else {
    options.color.load({
      value: {
        hsl: parent.getFillColor()
      }
    });
  }
  options.move.load({
    center: {
      x: parent.position.x,
      y: parent.position.y,
      mode: PixelMode.precise
    }
  });
  if (isNumber(options.size.value)) {
    options.size.value /= factor;
  } else {
    options.size.value.min /= factor;
    options.size.value.max /= factor;
  }
  options.load(splitParticlesOptions);
  const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : defaultOffset, position = {
    x: parent.position.x + randomInRange(offset),
    y: parent.position.y + randomInRange(offset)
  };
  return container.particles.addParticle(position, options, parent.group, (particle) => {
    if (particle.size.value < minDestroySize) {
      return false;
    }
    particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));
    particle.splitCount = (parent.splitCount ?? defaultSplitCount) + increment;
    particle.unbreakable = true;
    setTimeout(() => {
      particle.unbreakable = false;
    }, unbreakableTime);
    return true;
  });
}
function split(engine, container, particle) {
  const destroyOptions = particle.options.destroy;
  if (!destroyOptions) {
    return;
  }
  const splitOptions = destroyOptions.split;
  if (splitOptions.count >= minSplitCount && (particle.splitCount === void 0 || particle.splitCount++ > splitOptions.count)) {
    return;
  }
  const rate = getRangeValue(splitOptions.rate.value), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);
  for (let i = 0; i < rate; i++) {
    addSplitParticle(engine, container, particle, particlesSplitOptions);
  }
}

// node_modules/@tsparticles/updater-destroy/browser/DestroyUpdater.js
var DestroyUpdater = class {
  constructor(engine, container) {
    this.container = container;
    this.engine = engine;
  }
  init(particle) {
    const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;
    if (!destroyOptions) {
      return;
    }
    particle.splitCount = 0;
    const destroyBoundsOptions = destroyOptions.bounds;
    if (!particle.destroyBounds) {
      particle.destroyBounds = {};
    }
    const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;
    if (bottom) {
      destroyBounds.bottom = getRangeValue(bottom) * canvasSize.height / percentDenominator;
    }
    if (left) {
      destroyBounds.left = getRangeValue(left) * canvasSize.width / percentDenominator;
    }
    if (right) {
      destroyBounds.right = getRangeValue(right) * canvasSize.width / percentDenominator;
    }
    if (top) {
      destroyBounds.top = getRangeValue(top) * canvasSize.height / percentDenominator;
    }
  }
  isEnabled(particle) {
    return !particle.destroyed;
  }
  loadOptions(options, ...sources) {
    if (!options.destroy) {
      options.destroy = new Destroy();
    }
    for (const source of sources) {
      options.destroy.load(source == null ? void 0 : source.destroy);
    }
  }
  particleDestroyed(particle, override) {
    if (override) {
      return;
    }
    const destroyOptions = particle.options.destroy;
    if (destroyOptions && destroyOptions.mode === DestroyMode.split) {
      split(this.engine, this.container, particle);
    }
  }
  update(particle) {
    if (!this.isEnabled(particle)) {
      return;
    }
    const position = particle.getPosition(), bounds = particle.destroyBounds;
    if (!bounds) {
      return;
    }
    if (bounds.bottom !== void 0 && position.y >= bounds.bottom || bounds.left !== void 0 && position.x <= bounds.left || bounds.right !== void 0 && position.x >= bounds.right || bounds.top !== void 0 && position.y <= bounds.top) {
      particle.destroy();
    }
  }
};

// node_modules/@tsparticles/updater-destroy/browser/index.js
async function loadDestroyUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("destroy", (container) => {
    return Promise.resolve(new DestroyUpdater(engine, container));
  }, refresh);
}

// node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js
var quarter = 0.25;
var double8 = 2;
var doublePI5 = Math.PI * double8;
var squareExp2 = 2;
var half9 = 0.5;
var EmittersCircleShape = class extends EmitterShapeBase {
  constructor(position, size, fill, options) {
    super(position, size, fill, options);
  }
  async init() {
  }
  randomPosition() {
    const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {
      const u = getRandom() * quarter, theta = Math.atan(y / x * Math.tan(doublePI5 * u)), v = getRandom();
      if (v < quarter) {
        return theta;
      } else if (v < double8 * quarter) {
        return Math.PI - theta;
      } else if (v < double8 * quarter + quarter) {
        return Math.PI + theta;
      } else {
        return -theta;
      }
    }, radius = (x, y, theta) => x * y / Math.sqrt((y * Math.cos(theta)) ** squareExp2 + (x * Math.sin(theta)) ** squareExp2), [a, b] = [size.width * half9, size.height * half9], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;
    return {
      position: {
        x: position.x + randomRadius * Math.cos(randomTheta),
        y: position.y + randomRadius * Math.sin(randomTheta)
      }
    };
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js
var EmittersCircleShapeGenerator = class {
  generate(position, size, fill, options) {
    return new EmittersCircleShape(position, size, fill, options);
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-circle/browser/index.js
async function loadEmittersShapeCircle(engine, refresh = true) {
  var _a;
  const emittersEngine = engine;
  emittersEngine.checkVersion("3.8.1");
  (_a = emittersEngine.addEmitterShapeGenerator) == null ? void 0 : _a.call(emittersEngine, "circle", new EmittersCircleShapeGenerator());
  await emittersEngine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js
var sides = 4;
var Sides;
(function(Sides2) {
  Sides2[Sides2["TopLeft"] = 0] = "TopLeft";
  Sides2[Sides2["TopRight"] = 1] = "TopRight";
  Sides2[Sides2["BottomRight"] = 2] = "BottomRight";
  Sides2[Sides2["BottomLeft"] = 3] = "BottomLeft";
})(Sides || (Sides = {}));
function randomSquareCoordinate(position, offset) {
  return position + offset * (getRandom() - half);
}
var EmittersSquareShape = class extends EmitterShapeBase {
  constructor(position, size, fill, options) {
    super(position, size, fill, options);
  }
  async init() {
  }
  randomPosition() {
    const fill = this.fill, position = this.position, size = this.size;
    if (fill) {
      return {
        position: {
          x: randomSquareCoordinate(position.x, size.width),
          y: randomSquareCoordinate(position.y, size.height)
        }
      };
    } else {
      const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - half) * double;
      switch (side) {
        case Sides.TopLeft:
          return {
            position: {
              x: position.x + v * halfW,
              y: position.y - halfH
            }
          };
        case Sides.TopRight:
          return {
            position: {
              x: position.x - halfW,
              y: position.y + v * halfH
            }
          };
        case Sides.BottomRight:
          return {
            position: {
              x: position.x + v * halfW,
              y: position.y + halfH
            }
          };
        case Sides.BottomLeft:
        default:
          return {
            position: {
              x: position.x + halfW,
              y: position.y + v * halfH
            }
          };
      }
    }
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js
var EmittersSquareShapeGenerator = class {
  generate(position, size, fill, options) {
    return new EmittersSquareShape(position, size, fill, options);
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-square/browser/index.js
async function loadEmittersShapeSquare(engine, refresh = true) {
  var _a;
  const emittersEngine = engine;
  emittersEngine.checkVersion("3.8.1");
  (_a = emittersEngine.addEmitterShapeGenerator) == null ? void 0 : _a.call(emittersEngine, "square", new EmittersSquareShapeGenerator());
  await emittersEngine.refresh(refresh);
}

// node_modules/@tsparticles/interaction-external-trail/browser/Options/Classes/Trail.js
var Trail = class {
  constructor() {
    this.delay = 1;
    this.pauseOnStop = false;
    this.quantity = 1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.delay !== void 0) {
      this.delay = data.delay;
    }
    if (data.quantity !== void 0) {
      this.quantity = data.quantity;
    }
    if (data.particles !== void 0) {
      this.particles = deepExtend({}, data.particles);
    }
    if (data.pauseOnStop !== void 0) {
      this.pauseOnStop = data.pauseOnStop;
    }
  }
};

// node_modules/@tsparticles/interaction-external-trail/browser/TrailMaker.js
var trailMode = "trail";
var TrailMaker = class extends ExternalInteractorBase {
  constructor(container) {
    super(container);
    this._delay = 0;
  }
  clear() {
  }
  init() {
  }
  interact(delta) {
    var _a, _b, _c, _d;
    const container = this.container, { interactivity } = container;
    if (!container.retina.reduceFactor) {
      return;
    }
    const options = container.actualOptions, trailOptions = options.interactivity.modes.trail;
    if (!trailOptions) {
      return;
    }
    const optDelay = trailOptions.delay * millisecondsToSeconds / this.container.retina.reduceFactor;
    if (this._delay < optDelay) {
      this._delay += delta.value;
    }
    if (this._delay < optDelay) {
      return;
    }
    const canEmit = !(trailOptions.pauseOnStop && (interactivity.mouse.position === this._lastPosition || ((_a = interactivity.mouse.position) == null ? void 0 : _a.x) === ((_b = this._lastPosition) == null ? void 0 : _b.x) && ((_c = interactivity.mouse.position) == null ? void 0 : _c.y) === ((_d = this._lastPosition) == null ? void 0 : _d.y)));
    const mousePos = container.interactivity.mouse.position;
    if (mousePos) {
      this._lastPosition = { ...mousePos };
    } else {
      delete this._lastPosition;
    }
    if (canEmit) {
      container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);
    }
    this._delay -= optDelay;
  }
  isEnabled(particle) {
    const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((particle == null ? void 0 : particle.interactivity) ?? options.interactivity).events;
    return mouse.clicking && mouse.inside && !!mouse.position && isInArray(trailMode, events.onClick.mode) || mouse.inside && !!mouse.position && isInArray(trailMode, events.onHover.mode);
  }
  loadModeOptions(options, ...sources) {
    if (!options.trail) {
      options.trail = new Trail();
    }
    for (const source of sources) {
      options.trail.load(source == null ? void 0 : source.trail);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-trail/browser/index.js
async function loadExternalTrailInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalTrail", (container) => {
    return Promise.resolve(new TrailMaker(container));
  }, refresh);
}

// node_modules/@tsparticles/updater-roll/browser/RollMode.js
var RollMode;
(function(RollMode2) {
  RollMode2["both"] = "both";
  RollMode2["horizontal"] = "horizontal";
  RollMode2["vertical"] = "vertical";
})(RollMode || (RollMode = {}));

// node_modules/@tsparticles/updater-roll/browser/Utils.js
var double9 = 2;
var doublePI6 = Math.PI * double9;
var maxAngle2 = 360;
function initParticle(engine, particle) {
  const rollOpt = particle.options.roll;
  if (!(rollOpt == null ? void 0 : rollOpt.enable)) {
    particle.roll = {
      enable: false,
      horizontal: false,
      vertical: false,
      angle: 0,
      speed: 0
    };
    return;
  }
  particle.roll = {
    enable: rollOpt.enable,
    horizontal: rollOpt.mode === RollMode.horizontal || rollOpt.mode === RollMode.both,
    vertical: rollOpt.mode === RollMode.vertical || rollOpt.mode === RollMode.both,
    angle: getRandom() * doublePI6,
    speed: getRangeValue(rollOpt.speed) / maxAngle2
  };
  if (rollOpt.backColor) {
    particle.backColor = rangeColorToHsl(engine, rollOpt.backColor);
  } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {
    const alterType = getRandom() >= half ? AlterType.darken : AlterType.enlighten;
    particle.roll.alter = {
      type: alterType,
      value: getRangeValue(alterType === AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value)
    };
  } else if (rollOpt.darken.enable) {
    particle.roll.alter = {
      type: AlterType.darken,
      value: getRangeValue(rollOpt.darken.value)
    };
  } else if (rollOpt.enlighten.enable) {
    particle.roll.alter = {
      type: AlterType.enlighten,
      value: getRangeValue(rollOpt.enlighten.value)
    };
  }
}
function updateRoll(particle, delta) {
  const roll = particle.options.roll, data = particle.roll;
  if (!data || !(roll == null ? void 0 : roll.enable)) {
    return;
  }
  const speed = data.speed * delta.factor, max = doublePI6;
  data.angle += speed;
  if (data.angle > max) {
    data.angle -= max;
  }
}

// node_modules/@tsparticles/updater-roll/browser/Options/Classes/RollLight.js
var RollLight = class {
  constructor() {
    this.enable = false;
    this.value = 0;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.value !== void 0) {
      this.value = setRangeValue(data.value);
    }
  }
};

// node_modules/@tsparticles/updater-roll/browser/Options/Classes/Roll.js
var Roll = class {
  constructor() {
    this.darken = new RollLight();
    this.enable = false;
    this.enlighten = new RollLight();
    this.mode = RollMode.vertical;
    this.speed = 25;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.backColor !== void 0) {
      this.backColor = OptionsColor.create(this.backColor, data.backColor);
    }
    this.darken.load(data.darken);
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    this.enlighten.load(data.enlighten);
    if (data.mode !== void 0) {
      this.mode = data.mode;
    }
    if (data.speed !== void 0) {
      this.speed = setRangeValue(data.speed);
    }
  }
};

// node_modules/@tsparticles/updater-roll/browser/RollUpdater.js
var RollUpdater = class {
  constructor(engine) {
    this._engine = engine;
  }
  getTransformValues(particle) {
    var _a;
    const roll = ((_a = particle.roll) == null ? void 0 : _a.enable) && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;
    return {
      a: rollHorizontal ? Math.cos(roll.angle) : void 0,
      d: rollVertical ? Math.sin(roll.angle) : void 0
    };
  }
  init(particle) {
    initParticle(this._engine, particle);
  }
  isEnabled(particle) {
    const roll = particle.options.roll;
    return !particle.destroyed && !particle.spawning && !!(roll == null ? void 0 : roll.enable);
  }
  loadOptions(options, ...sources) {
    if (!options.roll) {
      options.roll = new Roll();
    }
    for (const source of sources) {
      options.roll.load(source == null ? void 0 : source.roll);
    }
  }
  update(particle, delta) {
    if (!this.isEnabled(particle)) {
      return;
    }
    updateRoll(particle, delta);
  }
};

// node_modules/@tsparticles/updater-roll/browser/index.js
async function loadRollUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("roll", () => {
    return Promise.resolve(new RollUpdater(engine));
  }, refresh);
}

// node_modules/@tsparticles/move-base/browser/Utils.js
var half10 = 0.5;
var double10 = 2;
var minVelocity2 = 0;
var identity = 1;
var moveSpeedFactor = 60;
var minSpinRadius = 0;
var spinFactor = 0.01;
var doublePI7 = Math.PI * double10;
function applyDistance(particle) {
  const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;
  if (!hDistance && !vDistance) {
    return;
  }
  const hasHDistance = (hDistance && dxFixed >= hDistance) ?? false, hasVDistance = (vDistance && dyFixed >= vDistance) ?? false;
  if ((hasHDistance || hasVDistance) && !particle.misplaced) {
    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;
    if (hDistance) {
      particle.velocity.x = particle.velocity.y * half10 - particle.velocity.x;
    }
    if (vDistance) {
      particle.velocity.y = particle.velocity.x * half10 - particle.velocity.y;
    }
  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {
    particle.misplaced = false;
  } else if (particle.misplaced) {
    const pos = particle.position, vel = particle.velocity;
    if (hDistance && (pos.x < initialPosition.x && vel.x < minVelocity2 || pos.x > initialPosition.x && vel.x > minVelocity2)) {
      vel.x *= -getRandom();
    }
    if (vDistance && (pos.y < initialPosition.y && vel.y < minVelocity2 || pos.y > initialPosition.y && vel.y > minVelocity2)) {
      vel.y *= -getRandom();
    }
  }
}
function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {
  applyPath(particle, delta);
  const gravityOptions = particle.gravity, gravityFactor = (gravityOptions == null ? void 0 : gravityOptions.enable) && gravityOptions.inverse ? -identity : identity;
  if (moveDrift && moveSpeed) {
    particle.velocity.x += moveDrift * delta.factor / (moveSpeedFactor * moveSpeed);
  }
  if ((gravityOptions == null ? void 0 : gravityOptions.enable) && moveSpeed) {
    particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (moveSpeedFactor * moveSpeed);
  }
  const decay = particle.moveDecay;
  particle.velocity.multTo(decay);
  const velocity = particle.velocity.mult(moveSpeed);
  if ((gravityOptions == null ? void 0 : gravityOptions.enable) && maxSpeed > minVelocity2 && (!gravityOptions.inverse && velocity.y >= minVelocity2 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= minVelocity2 && velocity.y <= -maxSpeed)) {
    velocity.y = gravityFactor * maxSpeed;
    if (moveSpeed) {
      particle.velocity.y = velocity.y / moveSpeed;
    }
  }
  const zIndexOptions = particle.options.zIndex, zVelocityFactor = (identity - particle.zIndexFactor) ** zIndexOptions.velocityRate;
  velocity.multTo(zVelocityFactor);
  const { position } = particle;
  position.addTo(velocity);
  if (moveOptions.vibrate) {
    position.x += Math.sin(position.x * Math.cos(position.y));
    position.y += Math.cos(position.y * Math.sin(position.x));
  }
}
function spin(particle, moveSpeed) {
  const container = particle.container;
  if (!particle.spin) {
    return;
  }
  const spinClockwise = particle.spin.direction === RotateDirection.clockwise, updateFunc = {
    x: spinClockwise ? Math.cos : Math.sin,
    y: spinClockwise ? Math.sin : Math.cos
  };
  particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);
  particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);
  particle.spin.radius += particle.spin.acceleration;
  const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height), halfMaxSize = maxCanvasSize * half10;
  if (particle.spin.radius > halfMaxSize) {
    particle.spin.radius = halfMaxSize;
    particle.spin.acceleration *= -identity;
  } else if (particle.spin.radius < minSpinRadius) {
    particle.spin.radius = minSpinRadius;
    particle.spin.acceleration *= -identity;
  }
  particle.spin.angle += moveSpeed * spinFactor * (identity - particle.spin.radius / maxCanvasSize);
}
function applyPath(particle, delta) {
  var _a;
  const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;
  if (!pathEnabled) {
    return;
  }
  if (particle.lastPathTime <= particle.pathDelay) {
    particle.lastPathTime += delta.value;
    return;
  }
  const path = (_a = particle.pathGenerator) == null ? void 0 : _a.generate(particle, delta);
  if (path) {
    particle.velocity.addTo(path);
  }
  if (pathOptions.clamp) {
    particle.velocity.x = clamp(particle.velocity.x, -identity, identity);
    particle.velocity.y = clamp(particle.velocity.y, -identity, identity);
  }
  particle.lastPathTime -= particle.pathDelay;
}
function getProximitySpeedFactor(particle) {
  return particle.slow.inRange ? particle.slow.factor : identity;
}
function initSpin(particle) {
  const container = particle.container, options = particle.options, spinOptions = options.move.spin;
  if (!spinOptions.enable) {
    return;
  }
  const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinFactor2 = 0.01, spinCenter = {
    x: spinPos.x * spinFactor2 * container.canvas.size.width,
    y: spinPos.y * spinFactor2 * container.canvas.size.height
  }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);
  particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;
  particle.spin = {
    center: spinCenter,
    direction: particle.velocity.x >= minVelocity2 ? RotateDirection.clockwise : RotateDirection.counterClockwise,
    angle: getRandom() * doublePI7,
    radius: distance,
    acceleration: particle.retina.spinAcceleration
  };
}

// node_modules/@tsparticles/move-base/browser/BaseMover.js
var diffFactor = 2;
var defaultSizeFactor = 1;
var defaultDeltaFactor = 1;
var BaseMover = class {
  init(particle) {
    const options = particle.options, gravityOptions = options.move.gravity;
    particle.gravity = {
      enable: gravityOptions.enable,
      acceleration: getRangeValue(gravityOptions.acceleration),
      inverse: gravityOptions.inverse
    };
    initSpin(particle);
  }
  isEnabled(particle) {
    return !particle.destroyed && particle.options.move.enable;
  }
  move(particle, delta) {
    var _a, _b;
    const particleOptions = particle.options, moveOptions = particleOptions.move;
    if (!moveOptions.enable) {
      return;
    }
    const container = particle.container, pxRatio = container.retina.pixelRatio;
    (_a = particle.retina).moveSpeed ?? (_a.moveSpeed = getRangeValue(moveOptions.speed) * pxRatio);
    (_b = particle.retina).moveDrift ?? (_b.moveDrift = getRangeValue(particle.options.move.drift) * pxRatio);
    const slowFactor = getProximitySpeedFactor(particle), baseSpeed = particle.retina.moveSpeed * container.retina.reduceFactor, moveDrift = particle.retina.moveDrift, maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : defaultSizeFactor, deltaFactor = delta.factor || defaultDeltaFactor, moveSpeed = baseSpeed * sizeFactor * slowFactor * deltaFactor / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;
    if (moveOptions.spin.enable) {
      spin(particle, moveSpeed);
    } else {
      move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);
    }
    applyDistance(particle);
  }
};

// node_modules/@tsparticles/move-base/browser/index.js
async function loadBaseMover(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addMover("base", () => {
    return Promise.resolve(new BaseMover());
  }, refresh);
}

// node_modules/@tsparticles/shape-circle/browser/Utils.js
var double11 = 2;
var doublePI8 = Math.PI * double11;
var minAngle3 = 0;
var origin5 = { x: 0, y: 0 };
function drawCircle(data) {
  const { context, particle, radius } = data;
  if (!particle.circleRange) {
    particle.circleRange = { min: minAngle3, max: doublePI8 };
  }
  const circleRange = particle.circleRange;
  context.arc(origin5.x, origin5.y, radius, circleRange.min, circleRange.max, false);
}

// node_modules/@tsparticles/shape-circle/browser/CircleDrawer.js
var sides2 = 12;
var maxAngle3 = 360;
var minAngle4 = 0;
var CircleDrawer = class {
  constructor() {
    this.validTypes = ["circle"];
  }
  draw(data) {
    drawCircle(data);
  }
  getSidesCount() {
    return sides2;
  }
  particleInit(container, particle) {
    const shapeData = particle.shapeData, angle = (shapeData == null ? void 0 : shapeData.angle) ?? {
      max: maxAngle3,
      min: minAngle4
    };
    particle.circleRange = !isObject(angle) ? {
      min: minAngle4,
      max: degToRad(angle)
    } : { min: degToRad(angle.min), max: degToRad(angle.max) };
  }
};

// node_modules/@tsparticles/shape-circle/browser/index.js
async function loadCircleShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new CircleDrawer(), refresh);
}

// node_modules/@tsparticles/updater-color/browser/ColorUpdater.js
var ColorUpdater = class {
  constructor(container, engine) {
    this._container = container;
    this._engine = engine;
  }
  init(particle) {
    const hslColor = rangeColorToHsl(this._engine, particle.options.color, particle.id, particle.options.reduceDuplicates);
    if (hslColor) {
      particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this._container.retina.reduceFactor);
    }
  }
  isEnabled(particle) {
    const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;
    return !particle.destroyed && !particle.spawning && ((color == null ? void 0 : color.h.value) !== void 0 && hAnimation.enable || (color == null ? void 0 : color.s.value) !== void 0 && sAnimation.enable || (color == null ? void 0 : color.l.value) !== void 0 && lAnimation.enable);
  }
  update(particle, delta) {
    updateColor(particle.color, delta);
  }
};

// node_modules/@tsparticles/updater-color/browser/index.js
async function loadColorUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("color", (container) => {
    return Promise.resolve(new ColorUpdater(container, engine));
  }, refresh);
}

// node_modules/@tsparticles/plugin-hex-color/browser/HexColorManager.js
var RgbIndexes;
(function(RgbIndexes3) {
  RgbIndexes3[RgbIndexes3["r"] = 1] = "r";
  RgbIndexes3[RgbIndexes3["g"] = 2] = "g";
  RgbIndexes3[RgbIndexes3["b"] = 3] = "b";
  RgbIndexes3[RgbIndexes3["a"] = 4] = "a";
})(RgbIndexes || (RgbIndexes = {}));
var shorthandHexRegex = /^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i;
var hexRegex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;
var hexRadix = 16;
var defaultAlpha2 = 1;
var alphaFactor = 255;
var HexColorManager = class {
  constructor() {
    this.key = "hex";
    this.stringPrefix = "#";
  }
  handleColor(color) {
    return this._parseString(color.value);
  }
  handleRangeColor(color) {
    return this._parseString(color.value);
  }
  parseString(input) {
    return this._parseString(input);
  }
  _parseString(hexColor) {
    if (typeof hexColor !== "string") {
      return;
    }
    if (!(hexColor == null ? void 0 : hexColor.startsWith(this.stringPrefix))) {
      return;
    }
    const hexFixed = hexColor.replace(shorthandHexRegex, (_, r, g, b, a) => {
      return r + r + g + g + b + b + (a !== void 0 ? a + a : "");
    }), result = hexRegex.exec(hexFixed);
    return result ? {
      a: result[RgbIndexes.a] !== void 0 ? parseInt(result[RgbIndexes.a], hexRadix) / alphaFactor : defaultAlpha2,
      b: parseInt(result[RgbIndexes.b], hexRadix),
      g: parseInt(result[RgbIndexes.g], hexRadix),
      r: parseInt(result[RgbIndexes.r], hexRadix)
    } : void 0;
  }
};

// node_modules/@tsparticles/plugin-hex-color/browser/index.js
async function loadHexColorPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addColorManager(new HexColorManager(), refresh);
}

// node_modules/@tsparticles/plugin-hsl-color/browser/HslColorManager.js
var HslIndexes;
(function(HslIndexes2) {
  HslIndexes2[HslIndexes2["h"] = 1] = "h";
  HslIndexes2[HslIndexes2["s"] = 2] = "s";
  HslIndexes2[HslIndexes2["l"] = 3] = "l";
  HslIndexes2[HslIndexes2["a"] = 5] = "a";
})(HslIndexes || (HslIndexes = {}));
var HslColorManager = class {
  constructor() {
    this.key = "hsl";
    this.stringPrefix = "hsl";
  }
  handleColor(color) {
    const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;
    if (hslColor.h !== void 0 && hslColor.s !== void 0 && hslColor.l !== void 0) {
      return hslToRgb(hslColor);
    }
  }
  handleRangeColor(color) {
    const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;
    if (hslColor.h !== void 0 && hslColor.l !== void 0) {
      return hslToRgb({
        h: getRangeValue(hslColor.h),
        l: getRangeValue(hslColor.l),
        s: getRangeValue(hslColor.s)
      });
    }
  }
  parseString(input) {
    if (!input.startsWith("hsl")) {
      return;
    }
    const regex = /hsla?\(\s*(\d+)\s*[\s,]\s*(\d+)%\s*[\s,]\s*(\d+)%\s*([\s,]\s*(0|1|0?\.\d+|(\d{1,3})%)\s*)?\)/i, result = regex.exec(input), minLength = 4, defaultAlpha4 = 1, radix = 10;
    return result ? hslaToRgba({
      a: result.length > minLength ? parseAlpha(result[HslIndexes.a]) : defaultAlpha4,
      h: parseInt(result[HslIndexes.h], radix),
      l: parseInt(result[HslIndexes.l], radix),
      s: parseInt(result[HslIndexes.s], radix)
    }) : void 0;
  }
};

// node_modules/@tsparticles/plugin-hsl-color/browser/index.js
async function loadHslColorPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addColorManager(new HslColorManager(), refresh);
}

// node_modules/@tsparticles/updater-opacity/browser/OpacityUpdater.js
var OpacityUpdater = class {
  constructor(container) {
    this.container = container;
  }
  init(particle) {
    const opacityOptions = particle.options.opacity, pxRatio = 1;
    particle.opacity = initParticleNumericAnimationValue(opacityOptions, pxRatio);
    const opacityAnimation = opacityOptions.animation;
    if (opacityAnimation.enable) {
      particle.opacity.velocity = getRangeValue(opacityAnimation.speed) / percentDenominator * this.container.retina.reduceFactor;
      if (!opacityAnimation.sync) {
        particle.opacity.velocity *= getRandom();
      }
    }
  }
  isEnabled(particle) {
    const none2 = 0;
    return !particle.destroyed && !particle.spawning && !!particle.opacity && particle.opacity.enable && ((particle.opacity.maxLoops ?? none2) <= none2 || (particle.opacity.maxLoops ?? none2) > none2 && (particle.opacity.loops ?? none2) < (particle.opacity.maxLoops ?? none2));
  }
  reset(particle) {
    if (particle.opacity) {
      particle.opacity.time = 0;
      particle.opacity.loops = 0;
    }
  }
  update(particle, delta) {
    if (!this.isEnabled(particle) || !particle.opacity) {
      return;
    }
    updateAnimation(particle, particle.opacity, true, particle.options.opacity.animation.destroy, delta);
  }
};

// node_modules/@tsparticles/updater-opacity/browser/index.js
async function loadOpacityUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("opacity", (container) => {
    return Promise.resolve(new OpacityUpdater(container));
  }, refresh);
}

// node_modules/@tsparticles/updater-out-modes/browser/Utils.js
var minVelocity3 = 0;
var boundsMin = 0;
function bounceHorizontal(data) {
  if (data.outMode !== OutMode.bounce && data.outMode !== OutMode.split || data.direction !== OutModeDirection.left && data.direction !== OutModeDirection.right) {
    return;
  }
  if (data.bounds.right < boundsMin && data.direction === OutModeDirection.left) {
    data.particle.position.x = data.size + data.offset.x;
  } else if (data.bounds.left > data.canvasSize.width && data.direction === OutModeDirection.right) {
    data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;
  }
  const velocity = data.particle.velocity.x;
  let bounced = false;
  if (data.direction === OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > minVelocity3 || data.direction === OutModeDirection.left && data.bounds.left <= boundsMin && velocity < minVelocity3) {
    const newVelocity = getRangeValue(data.particle.options.bounce.horizontal.value);
    data.particle.velocity.x *= -newVelocity;
    bounced = true;
  }
  if (!bounced) {
    return;
  }
  const minPos = data.offset.x + data.size;
  if (data.bounds.right >= data.canvasSize.width && data.direction === OutModeDirection.right) {
    data.particle.position.x = data.canvasSize.width - minPos;
  } else if (data.bounds.left <= boundsMin && data.direction === OutModeDirection.left) {
    data.particle.position.x = minPos;
  }
  if (data.outMode === OutMode.split) {
    data.particle.destroy();
  }
}
function bounceVertical(data) {
  if (data.outMode !== OutMode.bounce && data.outMode !== OutMode.split || data.direction !== OutModeDirection.bottom && data.direction !== OutModeDirection.top) {
    return;
  }
  if (data.bounds.bottom < boundsMin && data.direction === OutModeDirection.top) {
    data.particle.position.y = data.size + data.offset.y;
  } else if (data.bounds.top > data.canvasSize.height && data.direction === OutModeDirection.bottom) {
    data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;
  }
  const velocity = data.particle.velocity.y;
  let bounced = false;
  if (data.direction === OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > minVelocity3 || data.direction === OutModeDirection.top && data.bounds.top <= boundsMin && velocity < minVelocity3) {
    const newVelocity = getRangeValue(data.particle.options.bounce.vertical.value);
    data.particle.velocity.y *= -newVelocity;
    bounced = true;
  }
  if (!bounced) {
    return;
  }
  const minPos = data.offset.y + data.size;
  if (data.bounds.bottom >= data.canvasSize.height && data.direction === OutModeDirection.bottom) {
    data.particle.position.y = data.canvasSize.height - minPos;
  } else if (data.bounds.top <= boundsMin && data.direction === OutModeDirection.top) {
    data.particle.position.y = minPos;
  }
  if (data.outMode === OutMode.split) {
    data.particle.destroy();
  }
}

// node_modules/@tsparticles/updater-out-modes/browser/BounceOutMode.js
var BounceOutMode = class {
  constructor(container) {
    this.container = container;
    this.modes = [
      OutMode.bounce,
      OutMode.split
    ];
  }
  update(particle, direction, delta, outMode) {
    if (!this.modes.includes(outMode)) {
      return;
    }
    const container = this.container;
    let handled = false;
    for (const plugin of container.plugins.values()) {
      if (plugin.particleBounce !== void 0) {
        handled = plugin.particleBounce(particle, delta, direction);
      }
      if (handled) {
        break;
      }
    }
    if (handled) {
      return;
    }
    const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;
    bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });
    bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });
  }
};

// node_modules/@tsparticles/updater-out-modes/browser/DestroyOutMode.js
var minVelocity4 = 0;
var DestroyOutMode = class {
  constructor(container) {
    this.container = container;
    this.modes = [OutMode.destroy];
  }
  update(particle, direction, _delta, outMode) {
    if (!this.modes.includes(outMode)) {
      return;
    }
    const container = this.container;
    switch (particle.outType) {
      case ParticleOutType.normal:
      case ParticleOutType.outside:
        if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {
          return;
        }
        break;
      case ParticleOutType.inside: {
        const { dx, dy } = getDistances(particle.position, particle.moveCenter), { x: vx, y: vy } = particle.velocity;
        if (vx < minVelocity4 && dx > particle.moveCenter.radius || vy < minVelocity4 && dy > particle.moveCenter.radius || vx >= minVelocity4 && dx < -particle.moveCenter.radius || vy >= minVelocity4 && dy < -particle.moveCenter.radius) {
          return;
        }
        break;
      }
    }
    container.particles.remove(particle, particle.group, true);
  }
};

// node_modules/@tsparticles/updater-out-modes/browser/NoneOutMode.js
var minVelocity5 = 0;
var NoneOutMode = class {
  constructor(container) {
    this.container = container;
    this.modes = [OutMode.none];
  }
  update(particle, direction, delta, outMode) {
    if (!this.modes.includes(outMode)) {
      return;
    }
    if ((particle.options.move.distance.horizontal && (direction === OutModeDirection.left || direction === OutModeDirection.right)) ?? (particle.options.move.distance.vertical && (direction === OutModeDirection.top || direction === OutModeDirection.bottom))) {
      return;
    }
    const gravityOptions = particle.options.move.gravity, container = this.container, canvasSize = container.canvas.size, pRadius = particle.getRadius();
    if (!gravityOptions.enable) {
      if (particle.velocity.y > minVelocity5 && particle.position.y <= canvasSize.height + pRadius || particle.velocity.y < minVelocity5 && particle.position.y >= -pRadius || particle.velocity.x > minVelocity5 && particle.position.x <= canvasSize.width + pRadius || particle.velocity.x < minVelocity5 && particle.position.x >= -pRadius) {
        return;
      }
      if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {
        container.particles.remove(particle);
      }
    } else {
      const position = particle.position;
      if (!gravityOptions.inverse && position.y > canvasSize.height + pRadius && direction === OutModeDirection.bottom || gravityOptions.inverse && position.y < -pRadius && direction === OutModeDirection.top) {
        container.particles.remove(particle);
      }
    }
  }
};

// node_modules/@tsparticles/updater-out-modes/browser/OutOutMode.js
var minVelocity6 = 0;
var minDistance = 0;
var OutOutMode = class {
  constructor(container) {
    this.container = container;
    this.modes = [OutMode.out];
  }
  update(particle, direction, delta, outMode) {
    if (!this.modes.includes(outMode)) {
      return;
    }
    const container = this.container;
    switch (particle.outType) {
      case ParticleOutType.inside: {
        const { x: vx, y: vy } = particle.velocity;
        const circVec = Vector.origin;
        circVec.length = particle.moveCenter.radius;
        circVec.angle = particle.velocity.angle + Math.PI;
        circVec.addTo(Vector.create(particle.moveCenter));
        const { dx, dy } = getDistances(particle.position, circVec);
        if (vx <= minVelocity6 && dx >= minDistance || vy <= minVelocity6 && dy >= minDistance || vx >= minVelocity6 && dx <= minDistance || vy >= minVelocity6 && dy <= minDistance) {
          return;
        }
        particle.position.x = Math.floor(randomInRange({
          min: 0,
          max: container.canvas.size.width
        }));
        particle.position.y = Math.floor(randomInRange({
          min: 0,
          max: container.canvas.size.height
        }));
        const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);
        particle.direction = Math.atan2(-newDy, -newDx);
        particle.velocity.angle = particle.direction;
        break;
      }
      default: {
        if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {
          return;
        }
        switch (particle.outType) {
          case ParticleOutType.outside: {
            particle.position.x = Math.floor(randomInRange({
              min: -particle.moveCenter.radius,
              max: particle.moveCenter.radius
            })) + particle.moveCenter.x;
            particle.position.y = Math.floor(randomInRange({
              min: -particle.moveCenter.radius,
              max: particle.moveCenter.radius
            })) + particle.moveCenter.y;
            const { dx, dy } = getDistances(particle.position, particle.moveCenter);
            if (particle.moveCenter.radius) {
              particle.direction = Math.atan2(dy, dx);
              particle.velocity.angle = particle.direction;
            }
            break;
          }
          case ParticleOutType.normal: {
            const warp = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {
              bottom: canvasSize.height + particle.getRadius() + particle.offset.y,
              left: -particle.getRadius() - particle.offset.x,
              right: canvasSize.width + particle.getRadius() + particle.offset.x,
              top: -particle.getRadius() - particle.offset.y
            }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);
            if (direction === OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {
              particle.position.x = newPos.left;
              particle.initialPosition.x = particle.position.x;
              if (!warp) {
                particle.position.y = getRandom() * canvasSize.height;
                particle.initialPosition.y = particle.position.y;
              }
            } else if (direction === OutModeDirection.left && nextBounds.right < -particle.offset.x) {
              particle.position.x = newPos.right;
              particle.initialPosition.x = particle.position.x;
              if (!warp) {
                particle.position.y = getRandom() * canvasSize.height;
                particle.initialPosition.y = particle.position.y;
              }
            }
            if (direction === OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {
              if (!warp) {
                particle.position.x = getRandom() * canvasSize.width;
                particle.initialPosition.x = particle.position.x;
              }
              particle.position.y = newPos.top;
              particle.initialPosition.y = particle.position.y;
            } else if (direction === OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {
              if (!warp) {
                particle.position.x = getRandom() * canvasSize.width;
                particle.initialPosition.x = particle.position.x;
              }
              particle.position.y = newPos.bottom;
              particle.initialPosition.y = particle.position.y;
            }
            break;
          }
        }
        break;
      }
    }
  }
};

// node_modules/@tsparticles/updater-out-modes/browser/OutOfCanvasUpdater.js
var checkOutMode = (outModes, outMode) => {
  return outModes.default === outMode || outModes.bottom === outMode || outModes.left === outMode || outModes.right === outMode || outModes.top === outMode;
};
var OutOfCanvasUpdater = class {
  constructor(container) {
    this._addUpdaterIfMissing = (particle, outMode, getUpdater) => {
      const outModes = particle.options.move.outModes;
      if (!this.updaters.has(outMode) && checkOutMode(outModes, outMode)) {
        this.updaters.set(outMode, getUpdater(this.container));
      }
    };
    this._updateOutMode = (particle, delta, outMode, direction) => {
      for (const updater of this.updaters.values()) {
        updater.update(particle, direction, delta, outMode);
      }
    };
    this.container = container;
    this.updaters = /* @__PURE__ */ new Map();
  }
  init(particle) {
    this._addUpdaterIfMissing(particle, OutMode.bounce, (container) => new BounceOutMode(container));
    this._addUpdaterIfMissing(particle, OutMode.out, (container) => new OutOutMode(container));
    this._addUpdaterIfMissing(particle, OutMode.destroy, (container) => new DestroyOutMode(container));
    this._addUpdaterIfMissing(particle, OutMode.none, (container) => new NoneOutMode(container));
  }
  isEnabled(particle) {
    return !particle.destroyed && !particle.spawning;
  }
  update(particle, delta) {
    const outModes = particle.options.move.outModes;
    this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, OutModeDirection.bottom);
    this._updateOutMode(particle, delta, outModes.left ?? outModes.default, OutModeDirection.left);
    this._updateOutMode(particle, delta, outModes.right ?? outModes.default, OutModeDirection.right);
    this._updateOutMode(particle, delta, outModes.top ?? outModes.default, OutModeDirection.top);
  }
};

// node_modules/@tsparticles/updater-out-modes/browser/index.js
async function loadOutModesUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("outModes", (container) => {
    return Promise.resolve(new OutOfCanvasUpdater(container));
  }, refresh);
}

// node_modules/@tsparticles/plugin-rgb-color/browser/RgbColorManager.js
var RgbIndexes2;
(function(RgbIndexes3) {
  RgbIndexes3[RgbIndexes3["r"] = 1] = "r";
  RgbIndexes3[RgbIndexes3["g"] = 2] = "g";
  RgbIndexes3[RgbIndexes3["b"] = 3] = "b";
  RgbIndexes3[RgbIndexes3["a"] = 5] = "a";
})(RgbIndexes2 || (RgbIndexes2 = {}));
var RgbColorManager = class {
  constructor() {
    this.key = "rgb";
    this.stringPrefix = "rgb";
  }
  handleColor(color) {
    const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;
    if (rgbColor.r !== void 0) {
      return rgbColor;
    }
  }
  handleRangeColor(color) {
    const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;
    if (rgbColor.r !== void 0) {
      return {
        r: getRangeValue(rgbColor.r),
        g: getRangeValue(rgbColor.g),
        b: getRangeValue(rgbColor.b)
      };
    }
  }
  parseString(input) {
    if (!input.startsWith(this.stringPrefix)) {
      return;
    }
    const regex = /rgba?\(\s*(\d{1,3})\s*[\s,]\s*(\d{1,3})\s*[\s,]\s*(\d{1,3})\s*([\s,]\s*(0|1|0?\.\d+|(\d{1,3})%)\s*)?\)/i, result = regex.exec(input), radix = 10, minLength = 4, defaultAlpha4 = 1;
    return result ? {
      a: result.length > minLength ? parseAlpha(result[RgbIndexes2.a]) : defaultAlpha4,
      b: parseInt(result[RgbIndexes2.b], radix),
      g: parseInt(result[RgbIndexes2.g], radix),
      r: parseInt(result[RgbIndexes2.r], radix)
    } : void 0;
  }
};

// node_modules/@tsparticles/plugin-rgb-color/browser/index.js
async function loadRgbColorPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addColorManager(new RgbColorManager(), refresh);
}

// node_modules/@tsparticles/updater-size/browser/SizeUpdater.js
var minLoops = 0;
var SizeUpdater = class {
  init(particle) {
    const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;
    if (sizeAnimation.enable) {
      particle.size.velocity = (particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / percentDenominator * container.retina.reduceFactor;
      if (!sizeAnimation.sync) {
        particle.size.velocity *= getRandom();
      }
    }
  }
  isEnabled(particle) {
    return !particle.destroyed && !particle.spawning && particle.size.enable && ((particle.size.maxLoops ?? minLoops) <= minLoops || (particle.size.maxLoops ?? minLoops) > minLoops && (particle.size.loops ?? minLoops) < (particle.size.maxLoops ?? minLoops));
  }
  reset(particle) {
    particle.size.loops = minLoops;
  }
  update(particle, delta) {
    if (!this.isEnabled(particle)) {
      return;
    }
    updateAnimation(particle, particle.size, true, particle.options.size.animation.destroy, delta);
  }
};

// node_modules/@tsparticles/updater-size/browser/index.js
async function loadSizeUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("size", () => {
    return Promise.resolve(new SizeUpdater());
  }, refresh);
}

// node_modules/@tsparticles/basic/browser/index.js
async function loadBasic(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await loadHexColorPlugin(engine, false);
  await loadHslColorPlugin(engine, false);
  await loadRgbColorPlugin(engine, false);
  await loadBaseMover(engine, false);
  await loadCircleShape(engine, false);
  await loadColorUpdater(engine, false);
  await loadOpacityUpdater(engine, false);
  await loadOutModesUpdater(engine, false);
  await loadSizeUpdater(engine, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/plugin-easing-quad/browser/index.js
async function loadEasingQuadPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEasing(EasingType.easeInQuad, (value) => value ** 2, false);
  await engine.addEasing(EasingType.easeOutQuad, (value) => 1 - (1 - value) ** 2, false);
  await engine.addEasing(EasingType.easeInOutQuad, (value) => value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2, false);
  await engine.refresh(refresh);
}

// node_modules/@tsparticles/shape-emoji/browser/Utils.js
function drawEmoji(data, image) {
  const { context, opacity } = data, half26 = 0.5, previousAlpha = context.globalAlpha;
  if (!image) {
    return;
  }
  const diameter = image.width, radius = diameter * half26;
  context.globalAlpha = opacity;
  context.drawImage(image, -radius, -radius, diameter, diameter);
  context.globalAlpha = previousAlpha;
}

// node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js
var defaultFont = '"Twemoji Mozilla", Apple Color Emoji, "Segoe UI Emoji", "Noto Color Emoji", "EmojiOne Color"';
var noPadding = 0;
var EmojiDrawer = class {
  constructor() {
    this.validTypes = ["emoji"];
    this._emojiShapeDict = /* @__PURE__ */ new Map();
  }
  destroy() {
    for (const [key, data] of this._emojiShapeDict) {
      if (data instanceof ImageBitmap) {
        data == null ? void 0 : data.close();
      }
      this._emojiShapeDict.delete(key);
    }
  }
  draw(data) {
    const key = data.particle.emojiDataKey;
    if (!key) {
      return;
    }
    const image = this._emojiShapeDict.get(key);
    if (!image) {
      return;
    }
    drawEmoji(data, image);
  }
  async init(container) {
    const options = container.actualOptions, { validTypes } = this;
    if (!validTypes.find((t) => isInArray(t, options.particles.shape.type))) {
      return;
    }
    const promises = [loadFont(defaultFont)], shapeOptions = validTypes.map((t) => options.particles.shape.options[t]).find((t) => !!t);
    if (shapeOptions) {
      executeOnSingleOrMultiple(shapeOptions, (shape) => {
        if (shape.font) {
          promises.push(loadFont(shape.font));
        }
      });
    }
    await Promise.all(promises);
  }
  particleDestroy(particle) {
    particle.emojiDataKey = void 0;
  }
  particleInit(_container, particle) {
    const double36 = 2, shapeData = particle.shapeData;
    if (!(shapeData == null ? void 0 : shapeData.value)) {
      return;
    }
    const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData);
    if (!emoji) {
      return;
    }
    const emojiOptions = typeof emoji === "string" ? {
      font: shapeData.font ?? defaultFont,
      padding: shapeData.padding ?? noPadding,
      value: emoji
    } : {
      font: defaultFont,
      padding: noPadding,
      ...shapeData,
      ...emoji
    }, font = emojiOptions.font, value = emojiOptions.value;
    const key = `${value}_${font}`;
    if (this._emojiShapeDict.has(key)) {
      particle.emojiDataKey = key;
      return;
    }
    const padding = emojiOptions.padding * double36, maxSize = getRangeMax(particle.size.value), fullSize = maxSize + padding, canvasSize = fullSize * double36;
    let image;
    if (typeof OffscreenCanvas !== "undefined") {
      const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext("2d");
      if (!context) {
        return;
      }
      context.font = `400 ${maxSize * double36}px ${font}`;
      context.textBaseline = "middle";
      context.textAlign = "center";
      context.fillText(value, fullSize, fullSize);
      image = canvas.transferToImageBitmap();
    } else {
      const canvas = document.createElement("canvas");
      canvas.width = canvasSize;
      canvas.height = canvasSize;
      const context = canvas.getContext("2d");
      if (!context) {
        return;
      }
      context.font = `400 ${maxSize * double36}px ${font}`;
      context.textBaseline = "middle";
      context.textAlign = "center";
      context.fillText(value, fullSize, fullSize);
      image = canvas;
    }
    this._emojiShapeDict.set(key, image);
    particle.emojiDataKey = key;
  }
};

// node_modules/@tsparticles/shape-emoji/browser/index.js
async function loadEmojiShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new EmojiDrawer(), refresh);
}

// node_modules/@tsparticles/interaction-external-attract/browser/Utils.js
var minFactor = 1;
var identity2 = 1;
var minRadius2 = 0;
function processAttract(engine, container, position, attractRadius, area, queryCb) {
  const attractOptions = container.actualOptions.interactivity.modes.attract;
  if (!attractOptions) {
    return;
  }
  const query = container.particles.quadTree.query(area, queryCb);
  for (const particle of query) {
    const { dx, dy, distance } = getDistances(particle.position, position), velocity = attractOptions.speed * attractOptions.factor, attractFactor2 = clamp(engine.getEasing(attractOptions.easing)(identity2 - distance / attractRadius) * velocity, minFactor, attractOptions.maxSpeed), normVec = Vector.create(!distance ? velocity : dx / distance * attractFactor2, !distance ? velocity : dy / distance * attractFactor2);
    particle.position.subFrom(normVec);
  }
}
function clickAttract(engine, container, enabledCb) {
  if (!container.attract) {
    container.attract = { particles: [] };
  }
  const { attract } = container;
  if (!attract.finish) {
    if (!attract.count) {
      attract.count = 0;
    }
    attract.count++;
    if (attract.count === container.particles.count) {
      attract.finish = true;
    }
  }
  if (attract.clicking) {
    const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;
    if (!attractRadius || attractRadius < minRadius2 || !mousePos) {
      return;
    }
    processAttract(engine, container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));
  } else if (attract.clicking === false) {
    attract.particles = [];
  }
}
function hoverAttract(engine, container, enabledCb) {
  const mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;
  if (!attractRadius || attractRadius < minRadius2 || !mousePos) {
    return;
  }
  processAttract(engine, container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));
}

// node_modules/@tsparticles/interaction-external-attract/browser/Options/Classes/Attract.js
var Attract = class {
  constructor() {
    this.distance = 200;
    this.duration = 0.4;
    this.easing = EasingType.easeOutQuad;
    this.factor = 1;
    this.maxSpeed = 50;
    this.speed = 1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.distance !== void 0) {
      this.distance = data.distance;
    }
    if (data.duration !== void 0) {
      this.duration = data.duration;
    }
    if (data.easing !== void 0) {
      this.easing = data.easing;
    }
    if (data.factor !== void 0) {
      this.factor = data.factor;
    }
    if (data.maxSpeed !== void 0) {
      this.maxSpeed = data.maxSpeed;
    }
    if (data.speed !== void 0) {
      this.speed = data.speed;
    }
  }
};

// node_modules/@tsparticles/interaction-external-attract/browser/Attractor.js
var attractMode = "attract";
var Attractor = class extends ExternalInteractorBase {
  constructor(engine, container) {
    super(container);
    this._engine = engine;
    if (!container.attract) {
      container.attract = { particles: [] };
    }
    this.handleClickMode = (mode) => {
      const options = this.container.actualOptions, attract = options.interactivity.modes.attract;
      if (!attract || mode !== attractMode) {
        return;
      }
      if (!container.attract) {
        container.attract = { particles: [] };
      }
      container.attract.clicking = true;
      container.attract.count = 0;
      for (const particle of container.attract.particles) {
        if (!this.isEnabled(particle)) {
          continue;
        }
        particle.velocity.setTo(particle.initialVelocity);
      }
      container.attract.particles = [];
      container.attract.finish = false;
      setTimeout(() => {
        if (container.destroyed) {
          return;
        }
        if (!container.attract) {
          container.attract = { particles: [] };
        }
        container.attract.clicking = false;
      }, attract.duration * millisecondsToSeconds);
    };
  }
  clear() {
  }
  init() {
    const container = this.container, attract = container.actualOptions.interactivity.modes.attract;
    if (!attract) {
      return;
    }
    container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;
  }
  interact() {
    const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, { enable: hoverEnabled, mode: hoverMode } = events.onHover, { enable: clickEnabled, mode: clickMode } = events.onClick;
    if (mouseMoveStatus && hoverEnabled && isInArray(attractMode, hoverMode)) {
      hoverAttract(this._engine, this.container, (p) => this.isEnabled(p));
    } else if (clickEnabled && isInArray(attractMode, clickMode)) {
      clickAttract(this._engine, this.container, (p) => this.isEnabled(p));
    }
  }
  isEnabled(particle) {
    const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((particle == null ? void 0 : particle.interactivity) ?? options.interactivity).events;
    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {
      return false;
    }
    const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;
    return isInArray(attractMode, hoverMode) || isInArray(attractMode, clickMode);
  }
  loadModeOptions(options, ...sources) {
    if (!options.attract) {
      options.attract = new Attract();
    }
    for (const source of sources) {
      options.attract.load(source == null ? void 0 : source.attract);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-attract/browser/index.js
async function loadExternalAttractInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalAttract", (container) => {
    return Promise.resolve(new Attractor(engine, container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-bounce/browser/Utils.js
var squareExp3 = 2;
var half11 = 0.5;
var halfPI = Math.PI * half11;
var double12 = 2;
var toleranceFactor = 10;
var minRadius3 = 0;
function processBounce(container, position, radius, area, enabledCb) {
  const query = container.particles.quadTree.query(area, enabledCb);
  for (const particle of query) {
    if (area instanceof Circle) {
      circleBounce(circleBounceDataFromParticle(particle), {
        position,
        radius,
        mass: radius ** squareExp3 * halfPI,
        velocity: Vector.origin,
        factor: Vector.origin
      });
    } else if (area instanceof Rectangle) {
      rectBounce(particle, calculateBounds(position, radius));
    }
  }
}
function singleSelectorBounce(container, selector, div, bounceCb) {
  const query = document.querySelectorAll(selector);
  if (!query.length) {
    return;
  }
  query.forEach((item) => {
    const elem = item, pxRatio = container.retina.pixelRatio, pos = {
      x: (elem.offsetLeft + elem.offsetWidth * half11) * pxRatio,
      y: (elem.offsetTop + elem.offsetHeight * half11) * pxRatio
    }, radius = elem.offsetWidth * half11 * pxRatio, tolerance = toleranceFactor * pxRatio, area = div.type === DivType.circle ? new Circle(pos.x, pos.y, radius + tolerance) : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * double12, elem.offsetHeight * pxRatio + tolerance * double12);
    bounceCb(pos, radius, area);
  });
}
function divBounce(container, divs, bounceMode2, enabledCb) {
  divModeExecute(bounceMode2, divs, (selector, div) => singleSelectorBounce(container, selector, div, (pos, radius, area) => processBounce(container, pos, radius, area, enabledCb)));
}
function mouseBounce(container, enabledCb) {
  const pxRatio = container.retina.pixelRatio, tolerance = toleranceFactor * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;
  if (!radius || radius < minRadius3 || !mousePos) {
    return;
  }
  processBounce(container, mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance), enabledCb);
}

// node_modules/@tsparticles/interaction-external-bounce/browser/Options/Classes/Bounce.js
var Bounce = class {
  constructor() {
    this.distance = 200;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.distance !== void 0) {
      this.distance = data.distance;
    }
  }
};

// node_modules/@tsparticles/interaction-external-bounce/browser/Bouncer.js
var bounceMode = "bounce";
var Bouncer = class extends ExternalInteractorBase {
  constructor(container) {
    super(container);
  }
  clear() {
  }
  init() {
    const container = this.container, bounce2 = container.actualOptions.interactivity.modes.bounce;
    if (!bounce2) {
      return;
    }
    container.retina.bounceModeDistance = bounce2.distance * container.retina.pixelRatio;
  }
  interact() {
    const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;
    if (mouseMoveStatus && hoverEnabled && isInArray(bounceMode, hoverMode)) {
      mouseBounce(this.container, (p) => this.isEnabled(p));
    } else {
      divBounce(this.container, divs, bounceMode, (p) => this.isEnabled(p));
    }
  }
  isEnabled(particle) {
    const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((particle == null ? void 0 : particle.interactivity) ?? options.interactivity).events, divs = events.onDiv;
    return !!mouse.position && events.onHover.enable && isInArray(bounceMode, events.onHover.mode) || isDivModeEnabled(bounceMode, divs);
  }
  loadModeOptions(options, ...sources) {
    if (!options.bounce) {
      options.bounce = new Bounce();
    }
    for (const source of sources) {
      options.bounce.load(source == null ? void 0 : source.bounce);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-bounce/browser/index.js
async function loadExternalBounceInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalBounce", (container) => {
    return Promise.resolve(new Bouncer(container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleBase.js
var BubbleBase = class {
  constructor() {
    this.distance = 200;
    this.duration = 0.4;
    this.mix = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.distance !== void 0) {
      this.distance = data.distance;
    }
    if (data.duration !== void 0) {
      this.duration = data.duration;
    }
    if (data.mix !== void 0) {
      this.mix = data.mix;
    }
    if (data.opacity !== void 0) {
      this.opacity = data.opacity;
    }
    if (data.color !== void 0) {
      const sourceColor = isArray(this.color) ? void 0 : this.color;
      this.color = executeOnSingleOrMultiple(data.color, (color) => {
        return OptionsColor.create(sourceColor, color);
      });
    }
    if (data.size !== void 0) {
      this.size = data.size;
    }
  }
};

// node_modules/@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleDiv.js
var BubbleDiv = class extends BubbleBase {
  constructor() {
    super();
    this.selectors = [];
  }
  load(data) {
    super.load(data);
    if (isNull(data)) {
      return;
    }
    if (data.selectors !== void 0) {
      this.selectors = data.selectors;
    }
  }
};

// node_modules/@tsparticles/interaction-external-bubble/browser/Options/Classes/Bubble.js
var Bubble = class extends BubbleBase {
  load(data) {
    super.load(data);
    if (isNull(data)) {
      return;
    }
    this.divs = executeOnSingleOrMultiple(data.divs, (div) => {
      const tmp = new BubbleDiv();
      tmp.load(div);
      return tmp;
    });
  }
};

// node_modules/@tsparticles/interaction-external-bubble/browser/Enums.js
var ProcessBubbleType;
(function(ProcessBubbleType2) {
  ProcessBubbleType2["color"] = "color";
  ProcessBubbleType2["opacity"] = "opacity";
  ProcessBubbleType2["size"] = "size";
})(ProcessBubbleType || (ProcessBubbleType = {}));

// node_modules/@tsparticles/interaction-external-bubble/browser/Utils.js
function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {
  if (modeValue >= optionsValue) {
    const value = particleValue + (modeValue - optionsValue) * ratio;
    return clamp(value, particleValue, modeValue);
  } else if (modeValue < optionsValue) {
    const value = particleValue - (optionsValue - modeValue) * ratio;
    return clamp(value, modeValue, particleValue);
  }
}

// node_modules/@tsparticles/interaction-external-bubble/browser/Bubbler.js
var bubbleMode = "bubble";
var minDistance2 = 0;
var defaultClickTime = 0;
var double13 = 2;
var defaultOpacity = 1;
var ratioOffset = 1;
var defaultBubbleValue = 0;
var minRatio = 0;
var half12 = 0.5;
var defaultRatio = 1;
var Bubbler = class extends ExternalInteractorBase {
  constructor(container, engine) {
    super(container);
    this._clickBubble = () => {
      var _a;
      const container2 = this.container, options = container2.actualOptions, mouseClickPos = container2.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;
      if (!bubbleOptions || !mouseClickPos) {
        return;
      }
      if (!container2.bubble) {
        container2.bubble = {};
      }
      const distance = container2.retina.bubbleModeDistance;
      if (!distance || distance < minDistance2) {
        return;
      }
      const query = container2.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container2;
      for (const particle of query) {
        if (!bubble.clicking) {
          continue;
        }
        particle.bubble.inRange = !bubble.durationEnd;
        const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = ((/* @__PURE__ */ new Date()).getTime() - (container2.interactivity.mouse.clickTime ?? defaultClickTime)) / millisecondsToSeconds;
        if (timeSpent > bubbleOptions.duration) {
          bubble.durationEnd = true;
        }
        if (timeSpent > bubbleOptions.duration * double13) {
          bubble.clicking = false;
          bubble.durationEnd = false;
        }
        const sizeData = {
          bubbleObj: {
            optValue: container2.retina.bubbleModeSize,
            value: particle.bubble.radius
          },
          particlesObj: {
            optValue: getRangeMax(particle.options.size.value) * container2.retina.pixelRatio,
            value: particle.size.value
          },
          type: ProcessBubbleType.size
        };
        this._process(particle, distMouse, timeSpent, sizeData);
        const opacityData = {
          bubbleObj: {
            optValue: bubbleOptions.opacity,
            value: particle.bubble.opacity
          },
          particlesObj: {
            optValue: getRangeMax(particle.options.opacity.value),
            value: ((_a = particle.opacity) == null ? void 0 : _a.value) ?? defaultOpacity
          },
          type: ProcessBubbleType.opacity
        };
        this._process(particle, distMouse, timeSpent, opacityData);
        if (!bubble.durationEnd && distMouse <= distance) {
          this._hoverBubbleColor(particle, distMouse);
        } else {
          delete particle.bubble.color;
        }
      }
    };
    this._hoverBubble = () => {
      const container2 = this.container, mousePos = container2.interactivity.mouse.position, distance = container2.retina.bubbleModeDistance;
      if (!distance || distance < minDistance2 || !mousePos) {
        return;
      }
      const query = container2.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));
      for (const particle of query) {
        particle.bubble.inRange = true;
        const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = ratioOffset - pointDistance / distance;
        if (pointDistance <= distance) {
          if (ratio >= minRatio && container2.interactivity.status === mouseMoveEvent) {
            this._hoverBubbleSize(particle, ratio);
            this._hoverBubbleOpacity(particle, ratio);
            this._hoverBubbleColor(particle, ratio);
          }
        } else {
          this.reset(particle);
        }
        if (container2.interactivity.status === mouseLeaveEvent) {
          this.reset(particle);
        }
      }
    };
    this._hoverBubbleColor = (particle, ratio, divBubble) => {
      const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;
      if (!bubbleOptions) {
        return;
      }
      if (!particle.bubble.finalColor) {
        const modeColor = bubbleOptions.color;
        if (!modeColor) {
          return;
        }
        const bubbleColor = itemFromSingleOrMultiple(modeColor);
        particle.bubble.finalColor = rangeColorToHsl(this._engine, bubbleColor);
      }
      if (!particle.bubble.finalColor) {
        return;
      }
      if (bubbleOptions.mix) {
        particle.bubble.color = void 0;
        const pColor = particle.getFillColor();
        particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, ratioOffset - ratio, ratio)) : particle.bubble.finalColor;
      } else {
        particle.bubble.color = particle.bubble.finalColor;
      }
    };
    this._hoverBubbleOpacity = (particle, ratio, divBubble) => {
      var _a, _b;
      const container2 = this.container, options = container2.actualOptions, modeOpacity = (divBubble == null ? void 0 : divBubble.opacity) ?? ((_a = options.interactivity.modes.bubble) == null ? void 0 : _a.opacity);
      if (!modeOpacity) {
        return;
      }
      const optOpacity = particle.options.opacity.value, pOpacity = ((_b = particle.opacity) == null ? void 0 : _b.value) ?? defaultOpacity, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);
      if (opacity !== void 0) {
        particle.bubble.opacity = opacity;
      }
    };
    this._hoverBubbleSize = (particle, ratio, divBubble) => {
      const container2 = this.container, modeSize = (divBubble == null ? void 0 : divBubble.size) ? divBubble.size * container2.retina.pixelRatio : container2.retina.bubbleModeSize;
      if (modeSize === void 0) {
        return;
      }
      const optSize = getRangeMax(particle.options.size.value) * container2.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);
      if (size !== void 0) {
        particle.bubble.radius = size;
      }
    };
    this._process = (particle, distMouse, timeSpent, data) => {
      const container2 = this.container, bubbleParam = data.bubbleObj.optValue, options = container2.actualOptions, bubbleOptions = options.interactivity.modes.bubble;
      if (!bubbleOptions || bubbleParam === void 0) {
        return;
      }
      const bubbleDuration = bubbleOptions.duration, bubbleDistance = container2.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value ?? defaultBubbleValue, type = data.type;
      if (!bubbleDistance || bubbleDistance < minDistance2 || bubbleParam === particlesParam) {
        return;
      }
      if (!container2.bubble) {
        container2.bubble = {};
      }
      if (container2.bubble.durationEnd) {
        if (pObjBubble) {
          if (type === ProcessBubbleType.size) {
            delete particle.bubble.radius;
          }
          if (type === ProcessBubbleType.opacity) {
            delete particle.bubble.opacity;
          }
        }
      } else {
        if (distMouse <= bubbleDistance) {
          const obj = pObjBubble ?? pObj;
          if (obj !== bubbleParam) {
            const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;
            if (type === ProcessBubbleType.size) {
              particle.bubble.radius = value;
            }
            if (type === ProcessBubbleType.opacity) {
              particle.bubble.opacity = value;
            }
          }
        } else {
          if (type === ProcessBubbleType.size) {
            delete particle.bubble.radius;
          }
          if (type === ProcessBubbleType.opacity) {
            delete particle.bubble.opacity;
          }
        }
      }
    };
    this._singleSelectorHover = (delta, selector, div) => {
      const container2 = this.container, selectors = document.querySelectorAll(selector), bubble = container2.actualOptions.interactivity.modes.bubble;
      if (!bubble || !selectors.length) {
        return;
      }
      selectors.forEach((item) => {
        const elem = item, pxRatio = container2.retina.pixelRatio, pos = {
          x: (elem.offsetLeft + elem.offsetWidth * half12) * pxRatio,
          y: (elem.offsetTop + elem.offsetHeight * half12) * pxRatio
        }, repulseRadius = elem.offsetWidth * half12 * pxRatio, area = div.type === DivType.circle ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container2.particles.quadTree.query(area, (p) => this.isEnabled(p));
        for (const particle of query) {
          if (!area.contains(particle.getPosition())) {
            continue;
          }
          particle.bubble.inRange = true;
          const divs = bubble.divs, divBubble = divMode(divs, elem);
          if (!particle.bubble.div || particle.bubble.div !== elem) {
            this.clear(particle, delta, true);
            particle.bubble.div = elem;
          }
          this._hoverBubbleSize(particle, defaultRatio, divBubble);
          this._hoverBubbleOpacity(particle, defaultRatio, divBubble);
          this._hoverBubbleColor(particle, defaultRatio, divBubble);
        }
      });
    };
    this._engine = engine;
    if (!container.bubble) {
      container.bubble = {};
    }
    this.handleClickMode = (mode) => {
      if (mode !== bubbleMode) {
        return;
      }
      if (!container.bubble) {
        container.bubble = {};
      }
      container.bubble.clicking = true;
    };
  }
  clear(particle, delta, force) {
    if (particle.bubble.inRange && !force) {
      return;
    }
    delete particle.bubble.div;
    delete particle.bubble.opacity;
    delete particle.bubble.radius;
    delete particle.bubble.color;
  }
  init() {
    const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;
    if (!bubble) {
      return;
    }
    container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;
    if (bubble.size !== void 0) {
      container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;
    }
  }
  interact(delta) {
    const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;
    if (hoverEnabled && isInArray(bubbleMode, hoverMode)) {
      this._hoverBubble();
    } else if (clickEnabled && isInArray(bubbleMode, clickMode)) {
      this._clickBubble();
    } else {
      divModeExecute(bubbleMode, divs, (selector, div) => this._singleSelectorHover(delta, selector, div));
    }
  }
  isEnabled(particle) {
    const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((particle == null ? void 0 : particle.interactivity) ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(bubbleMode, onDiv);
    if (!(divBubble || onHover.enable && !!mouse.position || onClick.enable && mouse.clickPosition)) {
      return false;
    }
    return isInArray(bubbleMode, onHover.mode) || isInArray(bubbleMode, onClick.mode) || divBubble;
  }
  loadModeOptions(options, ...sources) {
    if (!options.bubble) {
      options.bubble = new Bubble();
    }
    for (const source of sources) {
      options.bubble.load(source == null ? void 0 : source.bubble);
    }
  }
  reset(particle) {
    particle.bubble.inRange = false;
  }
};

// node_modules/@tsparticles/interaction-external-bubble/browser/index.js
async function loadExternalBubbleInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalBubble", (container) => {
    return Promise.resolve(new Bubbler(container, engine));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-connect/browser/Options/Classes/ConnectLinks.js
var ConnectLinks = class {
  constructor() {
    this.opacity = 0.5;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.opacity !== void 0) {
      this.opacity = data.opacity;
    }
  }
};

// node_modules/@tsparticles/interaction-external-connect/browser/Options/Classes/Connect.js
var Connect = class {
  constructor() {
    this.distance = 80;
    this.links = new ConnectLinks();
    this.radius = 60;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.distance !== void 0) {
      this.distance = data.distance;
    }
    this.links.load(data.links);
    if (data.radius !== void 0) {
      this.radius = data.radius;
    }
  }
};

// node_modules/@tsparticles/interaction-external-connect/browser/Utils.js
var gradientMin = 0;
var gradientMax = 1;
var defaultLinksWidth = 0;
function gradient(context, p1, p2, opacity) {
  const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();
  if (!color1 || !color2) {
    return;
  }
  const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);
  grad.addColorStop(gradientMin, getStyleFromHsl(color1, opacity));
  grad.addColorStop(clamp(gradStop, gradientMin, gradientMax), getStyleFromRgb(midRgb, opacity));
  grad.addColorStop(gradientMax, getStyleFromHsl(color2, opacity));
  return grad;
}
function drawConnectLine(context, width, lineStyle2, begin, end) {
  drawLine(context, begin, end);
  context.lineWidth = width;
  context.strokeStyle = lineStyle2;
  context.stroke();
}
function lineStyle(container, ctx, p1, p2) {
  const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;
  if (!connectOptions) {
    return;
  }
  return gradient(ctx, p1, p2, connectOptions.links.opacity);
}
function drawConnection(container, p1, p2) {
  container.canvas.draw((ctx) => {
    const ls = lineStyle(container, ctx, p1, p2);
    if (!ls) {
      return;
    }
    const pos1 = p1.getPosition(), pos2 = p2.getPosition();
    drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);
  });
}

// node_modules/@tsparticles/interaction-external-connect/browser/Connector.js
var connectMode = "connect";
var minDistance3 = 0;
var Connector = class extends ExternalInteractorBase {
  constructor(container) {
    super(container);
  }
  clear() {
  }
  init() {
    const container = this.container, connect = container.actualOptions.interactivity.modes.connect;
    if (!connect) {
      return;
    }
    container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;
    container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;
  }
  interact() {
    const container = this.container, options = container.actualOptions;
    if (options.interactivity.events.onHover.enable && container.interactivity.status === "pointermove") {
      const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;
      if (!connectModeDistance || connectModeDistance < minDistance3 || !connectModeRadius || connectModeRadius < minDistance3 || !mousePos) {
        return;
      }
      const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));
      query.forEach((p1, i) => {
        const pos1 = p1.getPosition(), indexOffset = 1;
        for (const p2 of query.slice(i + indexOffset)) {
          const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);
          if (xDiff < distMax && yDiff < distMax) {
            drawConnection(container, p1, p2);
          }
        }
      });
    }
  }
  isEnabled(particle) {
    const container = this.container, mouse = container.interactivity.mouse, events = ((particle == null ? void 0 : particle.interactivity) ?? container.actualOptions.interactivity).events;
    if (!(events.onHover.enable && mouse.position)) {
      return false;
    }
    return isInArray(connectMode, events.onHover.mode);
  }
  loadModeOptions(options, ...sources) {
    if (!options.connect) {
      options.connect = new Connect();
    }
    for (const source of sources) {
      options.connect.load(source == null ? void 0 : source.connect);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-connect/browser/index.js
async function loadExternalConnectInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalConnect", (container) => {
    return Promise.resolve(new Connector(container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-grab/browser/Options/Classes/GrabLinks.js
var GrabLinks = class {
  constructor() {
    this.blink = false;
    this.consent = false;
    this.opacity = 1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.blink !== void 0) {
      this.blink = data.blink;
    }
    if (data.color !== void 0) {
      this.color = OptionsColor.create(this.color, data.color);
    }
    if (data.consent !== void 0) {
      this.consent = data.consent;
    }
    if (data.opacity !== void 0) {
      this.opacity = data.opacity;
    }
  }
};

// node_modules/@tsparticles/interaction-external-grab/browser/Options/Classes/Grab.js
var Grab = class {
  constructor() {
    this.distance = 100;
    this.links = new GrabLinks();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.distance !== void 0) {
      this.distance = data.distance;
    }
    this.links.load(data.links);
  }
};

// node_modules/@tsparticles/interaction-external-grab/browser/Utils.js
var defaultWidth2 = 0;
function drawGrabLine(context, width, begin, end, colorLine, opacity) {
  drawLine(context, begin, end);
  context.strokeStyle = getStyleFromRgb(colorLine, opacity);
  context.lineWidth = width;
  context.stroke();
}
function drawGrab(container, particle, lineColor, opacity, mousePos) {
  container.canvas.draw((ctx) => {
    const beginPos = particle.getPosition();
    drawGrabLine(ctx, particle.retina.linksWidth ?? defaultWidth2, beginPos, mousePos, lineColor, opacity);
  });
}

// node_modules/@tsparticles/interaction-external-grab/browser/Grabber.js
var grabMode = "grab";
var minDistance4 = 0;
var minOpacity = 0;
var Grabber = class extends ExternalInteractorBase {
  constructor(container, engine) {
    super(container);
    this._engine = engine;
  }
  clear() {
  }
  init() {
    const container = this.container, grab = container.actualOptions.interactivity.modes.grab;
    if (!grab) {
      return;
    }
    container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;
  }
  interact() {
    var _a;
    const container = this.container, options = container.actualOptions, interactivity = options.interactivity;
    if (!interactivity.modes.grab || !interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent) {
      return;
    }
    const mousePos = container.interactivity.mouse.position;
    if (!mousePos) {
      return;
    }
    const distance = container.retina.grabModeDistance;
    if (!distance || distance < minDistance4) {
      return;
    }
    const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));
    for (const particle of query) {
      const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);
      if (pointDistance > distance) {
        continue;
      }
      const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - pointDistance * lineOpacity / distance;
      if (opacityLine <= minOpacity) {
        continue;
      }
      const optColor = grabLineOptions.color ?? ((_a = particle.options.links) == null ? void 0 : _a.color);
      if (!container.particles.grabLineColor && optColor) {
        const linksOptions = interactivity.modes.grab.links;
        container.particles.grabLineColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);
      }
      const colorLine = getLinkColor(particle, void 0, container.particles.grabLineColor);
      if (!colorLine) {
        continue;
      }
      drawGrab(container, particle, colorLine, opacityLine, mousePos);
    }
  }
  isEnabled(particle) {
    const container = this.container, mouse = container.interactivity.mouse, events = ((particle == null ? void 0 : particle.interactivity) ?? container.actualOptions.interactivity).events;
    return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);
  }
  loadModeOptions(options, ...sources) {
    if (!options.grab) {
      options.grab = new Grab();
    }
    for (const source of sources) {
      options.grab.load(source == null ? void 0 : source.grab);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-grab/browser/index.js
async function loadExternalGrabInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalGrab", (container) => {
    return Promise.resolve(new Grabber(container, engine));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-pause/browser/Pauser.js
var pauseMode = "pause";
var Pauser = class extends ExternalInteractorBase {
  constructor(container) {
    super(container);
    this.handleClickMode = (mode) => {
      if (mode !== pauseMode) {
        return;
      }
      const container2 = this.container;
      if (container2.animationStatus) {
        container2.pause();
      } else {
        container2.play();
      }
    };
  }
  clear() {
  }
  init() {
  }
  interact() {
  }
  isEnabled() {
    return true;
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-pause/browser/index.js
async function loadExternalPauseInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalPause", (container) => {
    return Promise.resolve(new Pauser(container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-push/browser/Options/Classes/Push.js
var Push = class {
  constructor() {
    this.default = true;
    this.groups = [];
    this.quantity = 4;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.default !== void 0) {
      this.default = data.default;
    }
    if (data.groups !== void 0) {
      this.groups = data.groups.map((t) => t);
    }
    if (!this.groups.length) {
      this.default = true;
    }
    const quantity = data.quantity;
    if (quantity !== void 0) {
      this.quantity = setRangeValue(quantity);
    }
  }
};

// node_modules/@tsparticles/interaction-external-push/browser/Pusher.js
var pushMode = "push";
var minQuantity = 0;
var Pusher = class extends ExternalInteractorBase {
  constructor(container) {
    super(container);
    this.handleClickMode = (mode) => {
      if (mode !== pushMode) {
        return;
      }
      const container2 = this.container, options = container2.actualOptions, pushOptions = options.interactivity.modes.push;
      if (!pushOptions) {
        return;
      }
      const quantity = getRangeValue(pushOptions.quantity);
      if (quantity <= minQuantity) {
        return;
      }
      const group = itemFromArray([void 0, ...pushOptions.groups]), groupOptions = group !== void 0 ? container2.actualOptions.particles.groups[group] : void 0;
      void container2.particles.push(quantity, container2.interactivity.mouse, groupOptions, group);
    };
  }
  clear() {
  }
  init() {
  }
  interact() {
  }
  isEnabled() {
    return true;
  }
  loadModeOptions(options, ...sources) {
    if (!options.push) {
      options.push = new Push();
    }
    for (const source of sources) {
      options.push.load(source == null ? void 0 : source.push);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-push/browser/index.js
async function loadExternalPushInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalPush", (container) => {
    return Promise.resolve(new Pusher(container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-remove/browser/Options/Classes/Remove.js
var Remove = class {
  constructor() {
    this.quantity = 2;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    const quantity = data.quantity;
    if (quantity !== void 0) {
      this.quantity = setRangeValue(quantity);
    }
  }
};

// node_modules/@tsparticles/interaction-external-remove/browser/Remover.js
var removeMode = "remove";
var Remover = class extends ExternalInteractorBase {
  constructor(container) {
    super(container);
    this.handleClickMode = (mode) => {
      const container2 = this.container, options = container2.actualOptions;
      if (!options.interactivity.modes.remove || mode !== removeMode) {
        return;
      }
      const removeNb = getRangeValue(options.interactivity.modes.remove.quantity);
      container2.particles.removeQuantity(removeNb);
    };
  }
  clear() {
  }
  init() {
  }
  interact() {
  }
  isEnabled() {
    return true;
  }
  loadModeOptions(options, ...sources) {
    if (!options.remove) {
      options.remove = new Remove();
    }
    for (const source of sources) {
      options.remove.load(source == null ? void 0 : source.remove);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-remove/browser/index.js
async function loadExternalRemoveInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalRemove", (container) => {
    return Promise.resolve(new Remover(container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseBase.js
var RepulseBase = class {
  constructor() {
    this.distance = 200;
    this.duration = 0.4;
    this.factor = 100;
    this.speed = 1;
    this.maxSpeed = 50;
    this.easing = EasingType.easeOutQuad;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.distance !== void 0) {
      this.distance = data.distance;
    }
    if (data.duration !== void 0) {
      this.duration = data.duration;
    }
    if (data.easing !== void 0) {
      this.easing = data.easing;
    }
    if (data.factor !== void 0) {
      this.factor = data.factor;
    }
    if (data.speed !== void 0) {
      this.speed = data.speed;
    }
    if (data.maxSpeed !== void 0) {
      this.maxSpeed = data.maxSpeed;
    }
  }
};

// node_modules/@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseDiv.js
var RepulseDiv = class extends RepulseBase {
  constructor() {
    super();
    this.selectors = [];
  }
  load(data) {
    super.load(data);
    if (isNull(data)) {
      return;
    }
    if (data.selectors !== void 0) {
      this.selectors = data.selectors;
    }
  }
};

// node_modules/@tsparticles/interaction-external-repulse/browser/Options/Classes/Repulse.js
var Repulse = class extends RepulseBase {
  load(data) {
    super.load(data);
    if (isNull(data)) {
      return;
    }
    this.divs = executeOnSingleOrMultiple(data.divs, (div) => {
      const tmp = new RepulseDiv();
      tmp.load(div);
      return tmp;
    });
  }
};

// node_modules/@tsparticles/interaction-external-repulse/browser/Repulser.js
var repulseMode = "repulse";
var minDistance5 = 0;
var repulseRadiusFactor = 6;
var repulseRadiusPower = 3;
var squarePower = 2;
var minRadius4 = 0;
var minSpeed = 0;
var easingOffset = 1;
var half13 = 0.5;
var Repulser = class extends ExternalInteractorBase {
  constructor(engine, container) {
    super(container);
    this._clickRepulse = () => {
      const container2 = this.container, repulseOptions = container2.actualOptions.interactivity.modes.repulse;
      if (!repulseOptions) {
        return;
      }
      const repulse = container2.repulse ?? { particles: [] };
      if (!repulse.finish) {
        if (!repulse.count) {
          repulse.count = 0;
        }
        repulse.count++;
        if (repulse.count === container2.particles.count) {
          repulse.finish = true;
        }
      }
      if (repulse.clicking) {
        const repulseDistance = container2.retina.repulseModeDistance;
        if (!repulseDistance || repulseDistance < minDistance5) {
          return;
        }
        const repulseRadius = Math.pow(repulseDistance / repulseRadiusFactor, repulseRadiusPower), mouseClickPos = container2.interactivity.mouse.clickPosition;
        if (mouseClickPos === void 0) {
          return;
        }
        const range2 = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container2.particles.quadTree.query(range2, (p) => this.isEnabled(p));
        for (const particle of query) {
          const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** squarePower, velocity = repulseOptions.speed, force = -repulseRadius * velocity / d;
          if (d <= repulseRadius) {
            repulse.particles.push(particle);
            const vect = Vector.create(dx, dy);
            vect.length = force;
            particle.velocity.setTo(vect);
          }
        }
      } else if (repulse.clicking === false) {
        for (const particle of repulse.particles) {
          particle.velocity.setTo(particle.initialVelocity);
        }
        repulse.particles = [];
      }
    };
    this._hoverRepulse = () => {
      const container2 = this.container, mousePos = container2.interactivity.mouse.position, repulseRadius = container2.retina.repulseModeDistance;
      if (!repulseRadius || repulseRadius < minRadius4 || !mousePos) {
        return;
      }
      this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));
    };
    this._processRepulse = (position, repulseRadius, area, divRepulse) => {
      const container2 = this.container, query = container2.particles.quadTree.query(area, (p) => this.isEnabled(p)), repulseOptions = container2.actualOptions.interactivity.modes.repulse;
      if (!repulseOptions) {
        return;
      }
      const { easing, speed, factor, maxSpeed } = repulseOptions, easingFunc = this._engine.getEasing(easing), velocity = ((divRepulse == null ? void 0 : divRepulse.speed) ?? speed) * factor;
      for (const particle of query) {
        const { dx, dy, distance } = getDistances(particle.position, position), repulseFactor = clamp(easingFunc(easingOffset - distance / repulseRadius) * velocity, minSpeed, maxSpeed), normVec = Vector.create(!distance ? velocity : dx / distance * repulseFactor, !distance ? velocity : dy / distance * repulseFactor);
        particle.position.addTo(normVec);
      }
    };
    this._singleSelectorRepulse = (selector, div) => {
      const container2 = this.container, repulse = container2.actualOptions.interactivity.modes.repulse;
      if (!repulse) {
        return;
      }
      const query = document.querySelectorAll(selector);
      if (!query.length) {
        return;
      }
      query.forEach((item) => {
        const elem = item, pxRatio = container2.retina.pixelRatio, pos = {
          x: (elem.offsetLeft + elem.offsetWidth * half13) * pxRatio,
          y: (elem.offsetTop + elem.offsetHeight * half13) * pxRatio
        }, repulseRadius = elem.offsetWidth * half13 * pxRatio, area = div.type === DivType.circle ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);
        this._processRepulse(pos, repulseRadius, area, divRepulse);
      });
    };
    this._engine = engine;
    if (!container.repulse) {
      container.repulse = { particles: [] };
    }
    this.handleClickMode = (mode) => {
      const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;
      if (!repulseOpts || mode !== repulseMode) {
        return;
      }
      if (!container.repulse) {
        container.repulse = { particles: [] };
      }
      const repulse = container.repulse;
      repulse.clicking = true;
      repulse.count = 0;
      for (const particle of container.repulse.particles) {
        if (!this.isEnabled(particle)) {
          continue;
        }
        particle.velocity.setTo(particle.initialVelocity);
      }
      repulse.particles = [];
      repulse.finish = false;
      setTimeout(() => {
        if (container.destroyed) {
          return;
        }
        repulse.clicking = false;
      }, repulseOpts.duration * millisecondsToSeconds);
    };
  }
  clear() {
  }
  init() {
    const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;
    if (!repulse) {
      return;
    }
    container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;
  }
  interact() {
    const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;
    if (mouseMoveStatus && hoverEnabled && isInArray(repulseMode, hoverMode)) {
      this._hoverRepulse();
    } else if (clickEnabled && isInArray(repulseMode, clickMode)) {
      this._clickRepulse();
    } else {
      divModeExecute(repulseMode, divs, (selector, div) => this._singleSelectorRepulse(selector, div));
    }
  }
  isEnabled(particle) {
    const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((particle == null ? void 0 : particle.interactivity) ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(repulseMode, divs);
    if (!(divRepulse || hover.enable && !!mouse.position || click.enable && mouse.clickPosition)) {
      return false;
    }
    const hoverMode = hover.mode, clickMode = click.mode;
    return isInArray(repulseMode, hoverMode) || isInArray(repulseMode, clickMode) || divRepulse;
  }
  loadModeOptions(options, ...sources) {
    if (!options.repulse) {
      options.repulse = new Repulse();
    }
    for (const source of sources) {
      options.repulse.load(source == null ? void 0 : source.repulse);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-external-repulse/browser/index.js
async function loadExternalRepulseInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalRepulse", (container) => {
    return Promise.resolve(new Repulser(engine, container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-external-slow/browser/Options/Classes/Slow.js
var Slow = class {
  constructor() {
    this.factor = 3;
    this.radius = 200;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.factor !== void 0) {
      this.factor = data.factor;
    }
    if (data.radius !== void 0) {
      this.radius = data.radius;
    }
  }
};

// node_modules/@tsparticles/interaction-external-slow/browser/Slower.js
var slowMode = "slow";
var minRadius5 = 0;
var Slower = class extends ExternalInteractorBase {
  constructor(container) {
    super(container);
  }
  clear(particle, delta, force) {
    if (particle.slow.inRange && !force) {
      return;
    }
    particle.slow.factor = 1;
  }
  init() {
    const container = this.container, slow = container.actualOptions.interactivity.modes.slow;
    if (!slow) {
      return;
    }
    container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;
  }
  interact() {
  }
  isEnabled(particle) {
    const container = this.container, mouse = container.interactivity.mouse, events = ((particle == null ? void 0 : particle.interactivity) ?? container.actualOptions.interactivity).events;
    return events.onHover.enable && !!mouse.position && isInArray(slowMode, events.onHover.mode);
  }
  loadModeOptions(options, ...sources) {
    if (!options.slow) {
      options.slow = new Slow();
    }
    for (const source of sources) {
      options.slow.load(source == null ? void 0 : source.slow);
    }
  }
  reset(particle) {
    particle.slow.inRange = false;
    const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;
    if (!slowOptions || !radius || radius < minRadius5 || !mousePos) {
      return;
    }
    const particlePos = particle.getPosition(), dist = getDistance(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;
    if (dist > radius) {
      return;
    }
    slow.inRange = true;
    slow.factor = proximityFactor / slowFactor;
  }
};

// node_modules/@tsparticles/interaction-external-slow/browser/index.js
async function loadExternalSlowInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalSlow", (container) => {
    return Promise.resolve(new Slower(container));
  }, refresh);
}

// node_modules/@tsparticles/shape-image/browser/Utils.js
var stringStart = 0;
var defaultOpacity2 = 1;
var currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d.]+%?\))|currentcolor/gi;
function replaceColorSvg(imageShape, color, opacity) {
  const { svgData } = imageShape;
  if (!svgData) {
    return "";
  }
  const colorStyle = getStyleFromHsl(color, opacity);
  if (svgData.includes("fill")) {
    return svgData.replace(currentColorRegex, () => colorStyle);
  }
  const preFillIndex = svgData.indexOf(">");
  return `${svgData.substring(stringStart, preFillIndex)} fill="${colorStyle}"${svgData.substring(preFillIndex)}`;
}
async function loadImage(image) {
  return new Promise((resolve) => {
    image.loading = true;
    const img = new Image();
    image.element = img;
    img.addEventListener("load", () => {
      image.loading = false;
      resolve();
    });
    img.addEventListener("error", () => {
      image.element = void 0;
      image.error = true;
      image.loading = false;
      getLogger().error(`${errorPrefix} loading image: ${image.source}`);
      resolve();
    });
    img.src = image.source;
  });
}
async function downloadSvgImage(image) {
  if (image.type !== "svg") {
    await loadImage(image);
    return;
  }
  image.loading = true;
  const response = await fetch(image.source);
  if (!response.ok) {
    getLogger().error(`${errorPrefix} Image not found`);
    image.error = true;
  } else {
    image.svgData = await response.text();
  }
  image.loading = false;
}
function replaceImageColor(image, imageData, color, particle) {
  var _a;
  const svgColoredData = replaceColorSvg(image, color, ((_a = particle.opacity) == null ? void 0 : _a.value) ?? defaultOpacity2), imageRes = {
    color,
    gif: imageData.gif,
    data: {
      ...image,
      svgData: svgColoredData
    },
    loaded: false,
    ratio: imageData.width / imageData.height,
    replaceColor: imageData.replaceColor,
    source: imageData.src
  };
  return new Promise((resolve) => {
    const svg = new Blob([svgColoredData], { type: "image/svg+xml" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();
    img.addEventListener("load", () => {
      imageRes.loaded = true;
      imageRes.element = img;
      resolve(imageRes);
      domUrl.revokeObjectURL(url);
    });
    const errorHandler = async () => {
      domUrl.revokeObjectURL(url);
      const img2 = {
        ...image,
        error: false,
        loading: true
      };
      await loadImage(img2);
      imageRes.loaded = true;
      imageRes.element = img2.element;
      resolve(imageRes);
    };
    img.addEventListener("error", () => void errorHandler());
    img.src = url;
  });
}

// node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js
var InterlaceOffsets = [0, 4, 2, 1];
var InterlaceSteps = [8, 8, 4, 2];

// node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js
var ByteStream = class {
  constructor(bytes) {
    this.pos = 0;
    this.data = new Uint8ClampedArray(bytes);
  }
  getString(count) {
    const slice = this.data.slice(this.pos, this.pos + count);
    this.pos += slice.length;
    return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), "");
  }
  nextByte() {
    return this.data[this.pos++];
  }
  nextTwoBytes() {
    const increment2 = 2, previous = 1, shift = 8;
    this.pos += increment2;
    return this.data[this.pos - increment2] + (this.data[this.pos - previous] << shift);
  }
  readSubBlocks() {
    let blockString = "", size = 0;
    const minCount = 0, emptySize = 0;
    do {
      size = this.data[this.pos++];
      for (let count = size; --count >= minCount; blockString += String.fromCharCode(this.data[this.pos++])) {
      }
    } while (size !== emptySize);
    return blockString;
  }
  readSubBlocksBin() {
    let size = this.data[this.pos], len = 0;
    const emptySize = 0, increment2 = 1;
    for (let offset = 0; size !== emptySize; offset += size + increment2, size = this.data[this.pos + offset]) {
      len += size;
    }
    const blockData = new Uint8Array(len);
    size = this.data[this.pos++];
    for (let i = 0; size !== emptySize; size = this.data[this.pos++]) {
      for (let count = size; --count >= emptySize; blockData[i++] = this.data[this.pos++]) {
      }
    }
    return blockData;
  }
  skipSubBlocks() {
    for (const increment2 = 1, noData = 0; this.data[this.pos] !== noData; this.pos += this.data[this.pos] + increment2) {
    }
    this.pos++;
  }
};

// node_modules/@tsparticles/shape-image/browser/GifUtils/Enums/DisposalMethod.js
var DisposalMethod;
(function(DisposalMethod2) {
  DisposalMethod2[DisposalMethod2["Replace"] = 0] = "Replace";
  DisposalMethod2[DisposalMethod2["Combine"] = 1] = "Combine";
  DisposalMethod2[DisposalMethod2["RestoreBackground"] = 2] = "RestoreBackground";
  DisposalMethod2[DisposalMethod2["RestorePrevious"] = 3] = "RestorePrevious";
  DisposalMethod2[DisposalMethod2["UndefinedA"] = 4] = "UndefinedA";
  DisposalMethod2[DisposalMethod2["UndefinedB"] = 5] = "UndefinedB";
  DisposalMethod2[DisposalMethod2["UndefinedC"] = 6] = "UndefinedC";
  DisposalMethod2[DisposalMethod2["UndefinedD"] = 7] = "UndefinedD";
})(DisposalMethod || (DisposalMethod = {}));

// node_modules/@tsparticles/shape-image/browser/GifUtils/Types/GIFDataHeaders.js
var GIFDataHeaders;
(function(GIFDataHeaders2) {
  GIFDataHeaders2[GIFDataHeaders2["Extension"] = 33] = "Extension";
  GIFDataHeaders2[GIFDataHeaders2["ApplicationExtension"] = 255] = "ApplicationExtension";
  GIFDataHeaders2[GIFDataHeaders2["GraphicsControlExtension"] = 249] = "GraphicsControlExtension";
  GIFDataHeaders2[GIFDataHeaders2["PlainTextExtension"] = 1] = "PlainTextExtension";
  GIFDataHeaders2[GIFDataHeaders2["CommentExtension"] = 254] = "CommentExtension";
  GIFDataHeaders2[GIFDataHeaders2["Image"] = 44] = "Image";
  GIFDataHeaders2[GIFDataHeaders2["EndOfFile"] = 59] = "EndOfFile";
})(GIFDataHeaders || (GIFDataHeaders = {}));

// node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js
var origin6 = {
  x: 0,
  y: 0
};
var defaultFrame = 0;
var half14 = 0.5;
var initialTime = 0;
var firstIndex = 0;
var defaultLoopCount = 0;
function parseColorTable(byteStream, count) {
  const colors = [];
  for (let i = 0; i < count; i++) {
    colors.push({
      r: byteStream.data[byteStream.pos],
      g: byteStream.data[byteStream.pos + 1],
      b: byteStream.data[byteStream.pos + 2]
    });
    byteStream.pos += 3;
  }
  return colors;
}
function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {
  switch (byteStream.nextByte()) {
    case GIFDataHeaders.GraphicsControlExtension: {
      const frame = gif.frames[getFrameIndex(false)];
      byteStream.pos++;
      const packedByte = byteStream.nextByte();
      frame.GCreserved = (packedByte & 224) >>> 5;
      frame.disposalMethod = (packedByte & 28) >>> 2;
      frame.userInputDelayFlag = (packedByte & 2) === 2;
      const transparencyFlag = (packedByte & 1) === 1;
      frame.delayTime = byteStream.nextTwoBytes() * 10;
      const transparencyIndex = byteStream.nextByte();
      if (transparencyFlag) {
        getTransparencyIndex(transparencyIndex);
      }
      byteStream.pos++;
      break;
    }
    case GIFDataHeaders.ApplicationExtension: {
      byteStream.pos++;
      const applicationExtension = {
        identifier: byteStream.getString(8),
        authenticationCode: byteStream.getString(3),
        data: byteStream.readSubBlocksBin()
      };
      gif.applicationExtensions.push(applicationExtension);
      break;
    }
    case GIFDataHeaders.CommentExtension: {
      gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);
      break;
    }
    case GIFDataHeaders.PlainTextExtension: {
      if (gif.globalColorTable.length === 0) {
        throw new EvalError("plain text extension without global color table");
      }
      byteStream.pos++;
      gif.frames[getFrameIndex(false)].plainTextData = {
        left: byteStream.nextTwoBytes(),
        top: byteStream.nextTwoBytes(),
        width: byteStream.nextTwoBytes(),
        height: byteStream.nextTwoBytes(),
        charSize: {
          width: byteStream.nextTwoBytes(),
          height: byteStream.nextTwoBytes()
        },
        foregroundColor: byteStream.nextByte(),
        backgroundColor: byteStream.nextByte(),
        text: byteStream.readSubBlocks()
      };
      break;
    }
    default:
      byteStream.skipSubBlocks();
      break;
  }
}
async function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {
  const frame = gif.frames[getFrameIndex(true)];
  frame.left = byteStream.nextTwoBytes();
  frame.top = byteStream.nextTwoBytes();
  frame.width = byteStream.nextTwoBytes();
  frame.height = byteStream.nextTwoBytes();
  const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 128) === 128, interlacedFlag = (packedByte & 64) === 64;
  frame.sortFlag = (packedByte & 32) === 32;
  frame.reserved = (packedByte & 24) >>> 3;
  const localColorCount = 1 << (packedByte & 7) + 1;
  if (localColorTableFlag) {
    frame.localColorTable = parseColorTable(byteStream, localColorCount);
  }
  const getColor = (index) => {
    const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];
    if (index !== getTransparencyIndex(null)) {
      return { r, g, b, a: 255 };
    }
    return { r, g, b, a: avgAlpha ? ~~((r + g + b) / 3) : 0 };
  };
  const image = (() => {
    try {
      return new ImageData(frame.width, frame.height, { colorSpace: "srgb" });
    } catch (error) {
      if (error instanceof DOMException && error.name === "IndexSizeError") {
        return null;
      }
      throw error;
    }
  })();
  if (image == null) {
    throw new EvalError("GIF frame size is to large");
  }
  const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;
  const readBits = (pos, len) => {
    const bytePos = pos >>> 3, bitPos = pos & 7;
    return (imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16) & (1 << len) - 1 << bitPos) >>> bitPos;
  };
  if (interlacedFlag) {
    for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {
      if (InterlaceOffsets[pass] < frame.height) {
        let pixelPos = 0, lineIndex = 0, exit = false;
        while (!exit) {
          const last = code;
          code = readBits(pos, size);
          pos += size + 1;
          if (code === clearCode) {
            size = minCodeSize + 1;
            dic.length = clearCode + 2;
            for (let i = 0; i < dic.length; i++) {
              dic[i] = i < clearCode ? [i] : [];
            }
          } else {
            if (code >= dic.length) {
              dic.push(dic[last].concat(dic[last][0]));
            } else if (last !== clearCode) {
              dic.push(dic[last].concat(dic[code][0]));
            }
            for (const item of dic[code]) {
              const { r, g, b, a } = getColor(item);
              image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width + InterlaceSteps[pass] * lineIndex + pixelPos % (frame.width * 4));
              pixelPos += 4;
            }
            if (dic.length === 1 << size && size < 12) {
              size++;
            }
          }
          if (pixelPos === frame.width * 4 * (lineIndex + 1)) {
            lineIndex++;
            if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {
              exit = true;
            }
          }
        }
      }
      progressCallback == null ? void 0 : progressCallback(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });
    }
    frame.image = image;
    frame.bitmap = await createImageBitmap(image);
  } else {
    let code = 0, size = minCodeSize + 1, pos = 0, pixelPos = -4, exit = false;
    const dic = [[0]];
    while (!exit) {
      const last = code;
      code = readBits(pos, size);
      pos += size;
      if (code === clearCode) {
        size = minCodeSize + 1;
        dic.length = clearCode + 2;
        for (let i = 0; i < dic.length; i++) {
          dic[i] = i < clearCode ? [i] : [];
        }
      } else {
        if (code === clearCode + 1) {
          exit = true;
          break;
        }
        if (code >= dic.length) {
          dic.push(dic[last].concat(dic[last][0]));
        } else if (last !== clearCode) {
          dic.push(dic[last].concat(dic[code][0]));
        }
        for (const item of dic[code]) {
          const { r, g, b, a } = getColor(item);
          image.data.set([r, g, b, a], pixelPos += 4);
        }
        if (dic.length >= 1 << size && size < 12) {
          size++;
        }
      }
    }
    frame.image = image;
    frame.bitmap = await createImageBitmap(image);
    progressCallback == null ? void 0 : progressCallback((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });
  }
}
async function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {
  switch (byteStream.nextByte()) {
    case GIFDataHeaders.EndOfFile:
      return true;
    case GIFDataHeaders.Image:
      await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);
      break;
    case GIFDataHeaders.Extension:
      parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);
      break;
    default:
      throw new EvalError("undefined block found");
  }
  return false;
}
function getGIFLoopAmount(gif) {
  for (const extension of gif.applicationExtensions) {
    if (extension.identifier + extension.authenticationCode !== "NETSCAPE2.0") {
      continue;
    }
    return extension.data[1] + (extension.data[2] << 8);
  }
  return NaN;
}
async function decodeGIF(gifURL, progressCallback, avgAlpha) {
  if (!avgAlpha)
    avgAlpha = false;
  const res = await fetch(gifURL);
  if (!res.ok && res.status === 404) {
    throw new EvalError("file not found");
  }
  const buffer = await res.arrayBuffer();
  const gif = {
    width: 0,
    height: 0,
    totalTime: 0,
    colorRes: 0,
    pixelAspectRatio: 0,
    frames: [],
    sortFlag: false,
    globalColorTable: [],
    backgroundImage: new ImageData(1, 1, { colorSpace: "srgb" }),
    comments: [],
    applicationExtensions: []
  }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));
  if (byteStream.getString(6) !== "GIF89a") {
    throw new Error("not a supported GIF file");
  }
  gif.width = byteStream.nextTwoBytes();
  gif.height = byteStream.nextTwoBytes();
  const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 128) === 128;
  gif.colorRes = (packedByte & 112) >>> 4;
  gif.sortFlag = (packedByte & 8) === 8;
  const globalColorCount = 1 << (packedByte & 7) + 1, backgroundColorIndex = byteStream.nextByte();
  gif.pixelAspectRatio = byteStream.nextByte();
  if (gif.pixelAspectRatio !== 0) {
    gif.pixelAspectRatio = (gif.pixelAspectRatio + 15) / 64;
  }
  if (globalColorTableFlag) {
    gif.globalColorTable = parseColorTable(byteStream, globalColorCount);
  }
  const backgroundImage = (() => {
    try {
      return new ImageData(gif.width, gif.height, { colorSpace: "srgb" });
    } catch (error) {
      if (error instanceof DOMException && error.name === "IndexSizeError") {
        return null;
      }
      throw error;
    }
  })();
  if (backgroundImage == null) {
    throw new Error("GIF frame size is to large");
  }
  const { r, g, b } = gif.globalColorTable[backgroundColorIndex];
  backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);
  for (let i = 4; i < backgroundImage.data.length; i *= 2) {
    backgroundImage.data.copyWithin(i, 0, i);
  }
  gif.backgroundImage = backgroundImage;
  let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;
  const getframeIndex = (increment2) => {
    if (increment2) {
      incrementFrameIndex = true;
    }
    return frameIndex;
  };
  const getTransparencyIndex = (newValue) => {
    if (newValue != null) {
      transparencyIndex = newValue;
    }
    return transparencyIndex;
  };
  try {
    do {
      if (incrementFrameIndex) {
        gif.frames.push({
          left: 0,
          top: 0,
          width: 0,
          height: 0,
          disposalMethod: DisposalMethod.Replace,
          image: new ImageData(1, 1, { colorSpace: "srgb" }),
          plainTextData: null,
          userInputDelayFlag: false,
          delayTime: 0,
          sortFlag: false,
          localColorTable: [],
          reserved: 0,
          GCreserved: 0
        });
        frameIndex++;
        transparencyIndex = -1;
        incrementFrameIndex = false;
      }
    } while (!await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback));
    gif.frames.length--;
    for (const frame of gif.frames) {
      if (frame.userInputDelayFlag && frame.delayTime === 0) {
        gif.totalTime = Infinity;
        break;
      }
      gif.totalTime += frame.delayTime;
    }
    return gif;
  } catch (error) {
    if (error instanceof EvalError) {
      throw new Error(`error while parsing frame ${frameIndex} "${error.message}"`);
    }
    throw error;
  }
}
function drawGif(data) {
  const { context, radius, particle, delta } = data, image = particle.image;
  if (!(image == null ? void 0 : image.gifData) || !image.gif) {
    return;
  }
  const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext("2d");
  if (!offscreenContext) {
    throw new Error("could not create offscreen canvas context");
  }
  offscreenContext.imageSmoothingQuality = "low";
  offscreenContext.imageSmoothingEnabled = false;
  offscreenContext.clearRect(origin6.x, origin6.y, offscreenCanvas.width, offscreenCanvas.height);
  if (particle.gifLoopCount === void 0) {
    particle.gifLoopCount = image.gifLoopCount ?? defaultLoopCount;
  }
  let frameIndex = particle.gifFrame ?? defaultFrame;
  const pos = { x: -image.gifData.width * half14, y: -image.gifData.height * half14 }, frame = image.gifData.frames[frameIndex];
  if (particle.gifTime === void 0) {
    particle.gifTime = initialTime;
  }
  if (!frame.bitmap) {
    return;
  }
  context.scale(radius / image.gifData.width, radius / image.gifData.height);
  switch (frame.disposalMethod) {
    case DisposalMethod.UndefinedA:
    case DisposalMethod.UndefinedB:
    case DisposalMethod.UndefinedC:
    case DisposalMethod.UndefinedD:
    case DisposalMethod.Replace:
      offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);
      context.drawImage(offscreenCanvas, pos.x, pos.y);
      offscreenContext.clearRect(origin6.x, origin6.y, offscreenCanvas.width, offscreenCanvas.height);
      break;
    case DisposalMethod.Combine:
      offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);
      context.drawImage(offscreenCanvas, pos.x, pos.y);
      break;
    case DisposalMethod.RestoreBackground:
      offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);
      context.drawImage(offscreenCanvas, pos.x, pos.y);
      offscreenContext.clearRect(origin6.x, origin6.y, offscreenCanvas.width, offscreenCanvas.height);
      if (!image.gifData.globalColorTable.length) {
        offscreenContext.putImageData(image.gifData.frames[firstIndex].image, pos.x + frame.left, pos.y + frame.top);
      } else {
        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);
      }
      break;
    case DisposalMethod.RestorePrevious:
      {
        const previousImageData = offscreenContext.getImageData(origin6.x, origin6.y, offscreenCanvas.width, offscreenCanvas.height);
        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);
        context.drawImage(offscreenCanvas, pos.x, pos.y);
        offscreenContext.clearRect(origin6.x, origin6.y, offscreenCanvas.width, offscreenCanvas.height);
        offscreenContext.putImageData(previousImageData, origin6.x, origin6.y);
      }
      break;
  }
  particle.gifTime += delta.value;
  if (particle.gifTime > frame.delayTime) {
    particle.gifTime -= frame.delayTime;
    if (++frameIndex >= image.gifData.frames.length) {
      if (--particle.gifLoopCount <= defaultLoopCount) {
        return;
      }
      frameIndex = firstIndex;
      offscreenContext.clearRect(origin6.x, origin6.y, offscreenCanvas.width, offscreenCanvas.height);
    }
    particle.gifFrame = frameIndex;
  }
  context.scale(image.gifData.width / radius, image.gifData.height / radius);
}
async function loadGifImage(image) {
  if (image.type !== "gif") {
    await loadImage(image);
    return;
  }
  image.loading = true;
  try {
    image.gifData = await decodeGIF(image.source);
    image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? defaultLoopCount;
    if (!image.gifLoopCount) {
      image.gifLoopCount = Infinity;
    }
  } catch {
    image.error = true;
  }
  image.loading = false;
}

// node_modules/@tsparticles/shape-image/browser/ImageDrawer.js
var double14 = 2;
var defaultAlpha3 = 1;
var sides3 = 12;
var defaultRatio2 = 1;
var ImageDrawer = class {
  constructor(engine) {
    this.validTypes = ["image", "images"];
    this.loadImageShape = async (imageShape) => {
      if (!this._engine.loadImage) {
        throw new Error(`${errorPrefix} image shape not initialized`);
      }
      await this._engine.loadImage({
        gif: imageShape.gif,
        name: imageShape.name,
        replaceColor: imageShape.replaceColor ?? false,
        src: imageShape.src
      });
    };
    this._engine = engine;
  }
  addImage(image) {
    if (!this._engine.images) {
      this._engine.images = [];
    }
    this._engine.images.push(image);
  }
  draw(data) {
    const { context, radius, particle, opacity } = data, image = particle.image, element = image == null ? void 0 : image.element;
    if (!image) {
      return;
    }
    context.globalAlpha = opacity;
    if (image.gif && image.gifData) {
      drawGif(data);
    } else if (element) {
      const ratio = image.ratio, pos = {
        x: -radius,
        y: -radius
      }, diameter = radius * double14;
      context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);
    }
    context.globalAlpha = defaultAlpha3;
  }
  getSidesCount() {
    return sides3;
  }
  async init(container) {
    const options = container.actualOptions;
    if (!options.preload || !this._engine.loadImage) {
      return;
    }
    for (const imageData of options.preload) {
      await this._engine.loadImage(imageData);
    }
  }
  loadShape(particle) {
    if (particle.shape !== "image" && particle.shape !== "images") {
      return;
    }
    if (!this._engine.images) {
      this._engine.images = [];
    }
    const imageData = particle.shapeData;
    if (!imageData) {
      return;
    }
    const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);
    if (!image) {
      void this.loadImageShape(imageData).then(() => {
        this.loadShape(particle);
      });
    }
  }
  particleInit(container, particle) {
    if (particle.shape !== "image" && particle.shape !== "images") {
      return;
    }
    if (!this._engine.images) {
      this._engine.images = [];
    }
    const images = this._engine.images, imageData = particle.shapeData;
    if (!imageData) {
      return;
    }
    const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);
    if (!image) {
      return;
    }
    const replaceColor = imageData.replaceColor ?? image.replaceColor;
    if (image.loading) {
      setTimeout(() => {
        this.particleInit(container, particle);
      });
      return;
    }
    void (async () => {
      let imageRes;
      if (image.svgData && color) {
        imageRes = await replaceImageColor(image, imageData, color, particle);
      } else {
        imageRes = {
          color,
          data: image,
          element: image.element,
          gif: image.gif,
          gifData: image.gifData,
          gifLoopCount: image.gifLoopCount,
          loaded: true,
          ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? defaultRatio2,
          replaceColor,
          source: imageData.src
        };
      }
      if (!imageRes.ratio) {
        imageRes.ratio = 1;
      }
      const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {
        image: imageRes,
        fill,
        close
      };
      particle.image = imageShape.image;
      particle.shapeFill = imageShape.fill;
      particle.shapeClose = imageShape.close;
    })();
  }
};

// node_modules/@tsparticles/shape-image/browser/Options/Classes/Preload.js
var Preload = class {
  constructor() {
    this.src = "";
    this.gif = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.gif !== void 0) {
      this.gif = data.gif;
    }
    if (data.height !== void 0) {
      this.height = data.height;
    }
    if (data.name !== void 0) {
      this.name = data.name;
    }
    if (data.replaceColor !== void 0) {
      this.replaceColor = data.replaceColor;
    }
    if (data.src !== void 0) {
      this.src = data.src;
    }
    if (data.width !== void 0) {
      this.width = data.width;
    }
  }
};

// node_modules/@tsparticles/shape-image/browser/ImagePreloader.js
var ImagePreloaderPlugin = class {
  constructor(engine) {
    this.id = "imagePreloader";
    this._engine = engine;
  }
  async getPlugin() {
    await Promise.resolve();
    return {};
  }
  loadOptions(options, source) {
    if (!(source == null ? void 0 : source.preload)) {
      return;
    }
    if (!options.preload) {
      options.preload = [];
    }
    const preloadOptions = options.preload;
    for (const item of source.preload) {
      const existing = preloadOptions.find((t) => t.name === item.name || t.src === item.src);
      if (existing) {
        existing.load(item);
      } else {
        const preload = new Preload();
        preload.load(item);
        preloadOptions.push(preload);
      }
    }
  }
  needsPlugin() {
    return true;
  }
};

// node_modules/@tsparticles/shape-image/browser/index.js
var extLength = 3;
function addLoadImageToEngine(engine) {
  if (engine.loadImage) {
    return;
  }
  engine.loadImage = async (data) => {
    if (!data.name && !data.src) {
      throw new Error(`${errorPrefix} no image source provided`);
    }
    if (!engine.images) {
      engine.images = [];
    }
    if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {
      return;
    }
    try {
      const image = {
        gif: data.gif ?? false,
        name: data.name ?? data.src,
        source: data.src,
        type: data.src.substring(data.src.length - extLength),
        error: false,
        loading: true,
        replaceColor: data.replaceColor,
        ratio: data.width && data.height ? data.width / data.height : void 0
      };
      engine.images.push(image);
      let imageFunc;
      if (data.gif) {
        imageFunc = loadGifImage;
      } else {
        imageFunc = data.replaceColor ? downloadSvgImage : loadImage;
      }
      await imageFunc(image);
    } catch {
      throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);
    }
  };
}
async function loadImageShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  addLoadImageToEngine(engine);
  const preloader = new ImagePreloaderPlugin(engine);
  await engine.addPlugin(preloader, refresh);
  await engine.addShape(new ImageDrawer(engine), refresh);
}

// node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDelay.js
var LifeDelay = class extends ValueWithRandom {
  constructor() {
    super();
    this.sync = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    super.load(data);
    if (data.sync !== void 0) {
      this.sync = data.sync;
    }
  }
};

// node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDuration.js
var LifeDuration = class extends ValueWithRandom {
  constructor() {
    super();
    this.sync = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    super.load(data);
    if (data.sync !== void 0) {
      this.sync = data.sync;
    }
  }
};

// node_modules/@tsparticles/updater-life/browser/Options/Classes/Life.js
var Life = class {
  constructor() {
    this.count = 0;
    this.delay = new LifeDelay();
    this.duration = new LifeDuration();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.count !== void 0) {
      this.count = data.count;
    }
    this.delay.load(data.delay);
    this.duration.load(data.duration);
  }
};

// node_modules/@tsparticles/updater-life/browser/Utils.js
var noTime = 0;
var infiniteValue = -1;
var noLife = 0;
var minCanvasSize = 0;
function updateLife(particle, delta, canvasSize) {
  if (!particle.life) {
    return;
  }
  const life = particle.life;
  let justSpawned = false;
  if (particle.spawning) {
    life.delayTime += delta.value;
    if (life.delayTime >= particle.life.delay) {
      justSpawned = true;
      particle.spawning = false;
      life.delayTime = noTime;
      life.time = noTime;
    } else {
      return;
    }
  }
  if (life.duration === infiniteValue) {
    return;
  }
  if (particle.spawning) {
    return;
  }
  if (justSpawned) {
    life.time = noTime;
  } else {
    life.time += delta.value;
  }
  if (life.time < life.duration) {
    return;
  }
  life.time = noTime;
  if (particle.life.count > noLife) {
    particle.life.count--;
  }
  if (particle.life.count === noLife) {
    particle.destroy();
    return;
  }
  const widthRange = setRangeValue(minCanvasSize, canvasSize.width), heightRange = setRangeValue(minCanvasSize, canvasSize.width);
  particle.position.x = randomInRange(widthRange);
  particle.position.y = randomInRange(heightRange);
  particle.spawning = true;
  life.delayTime = noTime;
  life.time = noTime;
  particle.reset();
  const lifeOptions = particle.options.life;
  if (lifeOptions) {
    life.delay = getRangeValue(lifeOptions.delay.value) * millisecondsToSeconds;
    life.duration = getRangeValue(lifeOptions.duration.value) * millisecondsToSeconds;
  }
}

// node_modules/@tsparticles/updater-life/browser/LifeUpdater.js
var noTime2 = 0;
var identity3 = 1;
var infiniteValue2 = -1;
var LifeUpdater = class {
  constructor(container) {
    this.container = container;
  }
  init(particle) {
    const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;
    if (!lifeOptions) {
      return;
    }
    particle.life = {
      delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? identity3 : getRandom()) / container.retina.reduceFactor * millisecondsToSeconds : noTime2,
      delayTime: noTime2,
      duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? identity3 : getRandom()) / container.retina.reduceFactor * millisecondsToSeconds : noTime2,
      time: noTime2,
      count: lifeOptions.count
    };
    if (particle.life.duration <= noTime2) {
      particle.life.duration = infiniteValue2;
    }
    if (particle.life.count <= noTime2) {
      particle.life.count = infiniteValue2;
    }
    if (particle.life) {
      particle.spawning = particle.life.delay > noTime2;
    }
  }
  isEnabled(particle) {
    return !particle.destroyed;
  }
  loadOptions(options, ...sources) {
    if (!options.life) {
      options.life = new Life();
    }
    for (const source of sources) {
      options.life.load(source == null ? void 0 : source.life);
    }
  }
  update(particle, delta) {
    if (!this.isEnabled(particle) || !particle.life) {
      return;
    }
    updateLife(particle, delta, this.container.canvas.size);
  }
};

// node_modules/@tsparticles/updater-life/browser/index.js
async function loadLifeUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("life", async (container) => {
    return Promise.resolve(new LifeUpdater(container));
  }, refresh);
}

// node_modules/@tsparticles/shape-line/browser/Utils.js
function drawLine2(data) {
  const { context, particle, radius } = data, shapeData = particle.shapeData, centerY = 0;
  context.moveTo(-radius, centerY);
  context.lineTo(radius, centerY);
  context.lineCap = (shapeData == null ? void 0 : shapeData.cap) ?? "butt";
}

// node_modules/@tsparticles/shape-line/browser/LineDrawer.js
var sides4 = 1;
var LineDrawer = class {
  constructor() {
    this.validTypes = ["line"];
  }
  draw(data) {
    drawLine2(data);
  }
  getSidesCount() {
    return sides4;
  }
};

// node_modules/@tsparticles/shape-line/browser/index.js
async function loadLineShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new LineDrawer(), refresh);
}

// node_modules/@tsparticles/move-parallax/browser/ParallaxMover.js
var half15 = 0.5;
var ParallaxMover = class {
  init() {
  }
  isEnabled(particle) {
    return !isSsr() && !particle.destroyed && particle.container.actualOptions.interactivity.events.onHover.parallax.enable;
  }
  move(particle) {
    const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;
    if (isSsr() || !parallaxOptions.enable) {
      return;
    }
    const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;
    if (!mousePos) {
      return;
    }
    const canvasSize = container.canvas.size, canvasCenter = {
      x: canvasSize.width * half15,
      y: canvasSize.height * half15
    }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {
      x: (mousePos.x - canvasCenter.x) * factor,
      y: (mousePos.y - canvasCenter.y) * factor
    }, { offset } = particle;
    offset.x += (centerDistance.x - offset.x) / parallaxSmooth;
    offset.y += (centerDistance.y - offset.y) / parallaxSmooth;
  }
};

// node_modules/@tsparticles/move-parallax/browser/index.js
async function loadParallaxMover(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addMover("parallax", () => {
    return Promise.resolve(new ParallaxMover());
  }, refresh);
}

// node_modules/@tsparticles/interaction-particles-attract/browser/Attractor.js
var attractFactor = 1e3;
var identity4 = 1;
var Attractor2 = class extends ParticlesInteractorBase {
  constructor(container) {
    super(container);
  }
  clear() {
  }
  init() {
  }
  interact(p1) {
    const container = this.container;
    if (p1.attractDistance === void 0) {
      p1.attractDistance = getRangeValue(p1.options.move.attract.distance) * container.retina.pixelRatio;
    }
    const distance = p1.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);
    for (const p2 of query) {
      if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {
        continue;
      }
      const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * attractFactor), ay = dy / (rotate.y * attractFactor), p1Factor = p2.size.value / p1.size.value, p2Factor = identity4 / p1Factor;
      p1.velocity.x -= ax * p1Factor;
      p1.velocity.y -= ay * p1Factor;
      p2.velocity.x += ax * p2Factor;
      p2.velocity.y += ay * p2Factor;
    }
  }
  isEnabled(particle) {
    return particle.options.move.attract.enable;
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-particles-attract/browser/index.js
async function loadParticlesAttractInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("particlesAttract", (container) => {
    return Promise.resolve(new Attractor2(container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-particles-collisions/browser/Absorb.js
var half16 = 0.5;
var absorbFactor2 = 10;
var minAbsorbFactor = 0;
function updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {
  const factor = clamp(p1.options.collisions.absorb.speed * delta.factor / absorbFactor2, minAbsorbFactor, r2);
  p1.size.value += factor * half16;
  p2.size.value -= factor;
  if (r2 <= pixelRatio) {
    p2.size.value = 0;
    p2.destroy();
  }
}
function absorb(p1, p2, delta, pixelRatio) {
  const r1 = p1.getRadius(), r2 = p2.getRadius();
  if (r1 === void 0 && r2 !== void 0) {
    p1.destroy();
  } else if (r1 !== void 0 && r2 === void 0) {
    p2.destroy();
  } else if (r1 !== void 0 && r2 !== void 0) {
    if (r1 >= r2) {
      updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);
    } else {
      updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);
    }
  }
}

// node_modules/@tsparticles/interaction-particles-collisions/browser/Bounce.js
var fixBounceSpeed = (p) => {
  if (p.collisionMaxSpeed === void 0) {
    p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);
  }
  if (p.velocity.length > p.collisionMaxSpeed) {
    p.velocity.length = p.collisionMaxSpeed;
  }
};
function bounce(p1, p2) {
  circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));
  fixBounceSpeed(p1);
  fixBounceSpeed(p2);
}

// node_modules/@tsparticles/interaction-particles-collisions/browser/Destroy.js
function destroy(p1, p2) {
  if (!p1.unbreakable && !p2.unbreakable) {
    bounce(p1, p2);
  }
  if (p1.getRadius() === void 0 && p2.getRadius() !== void 0) {
    p1.destroy();
  } else if (p1.getRadius() !== void 0 && p2.getRadius() === void 0) {
    p2.destroy();
  } else if (p1.getRadius() !== void 0 && p2.getRadius() !== void 0) {
    const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;
    deleteP.destroy();
  }
}

// node_modules/@tsparticles/interaction-particles-collisions/browser/ResolveCollision.js
function resolveCollision(p1, p2, delta, pixelRatio) {
  switch (p1.options.collisions.mode) {
    case CollisionMode.absorb: {
      absorb(p1, p2, delta, pixelRatio);
      break;
    }
    case CollisionMode.bounce: {
      bounce(p1, p2);
      break;
    }
    case CollisionMode.destroy: {
      destroy(p1, p2);
      break;
    }
  }
}

// node_modules/@tsparticles/interaction-particles-collisions/browser/Collider.js
var double15 = 2;
var Collider = class extends ParticlesInteractorBase {
  constructor(container) {
    super(container);
  }
  clear() {
  }
  init() {
  }
  interact(p1, delta) {
    if (p1.destroyed || p1.spawning) {
      return;
    }
    const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * double15);
    for (const p2 of query) {
      if (p1 === p2 || !p2.options.collisions.enable || p1.options.collisions.mode !== p2.options.collisions.mode || p2.destroyed || p2.spawning) {
        continue;
      }
      const pos2 = p2.getPosition(), radius2 = p2.getRadius();
      if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {
        continue;
      }
      const dist = getDistance(pos1, pos2), distP = radius1 + radius2;
      if (dist > distP) {
        continue;
      }
      resolveCollision(p1, p2, delta, container.retina.pixelRatio);
    }
  }
  isEnabled(particle) {
    return particle.options.collisions.enable;
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-particles-collisions/browser/index.js
async function loadParticlesCollisionsInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("particlesCollisions", (container) => {
    return Promise.resolve(new Collider(container));
  }, refresh);
}

// node_modules/@tsparticles/interaction-particles-links/browser/CircleWarp.js
var double16 = 2;
var CircleWarp = class extends Circle {
  constructor(x, y, radius, canvasSize) {
    super(x, y, radius);
    this.canvasSize = canvasSize;
    this.canvasSize = { ...canvasSize };
  }
  contains(point) {
    const { width, height } = this.canvasSize, { x, y } = point;
    return super.contains(point) || super.contains({ x: x - width, y }) || super.contains({ x: x - width, y: y - height }) || super.contains({ x, y: y - height });
  }
  intersects(range2) {
    if (super.intersects(range2)) {
      return true;
    }
    const rect = range2, circle = range2, newPos = {
      x: range2.position.x - this.canvasSize.width,
      y: range2.position.y - this.canvasSize.height
    };
    if (circle.radius !== void 0) {
      const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * double16);
      return super.intersects(biggerCircle);
    } else if (rect.size !== void 0) {
      const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * double16, rect.size.height * double16);
      return super.intersects(rectSW);
    }
    return false;
  }
};

// node_modules/@tsparticles/interaction-particles-links/browser/Options/Classes/LinksShadow.js
var LinksShadow = class {
  constructor() {
    this.blur = 5;
    this.color = new OptionsColor();
    this.color.value = "#000";
    this.enable = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.blur !== void 0) {
      this.blur = data.blur;
    }
    this.color = OptionsColor.create(this.color, data.color);
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
  }
};

// node_modules/@tsparticles/interaction-particles-links/browser/Options/Classes/LinksTriangle.js
var LinksTriangle = class {
  constructor() {
    this.enable = false;
    this.frequency = 1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.color !== void 0) {
      this.color = OptionsColor.create(this.color, data.color);
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.frequency !== void 0) {
      this.frequency = data.frequency;
    }
    if (data.opacity !== void 0) {
      this.opacity = data.opacity;
    }
  }
};

// node_modules/@tsparticles/interaction-particles-links/browser/Options/Classes/Links.js
var Links = class {
  constructor() {
    this.blink = false;
    this.color = new OptionsColor();
    this.color.value = "#fff";
    this.consent = false;
    this.distance = 100;
    this.enable = false;
    this.frequency = 1;
    this.opacity = 1;
    this.shadow = new LinksShadow();
    this.triangles = new LinksTriangle();
    this.width = 1;
    this.warp = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.id !== void 0) {
      this.id = data.id;
    }
    if (data.blink !== void 0) {
      this.blink = data.blink;
    }
    this.color = OptionsColor.create(this.color, data.color);
    if (data.consent !== void 0) {
      this.consent = data.consent;
    }
    if (data.distance !== void 0) {
      this.distance = data.distance;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.frequency !== void 0) {
      this.frequency = data.frequency;
    }
    if (data.opacity !== void 0) {
      this.opacity = data.opacity;
    }
    this.shadow.load(data.shadow);
    this.triangles.load(data.triangles);
    if (data.width !== void 0) {
      this.width = data.width;
    }
    if (data.warp !== void 0) {
      this.warp = data.warp;
    }
  }
};

// node_modules/@tsparticles/interaction-particles-links/browser/Linker.js
var squarePower2 = 2;
var opacityOffset = 1;
var origin7 = {
  x: 0,
  y: 0
};
var minDistance6 = 0;
function getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {
  const { dx, dy, distance } = getDistances(pos1, pos2);
  if (!warp || distance <= optDistance) {
    return distance;
  }
  const absDiffs = {
    x: Math.abs(dx),
    y: Math.abs(dy)
  }, warpDistances = {
    x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),
    y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y)
  };
  return Math.sqrt(warpDistances.x ** squarePower2 + warpDistances.y ** squarePower2);
}
var Linker = class extends ParticlesInteractorBase {
  constructor(container, engine) {
    super(container);
    this._setColor = (p1) => {
      if (!p1.options.links) {
        return;
      }
      const container2 = this._linkContainer, linksOptions = p1.options.links;
      let linkColor = linksOptions.id === void 0 ? container2.particles.linksColor : container2.particles.linksColors.get(linksOptions.id);
      if (linkColor) {
        return;
      }
      const optColor = linksOptions.color;
      linkColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);
      if (linksOptions.id === void 0) {
        container2.particles.linksColor = linkColor;
      } else {
        container2.particles.linksColors.set(linksOptions.id, linkColor);
      }
    };
    this._linkContainer = container;
    this._engine = engine;
  }
  clear() {
  }
  init() {
    this._linkContainer.particles.linksColor = void 0;
    this._linkContainer.particles.linksColors = /* @__PURE__ */ new Map();
  }
  interact(p1) {
    if (!p1.options.links) {
      return;
    }
    p1.links = [];
    const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;
    if (pos1.x < origin7.x || pos1.y < origin7.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {
      return;
    }
    const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance6, warp = linkOpt1.warp;
    let range2;
    if (warp) {
      range2 = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);
    } else {
      range2 = new Circle(pos1.x, pos1.y, optDistance);
    }
    const query = container.particles.quadTree.query(range2);
    for (const p2 of query) {
      const linkOpt2 = p2.options.links;
      if (p1 === p2 || !(linkOpt2 == null ? void 0 : linkOpt2.enable) || linkOpt1.id !== linkOpt2.id || p2.spawning || p2.destroyed || !p2.links || p1.links.some((t) => t.destination === p2) || p2.links.some((t) => t.destination === p1)) {
        continue;
      }
      const pos2 = p2.getPosition();
      if (pos2.x < origin7.x || pos2.y < origin7.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {
        continue;
      }
      const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);
      if (distance > optDistance) {
        continue;
      }
      const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;
      this._setColor(p1);
      p1.links.push({
        destination: p2,
        opacity: opacityLine
      });
    }
  }
  isEnabled(particle) {
    var _a;
    return !!((_a = particle.options.links) == null ? void 0 : _a.enable);
  }
  loadParticlesOptions(options, ...sources) {
    if (!options.links) {
      options.links = new Links();
    }
    for (const source of sources) {
      options.links.load(source == null ? void 0 : source.links);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-particles-links/browser/interaction.js
async function loadLinksInteraction(engine, refresh = true) {
  await engine.addInteractor("particlesLinks", async (container) => {
    return Promise.resolve(new Linker(container, engine));
  }, refresh);
}

// node_modules/@tsparticles/interaction-particles-links/browser/Utils.js
function drawTriangle(context, p1, p2, p3) {
  context.beginPath();
  context.moveTo(p1.x, p1.y);
  context.lineTo(p2.x, p2.y);
  context.lineTo(p3.x, p3.y);
  context.closePath();
}
function drawLinkLine(params) {
  let drawn = false;
  const { begin, end, engine, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;
  if (getDistance(begin, end) <= maxDistance) {
    drawLine(context, begin, end);
    drawn = true;
  } else if (links.warp) {
    let pi1;
    let pi2;
    const endNE = {
      x: end.x - canvasSize.width,
      y: end.y
    };
    const d1 = getDistances(begin, endNE);
    if (d1.distance <= maxDistance) {
      const yi = begin.y - d1.dy / d1.dx * begin.x;
      pi1 = { x: 0, y: yi };
      pi2 = { x: canvasSize.width, y: yi };
    } else {
      const endSW = {
        x: end.x,
        y: end.y - canvasSize.height
      };
      const d2 = getDistances(begin, endSW);
      if (d2.distance <= maxDistance) {
        const yi = begin.y - d2.dy / d2.dx * begin.x;
        const xi = -yi / (d2.dy / d2.dx);
        pi1 = { x: xi, y: 0 };
        pi2 = { x: xi, y: canvasSize.height };
      } else {
        const endSE = {
          x: end.x - canvasSize.width,
          y: end.y - canvasSize.height
        };
        const d3 = getDistances(begin, endSE);
        if (d3.distance <= maxDistance) {
          const yi = begin.y - d3.dy / d3.dx * begin.x;
          const xi = -yi / (d3.dy / d3.dx);
          pi1 = { x: xi, y: yi };
          pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };
        }
      }
    }
    if (pi1 && pi2) {
      drawLine(context, begin, pi1);
      drawLine(context, end, pi2);
      drawn = true;
    }
  }
  if (!drawn) {
    return;
  }
  context.lineWidth = width;
  if (backgroundMask.enable) {
    context.globalCompositeOperation = backgroundMask.composite;
  }
  context.strokeStyle = getStyleFromRgb(colorLine, opacity);
  const { shadow } = links;
  if (shadow.enable) {
    const shadowColor = rangeColorToRgb(engine, shadow.color);
    if (shadowColor) {
      context.shadowBlur = shadow.blur;
      context.shadowColor = getStyleFromRgb(shadowColor);
    }
  }
  context.stroke();
}
function drawLinkTriangle(params) {
  const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;
  drawTriangle(context, pos1, pos2, pos3);
  if (backgroundMask.enable) {
    context.globalCompositeOperation = backgroundMask.composite;
  }
  context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);
  context.fill();
}
function getLinkKey(ids) {
  ids.sort((a, b) => a - b);
  return ids.join("_");
}
function setLinkFrequency(particles, dictionary) {
  const key = getLinkKey(particles.map((t) => t.id));
  let res = dictionary.get(key);
  if (res === void 0) {
    res = getRandom();
    dictionary.set(key, res);
  }
  return res;
}

// node_modules/@tsparticles/interaction-particles-links/browser/LinkInstance.js
var minOpacity2 = 0;
var minWidth2 = 0;
var minDistance7 = 0;
var half17 = 0.5;
var maxFrequency = 1;
var LinkInstance = class {
  constructor(container, engine) {
    this._drawLinkLine = (p1, link) => {
      const p1LinksOptions = p1.options.links;
      if (!(p1LinksOptions == null ? void 0 : p1LinksOptions.enable)) {
        return;
      }
      const container2 = this._container, options = container2.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();
      let opacity = link.opacity;
      container2.canvas.draw((ctx) => {
        var _a;
        let colorLine;
        const twinkle = (_a = p1.options.twinkle) == null ? void 0 : _a.lines;
        if (twinkle == null ? void 0 : twinkle.enable) {
          const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(this._engine, twinkle.color), twinkling = getRandom() < twinkleFreq;
          if (twinkling && twinkleRgb) {
            colorLine = twinkleRgb;
            opacity = getRangeValue(twinkle.opacity);
          }
        }
        if (!colorLine) {
          const linkColor = p1LinksOptions.id !== void 0 ? container2.particles.linksColors.get(p1LinksOptions.id) : container2.particles.linksColor;
          colorLine = getLinkColor(p1, p2, linkColor);
        }
        if (!colorLine) {
          return;
        }
        const width = p1.retina.linksWidth ?? minWidth2, maxDistance = p1.retina.linksDistance ?? minDistance7, { backgroundMask } = options;
        drawLinkLine({
          context: ctx,
          width,
          begin: pos1,
          end: pos2,
          engine: this._engine,
          maxDistance,
          canvasSize: container2.canvas.size,
          links: p1LinksOptions,
          backgroundMask,
          colorLine,
          opacity
        });
      });
    };
    this._drawLinkTriangle = (p1, link1, link2) => {
      const linksOptions = p1.options.links;
      if (!(linksOptions == null ? void 0 : linksOptions.enable)) {
        return;
      }
      const triangleOptions = linksOptions.triangles;
      if (!triangleOptions.enable) {
        return;
      }
      const container2 = this._container, options = container2.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) * half17;
      if (opacityTriangle <= minOpacity2) {
        return;
      }
      container2.canvas.draw((ctx) => {
        const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? minDistance7;
        if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {
          return;
        }
        let colorTriangle = rangeColorToRgb(this._engine, triangleOptions.color);
        if (!colorTriangle) {
          const linkColor = linksOptions.id !== void 0 ? container2.particles.linksColors.get(linksOptions.id) : container2.particles.linksColor;
          colorTriangle = getLinkColor(p1, p2, linkColor);
        }
        if (!colorTriangle) {
          return;
        }
        drawLinkTriangle({
          context: ctx,
          pos1,
          pos2,
          pos3,
          backgroundMask: options.backgroundMask,
          colorTriangle,
          opacityTriangle
        });
      });
    };
    this._drawTriangles = (options, p1, link, p1Links) => {
      var _a, _b, _c;
      const p2 = link.destination;
      if (!(((_a = options.links) == null ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) == null ? void 0 : _b.triangles.enable))) {
        return;
      }
      const vertices = (_c = p2.links) == null ? void 0 : _c.filter((t) => {
        const linkFreq = this._getLinkFrequency(p2, t.destination), minCount = 0;
        return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex((l) => l.destination === t.destination) >= minCount;
      });
      if (!(vertices == null ? void 0 : vertices.length)) {
        return;
      }
      for (const vertex of vertices) {
        const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);
        if (triangleFreq > options.links.triangles.frequency) {
          continue;
        }
        this._drawLinkTriangle(p1, link, vertex);
      }
    };
    this._getLinkFrequency = (p1, p2) => {
      return setLinkFrequency([p1, p2], this._freqs.links);
    };
    this._getTriangleFrequency = (p1, p2, p3) => {
      return setLinkFrequency([p1, p2, p3], this._freqs.triangles);
    };
    this._container = container;
    this._engine = engine;
    this._freqs = {
      links: /* @__PURE__ */ new Map(),
      triangles: /* @__PURE__ */ new Map()
    };
  }
  drawParticle(context, particle) {
    const { links, options } = particle;
    if (!(links == null ? void 0 : links.length)) {
      return;
    }
    const p1Links = links.filter((l) => options.links && (options.links.frequency >= maxFrequency || this._getLinkFrequency(particle, l.destination) <= options.links.frequency));
    for (const link of p1Links) {
      this._drawTriangles(options, particle, link, p1Links);
      if (link.opacity > minOpacity2 && (particle.retina.linksWidth ?? minWidth2) > minWidth2) {
        this._drawLinkLine(particle, link);
      }
    }
  }
  async init() {
    this._freqs.links = /* @__PURE__ */ new Map();
    this._freqs.triangles = /* @__PURE__ */ new Map();
    await Promise.resolve();
  }
  particleCreated(particle) {
    particle.links = [];
    if (!particle.options.links) {
      return;
    }
    const ratio = this._container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;
    retina.linksDistance = distance * ratio;
    retina.linksWidth = width * ratio;
  }
  particleDestroyed(particle) {
    particle.links = [];
  }
};

// node_modules/@tsparticles/interaction-particles-links/browser/LinksPlugin.js
var LinksPlugin = class {
  constructor(engine) {
    this.id = "links";
    this._engine = engine;
  }
  getPlugin(container) {
    return Promise.resolve(new LinkInstance(container, this._engine));
  }
  loadOptions() {
  }
  needsPlugin() {
    return true;
  }
};

// node_modules/@tsparticles/interaction-particles-links/browser/plugin.js
async function loadLinksPlugin(engine, refresh = true) {
  const plugin = new LinksPlugin(engine);
  await engine.addPlugin(plugin, refresh);
}

// node_modules/@tsparticles/interaction-particles-links/browser/index.js
async function loadParticlesLinksInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await loadLinksInteraction(engine, refresh);
  await loadLinksPlugin(engine, refresh);
}

// node_modules/@tsparticles/shape-polygon/browser/Utils.js
var piDeg = 180;
var origin8 = { x: 0, y: 0 };
var sidesOffset = 2;
function drawPolygon(data, start, side) {
  const { context } = data, sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = piDeg * (decimalSides - sidesOffset) / decimalSides, interiorAngle = Math.PI - degToRad(interiorAngleDegrees);
  if (!context) {
    return;
  }
  context.beginPath();
  context.translate(start.x, start.y);
  context.moveTo(origin8.x, origin8.y);
  for (let i = 0; i < sideCount; i++) {
    context.lineTo(side.length, origin8.y);
    context.translate(side.length, origin8.y);
    context.rotate(interiorAngle);
  }
}

// node_modules/@tsparticles/shape-polygon/browser/PolygonDrawerBase.js
var defaultSides = 5;
var PolygonDrawerBase = class {
  draw(data) {
    const { particle, radius } = data, start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius);
    drawPolygon(data, start, side);
  }
  getSidesCount(particle) {
    const polygon2 = particle.shapeData;
    return Math.round(getRangeValue((polygon2 == null ? void 0 : polygon2.sides) ?? defaultSides));
  }
};

// node_modules/@tsparticles/shape-polygon/browser/PolygonDrawer.js
var sidesCenterFactor = 3.5;
var yFactor = 2.66;
var sidesFactor = 3;
var PolygonDrawer = class extends PolygonDrawerBase {
  constructor() {
    super(...arguments);
    this.validTypes = ["polygon"];
  }
  getCenter(particle, radius) {
    return {
      x: -radius / (particle.sides / sidesCenterFactor),
      y: -radius / (yFactor / sidesCenterFactor)
    };
  }
  getSidesData(particle, radius) {
    const sides7 = particle.sides;
    return {
      count: {
        denominator: 1,
        numerator: sides7
      },
      length: radius * yFactor / (sides7 / sidesFactor)
    };
  }
};

// node_modules/@tsparticles/shape-polygon/browser/TriangleDrawer.js
var yFactor2 = 1.66;
var sides5 = 3;
var double17 = 2;
var TriangleDrawer = class extends PolygonDrawerBase {
  constructor() {
    super(...arguments);
    this.validTypes = ["triangle"];
  }
  getCenter(particle, radius) {
    return {
      x: -radius,
      y: radius / yFactor2
    };
  }
  getSidesCount() {
    return sides5;
  }
  getSidesData(particle, radius) {
    const diameter = radius * double17;
    return {
      count: {
        denominator: 2,
        numerator: 3
      },
      length: diameter
    };
  }
};

// node_modules/@tsparticles/shape-polygon/browser/index.js
async function loadGenericPolygonShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new PolygonDrawer(), refresh);
}
async function loadTriangleShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new TriangleDrawer(), refresh);
}
async function loadPolygonShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await loadGenericPolygonShape(engine, refresh);
  await loadTriangleShape(engine, refresh);
}

// node_modules/@tsparticles/updater-rotate/browser/Options/Classes/RotateAnimation.js
var RotateAnimation = class {
  constructor() {
    this.enable = false;
    this.speed = 0;
    this.decay = 0;
    this.sync = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.speed !== void 0) {
      this.speed = setRangeValue(data.speed);
    }
    if (data.decay !== void 0) {
      this.decay = setRangeValue(data.decay);
    }
    if (data.sync !== void 0) {
      this.sync = data.sync;
    }
  }
};

// node_modules/@tsparticles/updater-rotate/browser/Options/Classes/Rotate.js
var Rotate = class extends ValueWithRandom {
  constructor() {
    super();
    this.animation = new RotateAnimation();
    this.direction = RotateDirection.clockwise;
    this.path = false;
    this.value = 0;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    super.load(data);
    if (data.direction !== void 0) {
      this.direction = data.direction;
    }
    this.animation.load(data.animation);
    if (data.path !== void 0) {
      this.path = data.path;
    }
  }
};

// node_modules/@tsparticles/updater-rotate/browser/RotateUpdater.js
var double18 = 2;
var doublePI9 = Math.PI * double18;
var identity5 = 1;
var doublePIDeg = 360;
var RotateUpdater = class {
  constructor(container) {
    this.container = container;
  }
  init(particle) {
    const rotateOptions = particle.options.rotate;
    if (!rotateOptions) {
      return;
    }
    particle.rotate = {
      enable: rotateOptions.animation.enable,
      value: degToRad(getRangeValue(rotateOptions.value)),
      min: 0,
      max: doublePI9
    };
    particle.pathRotation = rotateOptions.path;
    let rotateDirection = rotateOptions.direction;
    if (rotateDirection === RotateDirection.random) {
      const index = Math.floor(getRandom() * double18), minIndex2 = 0;
      rotateDirection = index > minIndex2 ? RotateDirection.counterClockwise : RotateDirection.clockwise;
    }
    switch (rotateDirection) {
      case RotateDirection.counterClockwise:
      case "counterClockwise":
        particle.rotate.status = AnimationStatus.decreasing;
        break;
      case RotateDirection.clockwise:
        particle.rotate.status = AnimationStatus.increasing;
        break;
    }
    const rotateAnimation = rotateOptions.animation;
    if (rotateAnimation.enable) {
      particle.rotate.decay = identity5 - getRangeValue(rotateAnimation.decay);
      particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / doublePIDeg * this.container.retina.reduceFactor;
      if (!rotateAnimation.sync) {
        particle.rotate.velocity *= getRandom();
      }
    }
    particle.rotation = particle.rotate.value;
  }
  isEnabled(particle) {
    const rotate = particle.options.rotate;
    if (!rotate) {
      return false;
    }
    return !particle.destroyed && !particle.spawning && (!!rotate.value || rotate.animation.enable || rotate.path);
  }
  loadOptions(options, ...sources) {
    if (!options.rotate) {
      options.rotate = new Rotate();
    }
    for (const source of sources) {
      options.rotate.load(source == null ? void 0 : source.rotate);
    }
  }
  update(particle, delta) {
    if (!this.isEnabled(particle)) {
      return;
    }
    particle.isRotating = !!particle.rotate;
    if (!particle.rotate) {
      return;
    }
    updateAnimation(particle, particle.rotate, false, DestroyType.none, delta);
    particle.rotation = particle.rotate.value;
  }
};

// node_modules/@tsparticles/updater-rotate/browser/index.js
async function loadRotateUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("rotate", (container) => {
    return Promise.resolve(new RotateUpdater(container));
  }, refresh);
}

// node_modules/@tsparticles/shape-square/browser/Utils.js
var fixFactorSquared = 2;
var fixFactor = Math.sqrt(fixFactorSquared);
var double19 = 2;
function drawSquare(data) {
  const { context, radius } = data, fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * double19;
  context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);
}

// node_modules/@tsparticles/shape-square/browser/SquareDrawer.js
var sides6 = 4;
var SquareDrawer = class {
  constructor() {
    this.validTypes = ["edge", "square"];
  }
  draw(data) {
    drawSquare(data);
  }
  getSidesCount() {
    return sides6;
  }
};

// node_modules/@tsparticles/shape-square/browser/index.js
async function loadSquareShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new SquareDrawer(), refresh);
}

// node_modules/@tsparticles/shape-star/browser/Utils.js
var defaultInset = 2;
var origin9 = { x: 0, y: 0 };
function drawStar(data) {
  const { context, particle, radius } = data, sides7 = particle.sides, inset = particle.starInset ?? defaultInset;
  context.moveTo(origin9.x, origin9.y - radius);
  for (let i = 0; i < sides7; i++) {
    context.rotate(Math.PI / sides7);
    context.lineTo(origin9.x, origin9.y - radius * inset);
    context.rotate(Math.PI / sides7);
    context.lineTo(origin9.x, origin9.y - radius);
  }
}

// node_modules/@tsparticles/shape-star/browser/StarDrawer.js
var defaultInset2 = 2;
var defaultSides2 = 5;
var StarDrawer = class {
  constructor() {
    this.validTypes = ["star"];
  }
  draw(data) {
    drawStar(data);
  }
  getSidesCount(particle) {
    const star = particle.shapeData;
    return Math.round(getRangeValue((star == null ? void 0 : star.sides) ?? defaultSides2));
  }
  particleInit(container, particle) {
    const star = particle.shapeData;
    particle.starInset = getRangeValue((star == null ? void 0 : star.inset) ?? defaultInset2);
  }
};

// node_modules/@tsparticles/shape-star/browser/index.js
async function loadStarShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new StarDrawer(), refresh);
}

// node_modules/@tsparticles/updater-stroke-color/browser/StrokeColorUpdater.js
var defaultOpacity3 = 1;
var StrokeColorUpdater = class {
  constructor(container, engine) {
    this._container = container;
    this._engine = engine;
  }
  init(particle) {
    var _a;
    const container = this._container, options = particle.options;
    const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);
    particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;
    particle.strokeOpacity = getRangeValue(stroke.opacity ?? defaultOpacity3);
    particle.strokeAnimation = (_a = stroke.color) == null ? void 0 : _a.animation;
    const strokeHslColor = rangeColorToHsl(this._engine, stroke.color) ?? particle.getFillColor();
    if (strokeHslColor) {
      particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);
    }
  }
  isEnabled(particle) {
    const color = particle.strokeAnimation, { strokeColor } = particle;
    return !particle.destroyed && !particle.spawning && !!color && ((strokeColor == null ? void 0 : strokeColor.h.value) !== void 0 && strokeColor.h.enable || (strokeColor == null ? void 0 : strokeColor.s.value) !== void 0 && strokeColor.s.enable || (strokeColor == null ? void 0 : strokeColor.l.value) !== void 0 && strokeColor.l.enable);
  }
  update(particle, delta) {
    if (!this.isEnabled(particle)) {
      return;
    }
    updateColor(particle.strokeColor, delta);
  }
};

// node_modules/@tsparticles/updater-stroke-color/browser/index.js
async function loadStrokeColorUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("strokeColor", (container) => {
    return Promise.resolve(new StrokeColorUpdater(container, engine));
  }, refresh);
}

// node_modules/@tsparticles/slim/browser/index.js
async function loadSlim(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await loadParallaxMover(engine, false);
  await loadExternalAttractInteraction(engine, false);
  await loadExternalBounceInteraction(engine, false);
  await loadExternalBubbleInteraction(engine, false);
  await loadExternalConnectInteraction(engine, false);
  await loadExternalGrabInteraction(engine, false);
  await loadExternalPauseInteraction(engine, false);
  await loadExternalPushInteraction(engine, false);
  await loadExternalRemoveInteraction(engine, false);
  await loadExternalRepulseInteraction(engine, false);
  await loadExternalSlowInteraction(engine, false);
  await loadParticlesAttractInteraction(engine, false);
  await loadParticlesCollisionsInteraction(engine, false);
  await loadParticlesLinksInteraction(engine, false);
  await loadEasingQuadPlugin(engine, false);
  await loadEmojiShape(engine, false);
  await loadImageShape(engine, false);
  await loadLineShape(engine, false);
  await loadPolygonShape(engine, false);
  await loadSquareShape(engine, false);
  await loadStarShape(engine, false);
  await loadLifeUpdater(engine, false);
  await loadRotateUpdater(engine, false);
  await loadStrokeColorUpdater(engine, false);
  await loadBasic(engine, refresh);
}

// node_modules/@tsparticles/shape-text/browser/Utils.js
var double20 = 2;
var half18 = 0.5;
function drawText(data) {
  const { context, particle, radius, opacity } = data, character = particle.shapeData;
  if (!character) {
    return;
  }
  const textData = character.value;
  if (textData === void 0) {
    return;
  }
  if (particle.text === void 0) {
    particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);
  }
  const text = particle.text, style = character.style ?? "", weight = character.weight ?? "400", size = Math.round(radius) * double20, font = character.font ?? "Verdana", fill = particle.shapeFill;
  const lines = text == null ? void 0 : text.split("\n");
  if (!lines) {
    return;
  }
  context.font = `${style} ${weight} ${size}px "${font}"`;
  context.globalAlpha = opacity;
  for (let i = 0; i < lines.length; i++) {
    drawLine3(context, lines[i], radius, opacity, i, fill);
  }
  context.globalAlpha = 1;
}
function drawLine3(context, line, radius, opacity, index, fill) {
  const offsetX = line.length * radius * half18, pos = {
    x: -offsetX,
    y: radius * half18
  }, diameter = radius * double20;
  if (fill) {
    context.fillText(line, pos.x, pos.y + diameter * index);
  } else {
    context.strokeText(line, pos.x, pos.y + diameter * index);
  }
}

// node_modules/@tsparticles/shape-text/browser/TextDrawer.js
var TextDrawer = class {
  constructor() {
    this.validTypes = ["text", "character", "char", "multiline-text"];
  }
  draw(data) {
    drawText(data);
  }
  async init(container) {
    const options = container.actualOptions, { validTypes } = this;
    if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {
      const shapeOptions = validTypes.map((t) => options.particles.shape.options[t]).find((t) => !!t), promises = [];
      executeOnSingleOrMultiple(shapeOptions, (shape) => {
        promises.push(loadFont(shape.font, shape.weight));
      });
      await Promise.all(promises);
    }
  }
  particleInit(container, particle) {
    if (!particle.shape || !this.validTypes.includes(particle.shape)) {
      return;
    }
    const character = particle.shapeData;
    if (character === void 0) {
      return;
    }
    const textData = character.value;
    if (textData === void 0) {
      return;
    }
    particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);
  }
};

// node_modules/@tsparticles/shape-text/browser/index.js
async function loadTextShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new TextDrawer(), refresh);
}

// node_modules/@tsparticles/updater-tilt/browser/TiltDirection.js
var TiltDirection;
(function(TiltDirection2) {
  TiltDirection2["clockwise"] = "clockwise";
  TiltDirection2["counterClockwise"] = "counter-clockwise";
  TiltDirection2["random"] = "random";
})(TiltDirection || (TiltDirection = {}));

// node_modules/@tsparticles/updater-tilt/browser/Options/Classes/TiltAnimation.js
var TiltAnimation = class {
  constructor() {
    this.enable = false;
    this.speed = 0;
    this.decay = 0;
    this.sync = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.speed !== void 0) {
      this.speed = setRangeValue(data.speed);
    }
    if (data.decay !== void 0) {
      this.decay = setRangeValue(data.decay);
    }
    if (data.sync !== void 0) {
      this.sync = data.sync;
    }
  }
};

// node_modules/@tsparticles/updater-tilt/browser/Options/Classes/Tilt.js
var Tilt = class extends ValueWithRandom {
  constructor() {
    super();
    this.animation = new TiltAnimation();
    this.direction = TiltDirection.clockwise;
    this.enable = false;
    this.value = 0;
  }
  load(data) {
    super.load(data);
    if (isNull(data)) {
      return;
    }
    this.animation.load(data.animation);
    if (data.direction !== void 0) {
      this.direction = data.direction;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
  }
};

// node_modules/@tsparticles/updater-tilt/browser/TiltUpdater.js
var identity6 = 1;
var double21 = 2;
var doublePI10 = Math.PI * double21;
var maxAngle4 = 360;
var TiltUpdater = class {
  constructor(container) {
    this.container = container;
  }
  getTransformValues(particle) {
    var _a;
    const tilt = ((_a = particle.tilt) == null ? void 0 : _a.enable) && particle.tilt;
    return {
      b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : void 0,
      c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : void 0
    };
  }
  init(particle) {
    var _a;
    const tiltOptions = particle.options.tilt;
    if (!tiltOptions) {
      return;
    }
    particle.tilt = {
      enable: tiltOptions.enable,
      value: degToRad(getRangeValue(tiltOptions.value)),
      sinDirection: getRandom() >= half ? identity6 : -identity6,
      cosDirection: getRandom() >= half ? identity6 : -identity6,
      min: 0,
      max: doublePI10
    };
    let tiltDirection = tiltOptions.direction;
    if (tiltDirection === TiltDirection.random) {
      const index = Math.floor(getRandom() * double21), minIndex2 = 0;
      tiltDirection = index > minIndex2 ? TiltDirection.counterClockwise : TiltDirection.clockwise;
    }
    switch (tiltDirection) {
      case TiltDirection.counterClockwise:
      case "counterClockwise":
        particle.tilt.status = AnimationStatus.decreasing;
        break;
      case TiltDirection.clockwise:
        particle.tilt.status = AnimationStatus.increasing;
        break;
    }
    const tiltAnimation = (_a = particle.options.tilt) == null ? void 0 : _a.animation;
    if (tiltAnimation == null ? void 0 : tiltAnimation.enable) {
      particle.tilt.decay = identity6 - getRangeValue(tiltAnimation.decay);
      particle.tilt.velocity = getRangeValue(tiltAnimation.speed) / maxAngle4 * this.container.retina.reduceFactor;
      if (!tiltAnimation.sync) {
        particle.tilt.velocity *= getRandom();
      }
    }
  }
  isEnabled(particle) {
    var _a;
    const tiltAnimation = (_a = particle.options.tilt) == null ? void 0 : _a.animation;
    return !particle.destroyed && !particle.spawning && !!(tiltAnimation == null ? void 0 : tiltAnimation.enable);
  }
  loadOptions(options, ...sources) {
    if (!options.tilt) {
      options.tilt = new Tilt();
    }
    for (const source of sources) {
      options.tilt.load(source == null ? void 0 : source.tilt);
    }
  }
  async update(particle, delta) {
    if (!this.isEnabled(particle) || !particle.tilt) {
      return;
    }
    updateAnimation(particle, particle.tilt, false, DestroyType.none, delta);
    await Promise.resolve();
  }
};

// node_modules/@tsparticles/updater-tilt/browser/index.js
async function loadTiltUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("tilt", (container) => {
    return Promise.resolve(new TiltUpdater(container));
  }, refresh);
}

// node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/TwinkleValues.js
var TwinkleValues = class {
  constructor() {
    this.enable = false;
    this.frequency = 0.05;
    this.opacity = 1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.color !== void 0) {
      this.color = OptionsColor.create(this.color, data.color);
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.frequency !== void 0) {
      this.frequency = data.frequency;
    }
    if (data.opacity !== void 0) {
      this.opacity = setRangeValue(data.opacity);
    }
  }
};

// node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/Twinkle.js
var Twinkle = class {
  constructor() {
    this.lines = new TwinkleValues();
    this.particles = new TwinkleValues();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.lines.load(data.lines);
    this.particles.load(data.particles);
  }
};

// node_modules/@tsparticles/updater-twinkle/browser/TwinkleUpdater.js
var TwinkleUpdater = class {
  constructor(engine) {
    this._engine = engine;
  }
  getColorStyles(particle, context, radius, opacity) {
    const pOptions = particle.options, twinkleOptions = pOptions.twinkle;
    if (!twinkleOptions) {
      return {};
    }
    const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOffset = 1, zOpacityFactor = (zOffset - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(this._engine, twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : void 0, res = {}, needsTwinkle = twinkling && twinkleStyle;
    res.fill = needsTwinkle ? twinkleStyle : void 0;
    res.stroke = needsTwinkle ? twinkleStyle : void 0;
    return res;
  }
  async init() {
    await Promise.resolve();
  }
  isEnabled(particle) {
    const pOptions = particle.options, twinkleOptions = pOptions.twinkle;
    if (!twinkleOptions) {
      return false;
    }
    return twinkleOptions.particles.enable;
  }
  loadOptions(options, ...sources) {
    if (!options.twinkle) {
      options.twinkle = new Twinkle();
    }
    for (const source of sources) {
      options.twinkle.load(source == null ? void 0 : source.twinkle);
    }
  }
  async update() {
    await Promise.resolve();
  }
};

// node_modules/@tsparticles/updater-twinkle/browser/index.js
async function loadTwinkleUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("twinkle", () => {
    return Promise.resolve(new TwinkleUpdater(engine));
  }, refresh);
}

// node_modules/@tsparticles/updater-wobble/browser/Options/Classes/WobbleSpeed.js
var WobbleSpeed = class {
  constructor() {
    this.angle = 50;
    this.move = 10;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.angle !== void 0) {
      this.angle = setRangeValue(data.angle);
    }
    if (data.move !== void 0) {
      this.move = setRangeValue(data.move);
    }
  }
};

// node_modules/@tsparticles/updater-wobble/browser/Options/Classes/Wobble.js
var Wobble = class {
  constructor() {
    this.distance = 5;
    this.enable = false;
    this.speed = new WobbleSpeed();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.distance !== void 0) {
      this.distance = setRangeValue(data.distance);
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.speed !== void 0) {
      if (isNumber(data.speed)) {
        this.speed.load({ angle: data.speed });
      } else {
        const rangeSpeed = data.speed;
        if (rangeSpeed.min !== void 0) {
          this.speed.load({ angle: rangeSpeed });
        } else {
          this.speed.load(data.speed);
        }
      }
    }
  }
};

// node_modules/@tsparticles/updater-wobble/browser/Utils.js
var defaultDistance = 0;
var double22 = 2;
var doublePI11 = Math.PI * double22;
var distanceFactor = 60;
function updateWobble(particle, delta) {
  const { wobble: wobbleOptions } = particle.options, { wobble } = particle;
  if (!(wobbleOptions == null ? void 0 : wobbleOptions.enable) || !wobble) {
    return;
  }
  const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = moveSpeed * ((particle.retina.wobbleDistance ?? defaultDistance) * delta.factor) / (millisecondsToSeconds / distanceFactor), max = doublePI11, { position } = particle;
  wobble.angle += angleSpeed;
  if (wobble.angle > max) {
    wobble.angle -= max;
  }
  position.x += distance * Math.cos(wobble.angle);
  position.y += distance * Math.abs(Math.sin(wobble.angle));
}

// node_modules/@tsparticles/updater-wobble/browser/WobbleUpdater.js
var double23 = 2;
var doublePI12 = Math.PI * double23;
var maxAngle5 = 360;
var moveSpeedFactor2 = 10;
var defaultDistance2 = 0;
var WobbleUpdater = class {
  constructor(container) {
    this.container = container;
  }
  init(particle) {
    const wobbleOpt = particle.options.wobble;
    if (wobbleOpt == null ? void 0 : wobbleOpt.enable) {
      particle.wobble = {
        angle: getRandom() * doublePI12,
        angleSpeed: getRangeValue(wobbleOpt.speed.angle) / maxAngle5,
        moveSpeed: getRangeValue(wobbleOpt.speed.move) / moveSpeedFactor2
      };
    } else {
      particle.wobble = {
        angle: 0,
        angleSpeed: 0,
        moveSpeed: 0
      };
    }
    particle.retina.wobbleDistance = getRangeValue((wobbleOpt == null ? void 0 : wobbleOpt.distance) ?? defaultDistance2) * this.container.retina.pixelRatio;
  }
  isEnabled(particle) {
    var _a;
    return !particle.destroyed && !particle.spawning && !!((_a = particle.options.wobble) == null ? void 0 : _a.enable);
  }
  loadOptions(options, ...sources) {
    if (!options.wobble) {
      options.wobble = new Wobble();
    }
    for (const source of sources) {
      options.wobble.load(source == null ? void 0 : source.wobble);
    }
  }
  update(particle, delta) {
    if (!this.isEnabled(particle)) {
      return;
    }
    updateWobble(particle, delta);
  }
};

// node_modules/@tsparticles/updater-wobble/browser/index.js
async function loadWobbleUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("wobble", (container) => {
    return Promise.resolve(new WobbleUpdater(container));
  }, refresh);
}

// node_modules/tsparticles/browser/index.js
async function loadFull(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await loadDestroyUpdater(engine, false);
  await loadRollUpdater(engine, false);
  await loadTiltUpdater(engine, false);
  await loadTwinkleUpdater(engine, false);
  await loadWobbleUpdater(engine, false);
  await loadTextShape(engine, false);
  await loadExternalTrailInteraction(engine, false);
  await loadAbsorbersPlugin(engine, false);
  await loadEmittersPlugin(engine, false);
  await loadEmittersShapeCircle(engine, false);
  await loadEmittersShapeSquare(engine, false);
  await loadSlim(engine, refresh);
}

// node_modules/@tsparticles/updater-gradient/browser/Options/Classes/GradientColorOpacityAnimation.js
var GradientColorOpacityAnimation = class {
  constructor() {
    this.count = 0;
    this.enable = false;
    this.speed = 0;
    this.decay = 0;
    this.delay = 0;
    this.sync = false;
    this.startValue = StartValueType.random;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.count !== void 0) {
      this.count = setRangeValue(data.count);
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.speed !== void 0) {
      this.speed = setRangeValue(data.speed);
    }
    if (data.sync !== void 0) {
      this.sync = data.sync;
    }
    if (data.startValue !== void 0) {
      this.startValue = data.startValue;
    }
    if (data.decay !== void 0) {
      this.decay = setRangeValue(data.decay);
    }
    if (data.delay !== void 0) {
      this.delay = setRangeValue(data.delay);
    }
  }
};

// node_modules/@tsparticles/updater-gradient/browser/Options/Classes/GradientColorOpacity.js
var GradientColorOpacity = class {
  constructor() {
    this.value = 0;
    this.animation = new GradientColorOpacityAnimation();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.animation.load(data.animation);
    if (data.value !== void 0) {
      this.value = setRangeValue(data.value);
    }
  }
};

// node_modules/@tsparticles/updater-gradient/browser/Options/Classes/AnimatableGradientColor.js
var AnimatableGradientColor = class {
  constructor() {
    this.stop = 0;
    this.value = new AnimatableColor();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.stop !== void 0) {
      this.stop = data.stop;
    }
    this.value = AnimatableColor.create(this.value, data.value);
    if (data.opacity !== void 0) {
      this.opacity = new GradientColorOpacity();
      if (isNumber(data.opacity)) {
        this.opacity.value = data.opacity;
      } else {
        this.opacity.load(data.opacity);
      }
    }
  }
};

// node_modules/@tsparticles/updater-gradient/browser/Options/Classes/GradientAngleAnimation.js
var GradientAngleAnimation = class {
  constructor() {
    this.count = 0;
    this.enable = false;
    this.speed = 0;
    this.decay = 0;
    this.delay = 0;
    this.sync = false;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.count !== void 0) {
      this.count = setRangeValue(data.count);
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.speed !== void 0) {
      this.speed = setRangeValue(data.speed);
    }
    if (data.decay !== void 0) {
      this.decay = setRangeValue(data.decay);
    }
    if (data.delay !== void 0) {
      this.delay = setRangeValue(data.delay);
    }
    if (data.sync !== void 0) {
      this.sync = data.sync;
    }
  }
};

// node_modules/@tsparticles/updater-gradient/browser/Options/Classes/GradientAngle.js
var GradientAngle = class {
  constructor() {
    this.value = 0;
    this.animation = new GradientAngleAnimation();
    this.direction = RotateDirection.clockwise;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.animation.load(data.animation);
    if (data.value !== void 0) {
      this.value = setRangeValue(data.value);
    }
    if (data.direction !== void 0) {
      this.direction = data.direction;
    }
  }
};

// node_modules/@tsparticles/updater-gradient/browser/Options/Classes/AnimatableGradient.js
var AnimatableGradient = class {
  constructor() {
    this.angle = new GradientAngle();
    this.colors = [];
    this.type = GradientType.random;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.angle.load(data.angle);
    if (data.colors !== void 0) {
      this.colors = data.colors.map((s) => {
        const tmp = new AnimatableGradientColor();
        tmp.load(s);
        return tmp;
      });
    }
    if (data.type !== void 0) {
      this.type = data.type;
    }
  }
};

// node_modules/@tsparticles/updater-gradient/browser/Utils.js
function updateGradient(particle, delta) {
  const { gradient: gradient2 } = particle;
  if (!gradient2) {
    return;
  }
  updateAnimation(particle, gradient2.angle, false, DestroyType.none, delta);
  for (const color of gradient2.colors) {
    updateColor(color.value, delta);
    if (color.opacity) {
      updateAnimation(particle, color.opacity, true, DestroyType.none, delta);
    }
  }
}

// node_modules/@tsparticles/updater-gradient/browser/GradientUpdater.js
var double24 = 2;
var doublePI13 = Math.PI * double24;
var GradientUpdater = class {
  constructor(engine) {
    this._engine = engine;
  }
  getColorStyles(particle, context, radius, opacity) {
    const gradient2 = particle.gradient;
    if (!gradient2) {
      return {};
    }
    const gradientAngle = gradient2.angle.value, origin12 = { x: 0, y: 0 }, minRadius6 = 0, fillGradient = gradient2.type === GradientType.radial ? context.createRadialGradient(origin12.x, origin12.y, minRadius6, origin12.x, origin12.y, radius) : context.createLinearGradient(Math.cos(gradientAngle) * -radius, Math.sin(gradientAngle) * -radius, Math.cos(gradientAngle) * radius, Math.sin(gradientAngle) * radius);
    for (const { stop, value, opacity: cOpacity } of gradient2.colors) {
      fillGradient.addColorStop(stop, getStyleFromHsl({
        h: value.h.value,
        s: value.s.value,
        l: value.l.value
      }, (cOpacity == null ? void 0 : cOpacity.value) ?? opacity));
    }
    return { fill: fillGradient };
  }
  init(particle) {
    const gradient2 = itemFromSingleOrMultiple(particle.options.gradient);
    if (!gradient2) {
      return;
    }
    const { angle } = gradient2, speedFactor2 = 360, delayOffset = 1;
    particle.gradient = {
      angle: {
        value: getRangeValue(angle.value),
        enable: angle.animation.enable,
        velocity: getRangeValue(angle.animation.speed) / speedFactor2 * particle.container.retina.reduceFactor,
        decay: delayOffset - getRangeValue(angle.animation.decay),
        delayTime: getRangeValue(angle.animation.delay) * millisecondsToSeconds,
        max: doublePI13,
        min: 0,
        time: 0
      },
      type: gradient2.type,
      colors: []
    };
    let rotateDirection = gradient2.angle.direction;
    if (rotateDirection === RotateDirection.random) {
      rotateDirection = getRandom() > half ? RotateDirection.counterClockwise : RotateDirection.clockwise;
    }
    switch (rotateDirection) {
      case RotateDirection.counterClockwise:
      case "counterClockwise":
        particle.gradient.angle.status = AnimationStatus.decreasing;
        break;
      case RotateDirection.clockwise:
        particle.gradient.angle.status = AnimationStatus.increasing;
        break;
    }
    const reduceDuplicates = particle.options.reduceDuplicates;
    for (const grColor of gradient2.colors) {
      const grHslColor = rangeColorToHsl(this._engine, grColor.value, particle.id, reduceDuplicates);
      if (!grHslColor) {
        continue;
      }
      const grHslAnimation = getHslAnimationFromHsl(grHslColor, grColor.value.animation, particle.container.retina.reduceFactor), addColor = {
        stop: grColor.stop,
        value: grHslAnimation,
        opacity: grColor.opacity ? {
          enable: grColor.opacity.animation.enable,
          max: getRangeMax(grColor.opacity.value),
          min: getRangeMin(grColor.opacity.value),
          status: AnimationStatus.increasing,
          value: getRangeValue(grColor.opacity.value),
          velocity: getRangeValue(grColor.opacity.animation.speed) / percentDenominator * particle.container.retina.reduceFactor,
          decay: delayOffset - getRangeValue(grColor.opacity.animation.decay),
          delayTime: getRangeValue(grColor.opacity.animation.delay) * millisecondsToSeconds,
          time: 0
        } : void 0
      };
      const { opacity: addOpacity } = addColor;
      if (grColor.opacity && addOpacity) {
        const opacityRange = grColor.opacity.value;
        addOpacity.min = getRangeMin(opacityRange);
        addOpacity.max = getRangeMax(opacityRange);
        const opacityAnimation = grColor.opacity.animation;
        switch (opacityAnimation.startValue) {
          case StartValueType.min:
            addOpacity.value = addOpacity.min;
            addOpacity.status = AnimationStatus.increasing;
            break;
          case StartValueType.max:
            addOpacity.value = addOpacity.max;
            addOpacity.status = AnimationStatus.decreasing;
            break;
          case StartValueType.random:
          default:
            addOpacity.value = randomInRange(addOpacity);
            addOpacity.status = getRandom() >= half ? AnimationStatus.increasing : AnimationStatus.decreasing;
            break;
        }
      }
      particle.gradient.colors.push(addColor);
    }
  }
  isEnabled(particle) {
    var _a, _b;
    return !particle.destroyed && !particle.spawning && (!!((_a = particle.gradient) == null ? void 0 : _a.angle.enable) || (((_b = particle.gradient) == null ? void 0 : _b.colors.some((c) => c.value.h.enable || c.value.s.enable || c.value.l.enable)) ?? false));
  }
  loadOptions(options, ...sources) {
    for (const source of sources) {
      if (!(source == null ? void 0 : source.gradient)) {
        continue;
      }
      const gradientToLoad = source.gradient;
      if (!gradientToLoad) {
        continue;
      }
      options.gradient = executeOnSingleOrMultiple(gradientToLoad, (gradient2) => {
        const tmp = new AnimatableGradient();
        tmp.load(gradient2);
        return tmp;
      });
    }
  }
  update(particle, delta) {
    updateGradient(particle, delta);
  }
};

// node_modules/@tsparticles/updater-gradient/browser/index.js
async function loadGradientUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("gradient", () => {
    return Promise.resolve(new GradientUpdater(engine));
  }, refresh);
}

// node_modules/@tsparticles/shape-heart/browser/Utils.js
var half19 = 0.5;
var double25 = 2;
function drawHeart(data) {
  const { context, radius } = data, diameter = radius * double25, halfRadius = radius * half19, radiusAndHalf = radius + halfRadius, x = -radius, y = -radius;
  context.moveTo(x, y + halfRadius);
  context.quadraticCurveTo(x, y, x + halfRadius, y);
  context.quadraticCurveTo(x + radius, y, x + radius, y + halfRadius);
  context.quadraticCurveTo(x + radius, y, x + radiusAndHalf, y);
  context.quadraticCurveTo(x + diameter, y, x + diameter, y + halfRadius);
  context.quadraticCurveTo(x + diameter, y + radius, x + radiusAndHalf, y + radiusAndHalf);
  context.lineTo(x + radius, y + diameter);
  context.lineTo(x + halfRadius, y + radiusAndHalf);
  context.quadraticCurveTo(x, y + radius, x, y + halfRadius);
}

// node_modules/@tsparticles/shape-heart/browser/HeartDrawer.js
var HeartDrawer2 = class {
  constructor() {
    this.validTypes = ["heart"];
  }
  draw(data) {
    drawHeart(data);
  }
};

// node_modules/@tsparticles/shape-heart/browser/index.js
async function loadHeartShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new HeartDrawer2(), refresh);
}

// node_modules/@tsparticles/plugin-hsv-color/browser/HsvColorManager.js
var rgbFactor = 255;
function hsvToRgb(hsv) {
  const result = { b: 0, g: 0, r: 0 }, phase = 60, hsvPercent = {
    h: hsv.h / phase,
    s: hsv.s / percentDenominator,
    v: hsv.v / percentDenominator
  }, offset = 1, hPercentFactor = 2, c = hsvPercent.v * hsvPercent.s, x = c * (offset - Math.abs(hsvPercent.h % hPercentFactor - offset));
  let tempRgb;
  const cxzRange = { min: 0, max: 1 }, xczRange = { min: 1, max: 2 }, zcxRange = { min: 2, max: 3 }, zxcRange = { min: 3, max: 4 }, xzcRange = { min: 4, max: 5 }, czxRange = { min: 5, max: 6 };
  if (hsvPercent.h >= cxzRange.min && hsvPercent.h <= cxzRange.max) {
    tempRgb = {
      r: c,
      g: x,
      b: 0
    };
  } else if (hsvPercent.h > xczRange.min && hsvPercent.h <= xczRange.max) {
    tempRgb = {
      r: x,
      g: c,
      b: 0
    };
  } else if (hsvPercent.h > zcxRange.min && hsvPercent.h <= zcxRange.max) {
    tempRgb = {
      r: 0,
      g: c,
      b: x
    };
  } else if (hsvPercent.h > zxcRange.min && hsvPercent.h <= zxcRange.max) {
    tempRgb = {
      r: 0,
      g: x,
      b: c
    };
  } else if (hsvPercent.h > xzcRange.min && hsvPercent.h <= xzcRange.max) {
    tempRgb = {
      r: x,
      g: 0,
      b: c
    };
  } else if (hsvPercent.h > czxRange.min && hsvPercent.h <= czxRange.max) {
    tempRgb = {
      r: c,
      g: 0,
      b: x
    };
  }
  if (tempRgb) {
    const m = hsvPercent.v - c;
    result.r = Math.floor((tempRgb.r + m) * rgbFactor);
    result.g = Math.floor((tempRgb.g + m) * rgbFactor);
    result.b = Math.floor((tempRgb.b + m) * rgbFactor);
  }
  return result;
}
function hsvaToRgba(hsva) {
  return {
    a: hsva.a,
    ...hsvToRgb(hsva)
  };
}
var HsvColorManager = class {
  constructor() {
    this.key = "hsv";
    this.stringPrefix = "hsv";
  }
  handleColor(color) {
    const colorValue = color.value, hsvColor = colorValue.hsv ?? color.value;
    if (hsvColor.h !== void 0 && hsvColor.v !== void 0) {
      return hsvToRgb(hsvColor);
    }
  }
  handleRangeColor(color) {
    const colorValue = color.value, hsvColor = colorValue.hsv ?? color.value;
    if (hsvColor.h !== void 0 && hsvColor.v !== void 0) {
      return hsvToRgb({
        h: getRangeValue(hsvColor.h),
        s: getRangeValue(hsvColor.s),
        v: getRangeValue(hsvColor.v)
      });
    }
  }
  parseString(input) {
    if (!input.startsWith("hsv")) {
      return;
    }
    const regex = /hsva?\(\s*(\d+)°\s*[\s,]\s*(\d+)%\s*[\s,]\s*(\d+)%\s*([\s,]\s*(0|1|0?\.\d+|(\d{1,3})%)\s*)?\)/i, result = regex.exec(input), fullLength = 4, indexes = {
      h: 1,
      s: 2,
      v: 3,
      a: 5
    }, defaultAlpha4 = 1, radix = 10;
    return result ? hsvaToRgba({
      a: result.length > fullLength ? parseAlpha(result[indexes.a]) : defaultAlpha4,
      h: parseInt(result[indexes.h], radix),
      s: parseInt(result[indexes.s], radix),
      v: parseInt(result[indexes.v], radix)
    }) : void 0;
  }
};

// node_modules/@tsparticles/plugin-hsv-color/browser/index.js
async function loadHsvColorPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addColorManager(new HsvColorManager(), refresh);
}

// node_modules/@tsparticles/plugin-infection/browser/Options/Classes/InfectionStage.js
var InfectionStage = class {
  constructor() {
    this.color = new OptionsColor();
    this.color.value = "#ff0000";
    this.radius = 0;
    this.rate = 1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.color !== void 0) {
      this.color = OptionsColor.create(this.color, data.color);
    }
    this.duration = data.duration;
    this.infectedStage = data.infectedStage;
    if (data.radius !== void 0) {
      this.radius = data.radius;
    }
    if (data.rate !== void 0) {
      this.rate = data.rate;
    }
  }
};

// node_modules/@tsparticles/plugin-infection/browser/Options/Classes/Infection.js
var Infection = class {
  constructor() {
    this.cure = false;
    this.delay = 0;
    this.enable = false;
    this.infections = 0;
    this.stages = [];
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.cure !== void 0) {
      this.cure = data.cure;
    }
    if (data.delay !== void 0) {
      this.delay = data.delay;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.infections !== void 0) {
      this.infections = data.infections;
    }
    if (data.stages === void 0) {
      return;
    }
    this.stages = data.stages.map((t) => {
      const s = new InfectionStage();
      s.load(t);
      return s;
    });
  }
};

// node_modules/@tsparticles/plugin-infection/browser/Infecter.js
var minStage = 0;
var minDuration = 0;
var Infecter = class {
  constructor(container) {
    this._nextInfectionStage = (particle) => {
      const infectionOptions = this._container.actualOptions.infection, { infection } = particle;
      if (!infectionOptions || !infection) {
        return;
      }
      const stagesCount = infectionOptions.stages.length;
      if (stagesCount <= minStage || infection.stage === void 0) {
        return;
      }
      infection.time = 0;
      if (stagesCount <= ++infection.stage) {
        if (infectionOptions.cure) {
          delete infection.stage;
          delete infection.time;
        } else {
          infection.stage = 0;
          infection.time = 0;
        }
      }
    };
    this._container = container;
  }
  startInfection(particle, stage) {
    const infectionOptions = this._container.actualOptions.infection, { infection } = particle;
    if (!infectionOptions || !infection) {
      return;
    }
    const stages = infectionOptions.stages, stagesCount = stages.length;
    if (stage > stagesCount || stage < minStage) {
      return;
    }
    infection.delay = 0;
    infection.delayStage = stage;
  }
  updateInfection(particle, delta) {
    const infectionOptions = this._container.actualOptions.infection, { infection } = particle;
    if (!infectionOptions || !infection) {
      return;
    }
    const stages = infectionOptions.stages, stagesCount = stages.length;
    if (infection.delay !== void 0 && infection.delayStage !== void 0) {
      const stage = infection.delayStage;
      if (stage > stagesCount || stage < minStage) {
        return;
      }
      if (infection.delay >= infectionOptions.delay * millisecondsToSeconds) {
        infection.stage = stage;
        infection.time = 0;
        delete infection.delay;
        delete infection.delayStage;
      } else {
        infection.delay += delta;
      }
    } else {
      delete infection.delay;
      delete infection.delayStage;
    }
    if (infection.stage !== void 0 && infection.time !== void 0) {
      const infectionStage = stages[infection.stage];
      if (infectionStage.duration !== void 0 && infectionStage.duration >= minDuration) {
        if (infection.time > infectionStage.duration * millisecondsToSeconds) {
          this._nextInfectionStage(particle);
        } else {
          infection.time += delta;
        }
      } else {
        infection.time += delta;
      }
    } else {
      delete infection.stage;
      delete infection.time;
    }
  }
  updateInfectionStage(particle, stage) {
    const options = this._container.actualOptions, { infection } = particle;
    if (!options.infection || !infection) {
      return;
    }
    const stagesCount = options.infection.stages.length;
    if (stage > stagesCount || stage < minStage || infection.stage !== void 0 && infection.stage > stage) {
      return;
    }
    infection.stage = stage;
    infection.time = 0;
  }
};

// node_modules/@tsparticles/plugin-infection/browser/InfectionInstance.js
var minStage2 = 0;
var InfectionInstance = class {
  constructor(container) {
    this._container = container;
    this._container.infecter = new Infecter(this._container);
  }
  particleFillColor(particle) {
    const options = this._container.actualOptions;
    if (!particle.infection || !options.infection) {
      return;
    }
    const infectionStage = particle.infection.stage, infection = options.infection, infectionStages = infection.stages;
    return infectionStage !== void 0 ? infectionStages[infectionStage].color : void 0;
  }
  particleStrokeColor(particle) {
    return this.particleFillColor(particle);
  }
  particlesSetup() {
    var _a;
    const options = this._container.actualOptions;
    if (!options.infection) {
      return;
    }
    for (let i = 0; i < options.infection.infections; i++) {
      const notInfected = this._container.particles.filter((p) => {
        const infP = p;
        if (!infP.infection) {
          infP.infection = {};
        }
        return infP.infection.stage === void 0;
      });
      const infected = itemFromArray(notInfected);
      (_a = this._container.infecter) == null ? void 0 : _a.startInfection(infected, minStage2);
    }
  }
};

// node_modules/@tsparticles/plugin-infection/browser/InfectionPlugin.js
var InfectionPlugin = class {
  constructor() {
    this.id = "infection";
  }
  getPlugin(container) {
    return Promise.resolve(new InfectionInstance(container));
  }
  loadOptions(options, source) {
    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
      return;
    }
    let infectionOptions = options.infection;
    if ((infectionOptions == null ? void 0 : infectionOptions.load) === void 0) {
      options.infection = infectionOptions = new Infection();
    }
    infectionOptions.load(source == null ? void 0 : source.infection);
  }
  needsPlugin(options) {
    var _a;
    return ((_a = options == null ? void 0 : options.infection) == null ? void 0 : _a.enable) ?? false;
  }
};

// node_modules/@tsparticles/plugin-infection/browser/ParticlesInfecter.js
var minStagesCount = 1;
var double26 = 2;
var ParticlesInfecter = class extends ParticlesInteractorBase {
  constructor(container) {
    super(container);
  }
  clear() {
  }
  init() {
  }
  interact(p1, delta) {
    var _a, _b, _c;
    const infecter = this.container.infecter;
    if (!infecter) {
      return;
    }
    infecter.updateInfection(p1, delta.value);
    if (((_a = p1.infection) == null ? void 0 : _a.stage) === void 0) {
      return;
    }
    const container = this.container, options = container.actualOptions, infectionOptions = options.infection;
    if (!(infectionOptions == null ? void 0 : infectionOptions.enable) || infectionOptions.stages.length < minStagesCount) {
      return;
    }
    const infectionStage1 = infectionOptions.stages[p1.infection.stage], pxRatio = container.retina.pixelRatio, radius = p1.getRadius() * double26 + infectionStage1.radius * pxRatio, pos = p1.getPosition(), infectedStage1 = infectionStage1.infectedStage ?? p1.infection.stage, query = container.particles.quadTree.queryCircle(pos, radius), infections = infectionStage1.rate, neighbors = query.length;
    for (const p2 of query) {
      const infP2 = p2;
      if (infP2 === p1 || infP2.destroyed || infP2.spawning || !(((_b = infP2.infection) == null ? void 0 : _b.stage) === void 0 || infP2.infection.stage !== p1.infection.stage) || getRandom() >= infections / neighbors) {
        continue;
      }
      if (((_c = infP2.infection) == null ? void 0 : _c.stage) === void 0) {
        infecter.startInfection(infP2, infectedStage1);
      } else if (infP2.infection.stage < p1.infection.stage) {
        infecter.updateInfectionStage(infP2, infectedStage1);
      } else if (infP2.infection.stage > p1.infection.stage) {
        const infectionStage2 = infectionOptions.stages[infP2.infection.stage];
        const infectedStage2 = (infectionStage2 == null ? void 0 : infectionStage2.infectedStage) ?? infP2.infection.stage;
        infecter.updateInfectionStage(p1, infectedStage2);
      }
    }
  }
  isEnabled() {
    var _a, _b;
    return ((_b = (_a = this.container.actualOptions) == null ? void 0 : _a.infection) == null ? void 0 : _b.enable) ?? false;
  }
  reset() {
  }
};

// node_modules/@tsparticles/plugin-infection/browser/index.js
async function loadInfectionPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  const plugin = new InfectionPlugin();
  await engine.addPlugin(plugin, refresh);
  await engine.addInteractor("particlesInfection", (container) => {
    return Promise.resolve(new ParticlesInfecter(container));
  }, refresh);
}

// node_modules/@tsparticles/shape-infinity/browser/Utils.js
var origin10 = {
  x: 0,
  y: 0
};
var loopSizeFactor = 0.55;
function drawInfinity(data) {
  const { context, radius } = data, loopControl = radius * loopSizeFactor;
  context.moveTo(origin10.x, origin10.y);
  context.bezierCurveTo(loopControl, -radius, loopControl, radius, origin10.x, origin10.y);
  context.moveTo(origin10.x, origin10.y);
  context.bezierCurveTo(-loopControl, -radius, origin10.x - loopControl, radius, origin10.x, origin10.y);
}

// node_modules/@tsparticles/shape-infinity/browser/InfinityDrawer.js
var InfinityDrawer = class {
  constructor() {
    this.validTypes = ["infinity"];
  }
  draw(data) {
    drawInfinity(data);
  }
};

// node_modules/@tsparticles/shape-infinity/browser/index.js
async function loadInfinityShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new InfinityDrawer(), refresh);
}

// node_modules/@tsparticles/interaction-light/browser/Utils.js
var gradientPos = {
  max: 1,
  min: 0
};
var half20 = 0.5;
var double27 = 2;
var halfPI2 = Math.PI * half20;
var doublePI14 = Math.PI * double27;
var quarter2 = 0.25;
var quarterPI = Math.PI * quarter2;
var arcStart = 0;
var lightMode = "light";
function drawLight(container, context, mousePos) {
  var _a;
  const lightOptions = (_a = container.actualOptions.interactivity.modes.light) == null ? void 0 : _a.area;
  if (!lightOptions) {
    return;
  }
  context.beginPath();
  context.arc(mousePos.x, mousePos.y, lightOptions.radius, arcStart, doublePI14);
  const gradientAmbientLight = context.createRadialGradient(mousePos.x, mousePos.y, arcStart, mousePos.x, mousePos.y, lightOptions.radius);
  const gradientRgb = container.canvas.mouseLight;
  if (!(gradientRgb == null ? void 0 : gradientRgb.start) || !gradientRgb.stop) {
    return;
  }
  gradientAmbientLight.addColorStop(gradientPos.min, getStyleFromRgb(gradientRgb.start));
  gradientAmbientLight.addColorStop(gradientPos.max, getStyleFromRgb(gradientRgb.stop));
  context.fillStyle = gradientAmbientLight;
  context.fill();
}
function drawParticleShadow(container, context, particle, mousePos) {
  var _a;
  const pos = particle.getPosition(), shadowOptions = (_a = container.actualOptions.interactivity.modes.light) == null ? void 0 : _a.shadow;
  if (!shadowOptions) {
    return;
  }
  const shadowRgb = particle.lightShadow;
  if (!shadowRgb) {
    return;
  }
  const radius = particle.getRadius(), sides7 = particle.sides, full = doublePI14 / sides7, angle = -particle.rotation + quarterPI, factor = 1, dots = [];
  for (let i = 0; i < sides7; i++) {
    dots.push({
      x: pos.x + radius * Math.sin(angle + full * i) * factor,
      y: pos.y + radius * Math.cos(angle + full * i) * factor
    });
  }
  const points = [], shadowLength = shadowOptions.length;
  for (const dot of dots) {
    const dotAngle = Math.atan2(mousePos.y - dot.y, mousePos.x - dot.x), end = {
      x: dot.x + shadowLength * Math.sin(-dotAngle - halfPI2),
      y: dot.y + shadowLength * Math.cos(-dotAngle - halfPI2)
    };
    points.push({
      end,
      start: dot
    });
  }
  const shadowColor = getStyleFromRgb(shadowRgb), lastOffset = 1, firstPos = 0, last = points.length - lastOffset;
  for (let i = last, n2 = 0; i >= firstPos; n2 = i--) {
    context.beginPath();
    context.moveTo(points[i].start.x, points[i].start.y);
    context.lineTo(points[n2].start.x, points[n2].start.y);
    context.lineTo(points[n2].end.x, points[n2].end.y);
    context.lineTo(points[i].end.x, points[i].end.y);
    context.fillStyle = shadowColor;
    context.fill();
  }
}

// node_modules/@tsparticles/interaction-light/browser/Options/Classes/LightGradient.js
var LightGradient = class {
  constructor() {
    this.start = new OptionsColor();
    this.stop = new OptionsColor();
    this.start.value = "#ffffff";
    this.stop.value = "#000000";
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.start = OptionsColor.create(this.start, data.start);
    this.stop = OptionsColor.create(this.stop, data.stop);
  }
};

// node_modules/@tsparticles/interaction-light/browser/Options/Classes/LightArea.js
var LightArea = class {
  constructor() {
    this.gradient = new LightGradient();
    this.radius = 1e3;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.gradient.load(data.gradient);
    if (data.radius !== void 0) {
      this.radius = data.radius;
    }
  }
};

// node_modules/@tsparticles/interaction-light/browser/Options/Classes/LightShadow.js
var LightShadow = class {
  constructor() {
    this.color = new OptionsColor();
    this.color.value = "#000000";
    this.length = 2e3;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.color = OptionsColor.create(this.color, data.color);
    if (data.length !== void 0) {
      this.length = data.length;
    }
  }
};

// node_modules/@tsparticles/interaction-light/browser/Options/Classes/Light.js
var Light = class {
  constructor() {
    this.area = new LightArea();
    this.shadow = new LightShadow();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.area.load(data.area);
    this.shadow.load(data.shadow);
  }
};

// node_modules/@tsparticles/interaction-light/browser/ExternalLighter.js
var ExternalLighter = class extends ExternalInteractorBase {
  constructor(container, engine) {
    super(container);
    this._engine = engine;
  }
  clear() {
  }
  init() {
  }
  interact() {
    const container = this.container, options = container.actualOptions, interactivity = container.interactivity;
    if (!options.interactivity.events.onHover.enable || interactivity.status !== "pointermove") {
      return;
    }
    const mousePos = interactivity.mouse.position;
    if (!mousePos) {
      return;
    }
    container.canvas.draw((ctx) => {
      drawLight(container, ctx, mousePos);
    });
  }
  isEnabled(particle) {
    const container = this.container, mouse = container.interactivity.mouse, interactivity = (particle == null ? void 0 : particle.interactivity) ?? container.actualOptions.interactivity, events = interactivity.events;
    if (!(events.onHover.enable && mouse.position)) {
      return false;
    }
    const res = isInArray(lightMode, events.onHover.mode);
    if (res && interactivity.modes.light) {
      const lightGradient = interactivity.modes.light.area.gradient;
      container.canvas.mouseLight = {
        start: rangeColorToRgb(this._engine, lightGradient.start),
        stop: rangeColorToRgb(this._engine, lightGradient.stop)
      };
    }
    return res;
  }
  loadModeOptions(options, ...sources) {
    if (!options.light) {
      options.light = new Light();
    }
    for (const source of sources) {
      options.light.load(source == null ? void 0 : source.light);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-light/browser/ParticlesLighter.js
var ParticlesLighter = class extends ParticlesInteractorBase {
  constructor(container, engine) {
    super(container);
    this._engine = engine;
  }
  clear() {
  }
  init() {
  }
  interact(particle) {
    const container = this.container, options = container.actualOptions, interactivity = container.interactivity;
    if (!options.interactivity.events.onHover.enable || interactivity.status !== "pointermove") {
      return;
    }
    const mousePos = interactivity.mouse.position;
    if (!mousePos) {
      return;
    }
    container.canvas.draw((ctx) => {
      drawParticleShadow(container, ctx, particle, mousePos);
    });
  }
  isEnabled(particle) {
    const container = this.container, interactivity = particle.interactivity ?? container.actualOptions.interactivity, mouse = container.interactivity.mouse, events = interactivity.events;
    if (!(events.onHover.enable && mouse.position)) {
      return false;
    }
    const res = isInArray(lightMode, events.onHover.mode);
    if (res && interactivity.modes.light) {
      const shadowOptions = interactivity.modes.light.shadow;
      particle.lightShadow = rangeColorToRgb(this._engine, shadowOptions.color);
    }
    return res;
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-light/browser/index.js
async function loadLightInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("externalLight", (container) => {
    return Promise.resolve(new ExternalLighter(container, engine));
  }, refresh);
  await engine.addInteractor("particlesLight", (container) => {
    return Promise.resolve(new ParticlesLighter(container, engine));
  }, refresh);
}

// node_modules/@tsparticles/plugin-motion/browser/Options/Classes/MotionReduce.js
var MotionReduce = class {
  constructor() {
    this.factor = 4;
    this.value = true;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.factor !== void 0) {
      this.factor = data.factor;
    }
    if (data.value !== void 0) {
      this.value = data.value;
    }
  }
};

// node_modules/@tsparticles/plugin-motion/browser/Options/Classes/Motion.js
var Motion = class {
  constructor() {
    this.disable = false;
    this.reduce = new MotionReduce();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.disable !== void 0) {
      this.disable = data.disable;
    }
    this.reduce.load(data.reduce);
  }
};

// node_modules/@tsparticles/plugin-motion/browser/MotionInstance.js
var defaultFactor = 1;
var defaultReduce = 0;
var identity7 = 1;
var MotionInstance = class {
  constructor(container, engine) {
    this._handleMotionChange = (mediaQuery) => {
      const container2 = this._container, motion = container2.actualOptions.motion;
      if (!motion) {
        return;
      }
      if (mediaQuery.matches) {
        if (motion.disable) {
          container2.retina.reduceFactor = defaultReduce;
        } else {
          container2.retina.reduceFactor = motion.reduce.value ? identity7 / motion.reduce.factor : defaultFactor;
        }
      } else {
        container2.retina.reduceFactor = 1;
      }
    };
    this._container = container;
    this._engine = engine;
  }
  async init() {
    const container = this._container, options = container.actualOptions.motion;
    if (!(options && (options.disable || options.reduce.value))) {
      container.retina.reduceFactor = 1;
      return;
    }
    const mediaQuery = safeMatchMedia("(prefers-reduced-motion: reduce)");
    if (!mediaQuery) {
      container.retina.reduceFactor = defaultFactor;
      return;
    }
    this._handleMotionChange(mediaQuery);
    const handleChange = () => {
      void (async () => {
        this._handleMotionChange(mediaQuery);
        try {
          await container.refresh();
        } catch {
        }
      })();
    };
    if (mediaQuery.addEventListener !== void 0) {
      mediaQuery.addEventListener("change", handleChange);
    } else if (mediaQuery.addListener !== void 0) {
      mediaQuery.addListener(handleChange);
    }
    await Promise.resolve();
  }
};

// node_modules/@tsparticles/plugin-motion/browser/MotionPlugin.js
var MotionPlugin = class {
  constructor(engine) {
    this.id = "motion";
    this._engine = engine;
  }
  getPlugin(container) {
    return Promise.resolve(new MotionInstance(container, this._engine));
  }
  loadOptions(options, source) {
    if (!this.needsPlugin()) {
      return;
    }
    let motionOptions = options.motion;
    if (!(motionOptions == null ? void 0 : motionOptions.load)) {
      options.motion = motionOptions = new Motion();
    }
    motionOptions.load(source == null ? void 0 : source.motion);
  }
  needsPlugin() {
    return true;
  }
};

// node_modules/@tsparticles/plugin-motion/browser/index.js
async function loadMotionPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPlugin(new MotionPlugin(engine), refresh);
}

// node_modules/@tsparticles/plugin-named-color/browser/NamedColorManager.js
var namedColors = /* @__PURE__ */ new Map([
  ["aliceblue", { r: 240, g: 248, b: 255 }],
  ["antiquewhite", { r: 250, g: 235, b: 215 }],
  ["aqua", { r: 0, g: 255, b: 255 }],
  ["aquamarine", { r: 127, g: 255, b: 212 }],
  ["azure", { r: 240, g: 255, b: 255 }],
  ["beige", { r: 245, g: 245, b: 220 }],
  ["bisque", { r: 255, g: 228, b: 196 }],
  ["black", { r: 0, g: 0, b: 0 }],
  ["blanchedalmond", { r: 255, g: 235, b: 205 }],
  ["blue", { r: 0, g: 0, b: 255 }],
  ["blueviolet", { r: 138, g: 43, b: 226 }],
  ["brown", { r: 165, g: 42, b: 42 }],
  ["burlywood", { r: 222, g: 184, b: 135 }],
  ["cadetblue", { r: 95, g: 158, b: 160 }],
  ["chartreuse", { r: 127, g: 255, b: 0 }],
  ["chocolate", { r: 210, g: 105, b: 30 }],
  ["coral", { r: 255, g: 127, b: 80 }],
  ["cornflowerblue", { r: 100, g: 149, b: 237 }],
  ["cornsilk", { r: 255, g: 248, b: 220 }],
  ["crimson", { r: 220, g: 20, b: 60 }],
  ["cyan", { r: 0, g: 255, b: 255 }],
  ["darkblue", { r: 0, g: 0, b: 139 }],
  ["darkcyan", { r: 0, g: 139, b: 139 }],
  ["darkgoldenrod", { r: 184, g: 134, b: 11 }],
  ["darkgray", { r: 169, g: 169, b: 169 }],
  ["darkgreen", { r: 0, g: 100, b: 0 }],
  ["darkgrey", { r: 169, g: 169, b: 169 }],
  ["darkkhaki", { r: 189, g: 183, b: 107 }],
  ["darkmagenta", { r: 139, g: 0, b: 139 }],
  ["darkolivegreen", { r: 85, g: 107, b: 47 }],
  ["darkorange", { r: 255, g: 140, b: 0 }],
  ["darkorchid", { r: 153, g: 50, b: 204 }],
  ["darkred", { r: 139, g: 0, b: 0 }],
  ["darksalmon", { r: 233, g: 150, b: 122 }],
  ["darkseagreen", { r: 143, g: 188, b: 143 }],
  ["darkslateblue", { r: 72, g: 61, b: 139 }],
  ["darkslategray", { r: 47, g: 79, b: 79 }],
  ["darkslategrey", { r: 47, g: 79, b: 79 }],
  ["darkturquoise", { r: 0, g: 206, b: 209 }],
  ["darkviolet", { r: 148, g: 0, b: 211 }],
  ["deeppink", { r: 255, g: 20, b: 147 }],
  ["deepskyblue", { r: 0, g: 191, b: 255 }],
  ["dimgray", { r: 105, g: 105, b: 105 }],
  ["dimgrey", { r: 105, g: 105, b: 105 }],
  ["dodgerblue", { r: 30, g: 144, b: 255 }],
  ["firebrick", { r: 178, g: 34, b: 34 }],
  ["floralwhite", { r: 255, g: 250, b: 240 }],
  ["forestgreen", { r: 34, g: 139, b: 34 }],
  ["fuchsia", { r: 255, g: 0, b: 255 }],
  ["gainsboro", { r: 220, g: 220, b: 220 }],
  ["ghostwhite", { r: 248, g: 248, b: 255 }],
  ["gold", { r: 255, g: 215, b: 0 }],
  ["goldenrod", { r: 218, g: 165, b: 32 }],
  ["gray", { r: 128, g: 128, b: 128 }],
  ["green", { r: 0, g: 128, b: 0 }],
  ["greenyellow", { r: 173, g: 255, b: 47 }],
  ["grey", { r: 128, g: 128, b: 128 }],
  ["honeydew", { r: 240, g: 255, b: 240 }],
  ["hotpink", { r: 255, g: 105, b: 180 }],
  ["indianred", { r: 205, g: 92, b: 92 }],
  ["indigo", { r: 75, g: 0, b: 130 }],
  ["ivory", { r: 255, g: 255, b: 240 }],
  ["khaki", { r: 240, g: 230, b: 140 }],
  ["lavender", { r: 230, g: 230, b: 250 }],
  ["lavenderblush", { r: 255, g: 240, b: 245 }],
  ["lawngreen", { r: 124, g: 252, b: 0 }],
  ["lemonchiffon", { r: 255, g: 250, b: 205 }],
  ["lightblue", { r: 173, g: 216, b: 230 }],
  ["lightcoral", { r: 240, g: 128, b: 128 }],
  ["lightcyan", { r: 224, g: 255, b: 255 }],
  ["lightgoldenrodyellow", { r: 250, g: 250, b: 210 }],
  ["lightgray", { r: 211, g: 211, b: 211 }],
  ["lightgreen", { r: 144, g: 238, b: 144 }],
  ["lightgrey", { r: 211, g: 211, b: 211 }],
  ["lightpink", { r: 255, g: 182, b: 193 }],
  ["lightsalmon", { r: 255, g: 160, b: 122 }],
  ["lightseagreen", { r: 32, g: 178, b: 170 }],
  ["lightskyblue", { r: 135, g: 206, b: 250 }],
  ["lightslategray", { r: 119, g: 136, b: 153 }],
  ["lightslategrey", { r: 119, g: 136, b: 153 }],
  ["lightsteelblue", { r: 176, g: 196, b: 222 }],
  ["lightyellow", { r: 255, g: 255, b: 224 }],
  ["lime", { r: 0, g: 255, b: 0 }],
  ["limegreen", { r: 50, g: 205, b: 50 }],
  ["linen", { r: 250, g: 240, b: 230 }],
  ["magenta", { r: 255, g: 0, b: 255 }],
  ["maroon", { r: 128, g: 0, b: 0 }],
  ["mediumaquamarine", { r: 102, g: 205, b: 170 }],
  ["mediumblue", { r: 0, g: 0, b: 205 }],
  ["mediumorchid", { r: 186, g: 85, b: 211 }],
  ["mediumpurple", { r: 147, g: 112, b: 219 }],
  ["mediumseagreen", { r: 60, g: 179, b: 113 }],
  ["mediumslateblue", { r: 123, g: 104, b: 238 }],
  ["mediumspringgreen", { r: 0, g: 250, b: 154 }],
  ["mediumturquoise", { r: 72, g: 209, b: 204 }],
  ["mediumvioletred", { r: 199, g: 21, b: 133 }],
  ["midnightblue", { r: 25, g: 25, b: 112 }],
  ["mintcream", { r: 245, g: 255, b: 250 }],
  ["mistyrose", { r: 255, g: 228, b: 225 }],
  ["moccasin", { r: 255, g: 228, b: 181 }],
  ["navajowhite", { r: 255, g: 222, b: 173 }],
  ["navy", { r: 0, g: 0, b: 128 }],
  ["oldlace", { r: 253, g: 245, b: 230 }],
  ["olive", { r: 128, g: 128, b: 0 }],
  ["olivedrab", { r: 107, g: 142, b: 35 }],
  ["orange", { r: 255, g: 165, b: 0 }],
  ["orangered", { r: 255, g: 69, b: 0 }],
  ["orchid", { r: 218, g: 112, b: 214 }],
  ["palegoldenrod", { r: 238, g: 232, b: 170 }],
  ["palegreen", { r: 152, g: 251, b: 152 }],
  ["paleturquoise", { r: 175, g: 238, b: 238 }],
  ["palevioletred", { r: 219, g: 112, b: 147 }],
  ["papayawhip", { r: 255, g: 239, b: 213 }],
  ["peachpuff", { r: 255, g: 218, b: 185 }],
  ["peru", { r: 205, g: 133, b: 63 }],
  ["pink", { r: 255, g: 192, b: 203 }],
  ["plum", { r: 221, g: 160, b: 221 }],
  ["powderblue", { r: 176, g: 224, b: 230 }],
  ["purple", { r: 128, g: 0, b: 128 }],
  ["rebeccapurple", { r: 102, g: 51, b: 153 }],
  ["red", { r: 255, g: 0, b: 0 }],
  ["rosybrown", { r: 188, g: 143, b: 143 }],
  ["royalblue", { r: 65, g: 105, b: 225 }],
  ["saddlebrown", { r: 139, g: 69, b: 19 }],
  ["salmon", { r: 250, g: 128, b: 114 }],
  ["sandybrown", { r: 244, g: 164, b: 96 }],
  ["seagreen", { r: 46, g: 139, b: 87 }],
  ["seashell", { r: 255, g: 245, b: 238 }],
  ["sienna", { r: 160, g: 82, b: 45 }],
  ["silver", { r: 192, g: 192, b: 192 }],
  ["skyblue", { r: 135, g: 206, b: 235 }],
  ["slateblue", { r: 106, g: 90, b: 205 }],
  ["slategray", { r: 112, g: 128, b: 144 }],
  ["slategrey", { r: 112, g: 128, b: 144 }],
  ["snow", { r: 255, g: 250, b: 250 }],
  ["springgreen", { r: 0, g: 255, b: 127 }],
  ["steelblue", { r: 70, g: 130, b: 180 }],
  ["tan", { r: 210, g: 180, b: 140 }],
  ["teal", { r: 0, g: 128, b: 128 }],
  ["thistle", { r: 216, g: 191, b: 216 }],
  ["tomato", { r: 255, g: 99, b: 71 }],
  ["turquoise", { r: 64, g: 224, b: 208 }],
  ["violet", { r: 238, g: 130, b: 238 }],
  ["wheat", { r: 245, g: 222, b: 179 }],
  ["white", { r: 255, g: 255, b: 255 }],
  ["whitesmoke", { r: 245, g: 245, b: 245 }],
  ["yellow", { r: 255, g: 255, b: 0 }],
  ["yellowgreen", { r: 154, g: 205, b: 50 }]
]);
var NamedColorManager = class {
  constructor() {
    this.key = "named";
    this.stringPrefix = "";
  }
  handleColor(color) {
    return this._parseString(color.value);
  }
  handleRangeColor(color) {
    return this._parseString(color.value);
  }
  parseString(input) {
    return this._parseString(input);
  }
  _parseString(input) {
    if (!input || typeof input !== "string") {
      return void 0;
    }
    const rgbColor = namedColors.get(input.toLowerCase());
    if (!rgbColor) {
      getLogger().error("Color not found", input);
      return void 0;
    }
    return { ...rgbColor, a: 255 };
  }
};

// node_modules/@tsparticles/plugin-named-color/browser/index.js
async function loadNamedColorPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addColorManager(new NamedColorManager(), refresh);
}

// node_modules/@tsparticles/plugin-oklch-color/browser/utils.js
var rgbFactor2 = 255;
var fullDegree = 360;
function lchToRgb(lch) {
  const l = lch.l / percentDenominator, c = lch.c, h = lch.h / fullDegree, result = { r: 0, g: 0, b: 0 };
  result.r = Math.floor(l * rgbFactor2);
  result.g = Math.floor(c * rgbFactor2);
  result.b = Math.floor(h * rgbFactor2);
  return result;
}
function lchaToRgba(lcha) {
  return {
    a: lcha.a,
    ...lchToRgb(lcha)
  };
}
function oklchToRgb(oklch) {
  const l = oklch.l / percentDenominator, c = oklch.c / percentDenominator, h = oklch.h / fullDegree, result = { r: 0, g: 0, b: 0 };
  result.r = Math.floor(l * rgbFactor2);
  result.g = Math.floor(c * rgbFactor2);
  result.b = Math.floor(h * rgbFactor2);
  return result;
}
function oklchaToRgba(oklcha) {
  return {
    a: oklcha.a,
    ...oklchToRgb(oklcha)
  };
}

// node_modules/@tsparticles/plugin-oklch-color/browser/LchColorManager.js
var LchColorManager = class {
  constructor() {
    this.key = "color";
    this.stringPrefix = "lch";
  }
  handleColor(color) {
    const colorValue = color.value, lchColor = colorValue.lch ?? color.value;
    if (lchColor.l !== void 0 && lchColor.c !== void 0 && lchColor.h !== void 0) {
      return lchToRgb(lchColor);
    }
  }
  handleRangeColor(color) {
    const colorValue = color.value, lchColor = colorValue.lch ?? color.value;
    if (lchColor.l !== void 0 && lchColor.c !== void 0 && lchColor.h !== void 0) {
      return lchToRgb({
        l: getRangeValue(lchColor.l),
        c: getRangeValue(lchColor.c),
        h: getRangeValue(lchColor.h)
      });
    }
  }
  parseString(input) {
    const isLch = input.startsWith("lch");
    if (!isLch) {
      return;
    }
    const regex = /lch\(\s*(\d+(\.\d+)?)%\s+(\d+(\.\d+)?)\s+(\d+(\.\d+)?)(?:\s*\/\s*(0|1|0?\.\d+|\d{1,3}%))?\s*\)/i, result = regex.exec(input), indexes = {
      l: 1,
      c: 3,
      h: 5,
      a: 7
    }, defaultAlpha4 = 1;
    return result ? lchaToRgba({
      a: result[indexes.a] ? parseAlpha(result[indexes.a]) : defaultAlpha4,
      c: parseFloat(result[indexes.c]),
      h: parseFloat(result[indexes.h]),
      l: parseFloat(result[indexes.l])
    }) : void 0;
  }
};

// node_modules/@tsparticles/plugin-oklch-color/browser/OklchColorManager.js
var OklchColorManager = class {
  constructor() {
    this.key = "color";
    this.stringPrefix = "oklch";
  }
  handleColor(color) {
    const colorValue = color.value, oklchColor = colorValue.oklch ?? color.value;
    if (oklchColor.l !== void 0 && oklchColor.c !== void 0 && oklchColor.h !== void 0) {
      return oklchToRgb(oklchColor);
    }
  }
  handleRangeColor(color) {
    const colorValue = color.value, oklchColor = colorValue.oklch ?? color.value;
    if (oklchColor.l !== void 0 && oklchColor.c !== void 0 && oklchColor.h !== void 0) {
      return oklchToRgb({
        l: getRangeValue(oklchColor.l),
        c: getRangeValue(oklchColor.c),
        h: getRangeValue(oklchColor.h)
      });
    }
  }
  parseString(input) {
    const isOklch = input.startsWith("oklch");
    if (!isOklch) {
      return;
    }
    const regex = /oklch\(\s*(\d+(\.\d+)?)%\s+(\d+(\.\d+)?)\s+(\d+(\.\d+)?)(°)?(?:\s*\/\s*(0|1|0?\.\d+|\d{1,3}%))?\s*\)/i, result = regex.exec(input), indexes = {
      l: 1,
      c: 3,
      h: 5,
      a: 7
    }, defaultAlpha4 = 1;
    return result ? oklchaToRgba({
      a: result[indexes.a] ? parseAlpha(result[indexes.a]) : defaultAlpha4,
      c: parseFloat(result[indexes.c]),
      h: parseFloat(result[indexes.h]),
      l: parseFloat(result[indexes.l])
    }) : void 0;
  }
};

// node_modules/@tsparticles/plugin-oklch-color/browser/index.js
async function loadOklchColorPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addColorManager(new OklchColorManager(), refresh);
  await engine.addColorManager(new LchColorManager(), refresh);
}

// node_modules/@tsparticles/updater-orbit/browser/Options/Classes/OrbitRotation.js
var OrbitRotation = class extends ValueWithRandom {
  constructor() {
    super();
    this.value = 45;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    super.load(data);
  }
};

// node_modules/@tsparticles/updater-orbit/browser/Options/Classes/Orbit.js
var Orbit = class {
  constructor() {
    this.animation = new AnimationOptions();
    this.enable = false;
    this.opacity = 1;
    this.rotation = new OrbitRotation();
    this.width = 1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.animation.load(data.animation);
    this.rotation.load(data.rotation);
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.opacity !== void 0) {
      this.opacity = setRangeValue(data.opacity);
    }
    if (data.width !== void 0) {
      this.width = setRangeValue(data.width);
    }
    if (data.radius !== void 0) {
      this.radius = setRangeValue(data.radius);
    }
    if (data.color !== void 0) {
      this.color = OptionsColor.create(this.color, data.color);
    }
  }
};

// node_modules/@tsparticles/updater-orbit/browser/Enums.js
var OrbitType;
(function(OrbitType2) {
  OrbitType2["front"] = "front";
  OrbitType2["back"] = "back";
})(OrbitType || (OrbitType = {}));

// node_modules/@tsparticles/updater-orbit/browser/Utils.js
var minWidth3 = 0;
var half21 = 0.5;
var double28 = 2;
function drawEllipse(context, particle, fillColorValue, radius, opacity, width, rotation, start, end) {
  if (width <= minWidth3) {
    return;
  }
  const pos = particle.getPosition();
  if (fillColorValue) {
    context.strokeStyle = getStyleFromHsl(fillColorValue, opacity);
  }
  context.lineWidth = width;
  const rotationRadian = degToRad(rotation);
  context.beginPath();
  context.ellipse(pos.x, pos.y, radius * half21, radius * double28, rotationRadian, start, end);
  context.stroke();
}

// node_modules/@tsparticles/updater-orbit/browser/OrbitUpdater.js
var double29 = 2;
var half22 = 0.5;
var doublePI15 = Math.PI * double29;
var defaultOrbitSpeed = 0;
var halfPI3 = Math.PI * half22;
var piAndAHalf = Math.PI + halfPI3;
var startAngle = 0;
var defaultOpacity4 = 1;
var defaultWidth3 = 1;
var defaultRotation2 = 0;
var OrbitUpdater = class {
  constructor(container, engine) {
    this._engine = engine;
    this._container = container;
  }
  afterDraw(particle) {
    const orbitOptions = particle.options.orbit;
    if (orbitOptions == null ? void 0 : orbitOptions.enable) {
      this.drawOrbit(particle, OrbitType.front);
    }
  }
  beforeDraw(particle) {
    const orbitOptions = particle.options.orbit;
    if (orbitOptions == null ? void 0 : orbitOptions.enable) {
      this.drawOrbit(particle, OrbitType.back);
    }
  }
  drawOrbit(particle, type) {
    const container = this._container;
    let start, end;
    switch (type) {
      case OrbitType.back:
        start = halfPI3;
        end = piAndAHalf;
        break;
      case OrbitType.front:
        start = piAndAHalf;
        end = halfPI3;
        break;
      default:
        start = startAngle;
        end = doublePI15;
    }
    container.canvas.draw((ctx) => {
      drawEllipse(ctx, particle, particle.orbitColor ?? particle.getFillColor(), particle.retina.orbitRadius ?? container.retina.orbitRadius ?? particle.getRadius(), particle.orbitOpacity ?? defaultOpacity4, particle.orbitWidth ?? defaultWidth3, (particle.orbitRotation ?? defaultRotation2) * container.retina.pixelRatio, start, end);
    });
  }
  init(particle) {
    const container = this._container, particlesOptions = particle.options, orbitOptions = particlesOptions.orbit;
    if (!(orbitOptions == null ? void 0 : orbitOptions.enable)) {
      return;
    }
    particle.orbitRotation = getRangeValue(orbitOptions.rotation.value);
    particle.orbitColor = rangeColorToHsl(this._engine, orbitOptions.color);
    particle.retina.orbitRadius = orbitOptions.radius !== void 0 ? getRangeValue(orbitOptions.radius) * container.retina.pixelRatio : void 0;
    container.retina.orbitRadius = particle.retina.orbitRadius;
    particle.orbitAnimationSpeed = orbitOptions.animation.enable ? getRangeValue(orbitOptions.animation.speed) : defaultOrbitSpeed;
    particle.orbitWidth = getRangeValue(orbitOptions.width);
    particle.orbitOpacity = getRangeValue(orbitOptions.opacity);
  }
  isEnabled(particle) {
    var _a;
    const orbitAnimations = (_a = particle.options.orbit) == null ? void 0 : _a.animation;
    return !particle.destroyed && !particle.spawning && !!(orbitAnimations == null ? void 0 : orbitAnimations.enable);
  }
  loadOptions(options, ...sources) {
    if (!options.orbit) {
      options.orbit = new Orbit();
    }
    for (const source of sources) {
      options.orbit.load(source == null ? void 0 : source.orbit);
    }
  }
  update(particle, delta) {
    if (!this.isEnabled(particle)) {
      return;
    }
    if (particle.orbitRotation === void 0) {
      particle.orbitRotation = defaultRotation2;
    }
    particle.orbitRotation += (particle.orbitAnimationSpeed ?? defaultOrbitSpeed / doublePI15) * delta.factor;
  }
};

// node_modules/@tsparticles/updater-orbit/browser/index.js
async function loadOrbitUpdater(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addParticleUpdater("orbit", (container) => {
    return Promise.resolve(new OrbitUpdater(container, engine));
  }, refresh);
}

// node_modules/@tsparticles/interaction-particles-repulse/browser/Options/Classes/ParticlesRepulse.js
var ParticlesRepulse = class extends ValueWithRandom {
  constructor() {
    super();
    this.enabled = false;
    this.distance = 1;
    this.duration = 1;
    this.factor = 1;
    this.speed = 1;
  }
  load(data) {
    super.load(data);
    if (isNull(data)) {
      return;
    }
    if (data.enabled !== void 0) {
      this.enabled = data.enabled;
    }
    if (data.distance !== void 0) {
      this.distance = setRangeValue(data.distance);
    }
    if (data.duration !== void 0) {
      this.duration = setRangeValue(data.duration);
    }
    if (data.factor !== void 0) {
      this.factor = setRangeValue(data.factor);
    }
    if (data.speed !== void 0) {
      this.speed = setRangeValue(data.speed);
    }
  }
};

// node_modules/@tsparticles/interaction-particles-repulse/browser/Repulser.js
var minDistance8 = 0;
var identity8 = 1;
var squareExp4 = 2;
var minVelocity7 = 0;
var Repulser2 = class extends ParticlesInteractorBase {
  constructor(container) {
    super(container);
  }
  clear() {
  }
  init() {
  }
  interact(p1) {
    const container = this.container;
    if (!p1.repulse) {
      const repulseOpt1 = p1.options.repulse;
      if (!repulseOpt1) {
        return;
      }
      p1.repulse = {
        distance: getRangeValue(repulseOpt1.distance) * container.retina.pixelRatio,
        speed: getRangeValue(repulseOpt1.speed),
        factor: getRangeValue(repulseOpt1.factor)
      };
    }
    const pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, p1.repulse.distance);
    for (const p2 of query) {
      if (p1 === p2 || p2.destroyed) {
        continue;
      }
      const pos2 = p2.getPosition(), { dx, dy, distance } = getDistances(pos2, pos1), velocity = p1.repulse.speed * p1.repulse.factor;
      if (distance > minDistance8) {
        const repulseFactor = clamp((identity8 - Math.pow(distance / p1.repulse.distance, squareExp4)) * velocity, minVelocity7, velocity), normVec = Vector.create(dx / distance * repulseFactor, dy / distance * repulseFactor);
        p2.position.addTo(normVec);
      } else {
        const velocityVec = Vector.create(velocity, velocity);
        p2.position.addTo(velocityVec);
      }
    }
  }
  isEnabled(particle) {
    var _a;
    return ((_a = particle.options.repulse) == null ? void 0 : _a.enabled) ?? false;
  }
  loadParticlesOptions(options, ...sources) {
    if (!options.repulse) {
      options.repulse = new ParticlesRepulse();
    }
    for (const source of sources) {
      options.repulse.load(source == null ? void 0 : source.repulse);
    }
  }
  reset() {
  }
};

// node_modules/@tsparticles/interaction-particles-repulse/browser/index.js
async function loadParticlesRepulseInteraction(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addInteractor("particlesRepulse", (container) => {
    return Promise.resolve(new Repulser2(container));
  }, refresh);
}

// node_modules/@tsparticles/shape-path/browser/SegmentType.js
var SegmentType;
(function(SegmentType2) {
  SegmentType2["line"] = "line";
  SegmentType2["bezier"] = "bezier";
  SegmentType2["quadratic"] = "quadratic";
  SegmentType2["arc"] = "arc";
  SegmentType2["ellipse"] = "ellipse";
})(SegmentType || (SegmentType = {}));

// node_modules/@tsparticles/shape-path/browser/Utils.js
function drawPath2(ctx, radius, path) {
  const firstIndex2 = 0, firstSegment = path.segments[firstIndex2], firstValue = firstSegment.values[firstIndex2];
  ctx.moveTo(firstValue.x * radius, firstValue.y * radius);
  for (const segment of path.segments) {
    const value = segment.values[firstIndex2], index2 = 1, index3 = 2, index4 = 3;
    switch (segment.type) {
      case SegmentType.line:
        ctx.lineTo(value.x * radius, value.y * radius);
        break;
      case SegmentType.bezier:
        ctx.bezierCurveTo(segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x * radius, segment.values[index3].y * radius, segment.values[index4].x * radius, segment.values[index4].y * radius);
        break;
      case SegmentType.quadratic:
        ctx.quadraticCurveTo(segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x * radius, segment.values[index3].y * radius);
        break;
      case SegmentType.arc:
        ctx.arc(value.x * radius, value.y * radius, segment.values[index2].x * radius, segment.values[index3].x, segment.values[index3].y);
        break;
      case SegmentType.ellipse:
        ctx.ellipse(value.x * radius, value.y * radius, segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x, segment.values[index4].x, segment.values[index4].y);
    }
  }
  if (!path.half) {
    return;
  }
  const lengthOffset = 1, minLength = 0;
  for (let i = path.segments.length - lengthOffset; i >= minLength; i--) {
    const segment = path.segments[i], value = segment.values[firstIndex2], index2 = 1, index3 = 2;
    switch (segment.type) {
      case SegmentType.line:
        ctx.lineTo(value.x * -radius, value.y * radius);
        break;
      case SegmentType.bezier:
        ctx.bezierCurveTo(-segment.values[index3].x * radius, segment.values[index3].y * radius, -segment.values[index2].x * radius, segment.values[index2].y * radius, value.x * radius, value.y * radius);
        break;
      case SegmentType.quadratic:
        ctx.quadraticCurveTo(-segment.values[index2].x * radius, segment.values[index2].y * radius, -segment.values[index3].x * radius, segment.values[index3].y * radius);
        break;
      case SegmentType.arc:
      case SegmentType.ellipse:
      default:
        break;
    }
  }
}

// node_modules/@tsparticles/shape-path/browser/PathDrawer.js
var PathDrawer = class {
  constructor() {
    this.validTypes = ["path"];
  }
  draw(data) {
    const { context, particle, radius } = data;
    if (!particle.pathData) {
      return;
    }
    drawPath2(context, radius, particle.pathData);
  }
  particleInit(container, particle) {
    const shape = particle.shapeData;
    if (!shape) {
      return;
    }
    particle.pathData = deepExtend({}, shape);
  }
};

// node_modules/@tsparticles/shape-path/browser/index.js
async function loadPathShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new PathDrawer(), refresh);
}

// node_modules/@tsparticles/perlin-noise/browser/Grad.js
var Grad = class {
  constructor(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
  dot2(x, y) {
    return this.x * x + this.y * y;
  }
  dot3(x, y, z) {
    return this.dot2(x, y) + this.z * z;
  }
};

// node_modules/@tsparticles/perlin-noise/browser/PerlinNoise.js
var PerlinNoise = class {
  constructor() {
    this._grad3 = [
      new Grad(1, 1, 0),
      new Grad(-1, 1, 0),
      new Grad(1, -1, 0),
      new Grad(-1, -1, 0),
      new Grad(1, 0, 1),
      new Grad(-1, 0, 1),
      new Grad(1, 0, -1),
      new Grad(-1, 0, -1),
      new Grad(0, 1, 1),
      new Grad(0, -1, 1),
      new Grad(0, 1, -1),
      new Grad(0, -1, -1)
    ];
    this._p = [
      151,
      160,
      137,
      91,
      90,
      15,
      131,
      13,
      201,
      95,
      96,
      53,
      194,
      233,
      7,
      225,
      140,
      36,
      103,
      30,
      69,
      142,
      8,
      99,
      37,
      240,
      21,
      10,
      23,
      190,
      6,
      148,
      247,
      120,
      234,
      75,
      0,
      26,
      197,
      62,
      94,
      252,
      219,
      203,
      117,
      35,
      11,
      32,
      57,
      177,
      33,
      88,
      237,
      149,
      56,
      87,
      174,
      20,
      125,
      136,
      171,
      168,
      68,
      175,
      74,
      165,
      71,
      134,
      139,
      48,
      27,
      166,
      77,
      146,
      158,
      231,
      83,
      111,
      229,
      122,
      60,
      211,
      133,
      230,
      220,
      105,
      92,
      41,
      55,
      46,
      245,
      40,
      244,
      102,
      143,
      54,
      65,
      25,
      63,
      161,
      1,
      216,
      80,
      73,
      209,
      76,
      132,
      187,
      208,
      89,
      18,
      169,
      200,
      196,
      135,
      130,
      116,
      188,
      159,
      86,
      164,
      100,
      109,
      198,
      173,
      186,
      3,
      64,
      52,
      217,
      226,
      250,
      124,
      123,
      5,
      202,
      38,
      147,
      118,
      126,
      255,
      82,
      85,
      212,
      207,
      206,
      59,
      227,
      47,
      16,
      58,
      17,
      182,
      189,
      28,
      42,
      223,
      183,
      170,
      213,
      119,
      248,
      152,
      2,
      44,
      154,
      163,
      70,
      221,
      153,
      101,
      155,
      167,
      43,
      172,
      9,
      129,
      22,
      39,
      253,
      19,
      98,
      108,
      110,
      79,
      113,
      224,
      232,
      178,
      185,
      112,
      104,
      218,
      246,
      97,
      228,
      251,
      34,
      242,
      193,
      238,
      210,
      144,
      12,
      191,
      179,
      162,
      241,
      81,
      51,
      145,
      235,
      249,
      14,
      239,
      107,
      49,
      192,
      214,
      31,
      181,
      199,
      106,
      157,
      184,
      84,
      204,
      176,
      115,
      121,
      50,
      45,
      127,
      4,
      150,
      254,
      138,
      236,
      205,
      93,
      222,
      114,
      67,
      29,
      24,
      72,
      243,
      141,
      128,
      195,
      78,
      66,
      215,
      61,
      156,
      180
    ];
    this._gradP = new Array(512);
    this._perm = new Array(512);
  }
  noise2d(x, y) {
    const { _gradP, _perm } = this;
    let X = Math.floor(x), Y = Math.floor(y);
    x = x - X;
    y = y - Y;
    X = X & 255;
    Y = Y & 255;
    const n00 = _gradP[X + _perm[Y]].dot2(x, y), n01 = _gradP[X + _perm[Y + 1]].dot2(x, y - 1), n10 = _gradP[X + 1 + _perm[Y]].dot2(x - 1, y), n11 = _gradP[X + 1 + _perm[Y + 1]].dot2(x - 1, y - 1);
    const u = this._fade(x);
    return this._lerp(this._lerp(n00, n10, u), this._lerp(n01, n11, u), this._fade(y));
  }
  noise3d(x, y, z) {
    const { _gradP: gradP, _perm: perm } = this;
    let X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);
    x = x - X;
    y = y - Y;
    z = z - Z;
    X = X & 255;
    Y = Y & 255;
    Z = Z & 255;
    const n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z), n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1), n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z), n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1), n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z), n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1), n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z), n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1), u = this._fade(x), v = this._fade(y), w = this._fade(z);
    return this._lerp(this._lerp(this._lerp(n000, n100, u), this._lerp(n001, n101, u), w), this._lerp(this._lerp(n010, n110, u), this._lerp(n011, n111, u), w), v);
  }
  seed(inputSeed) {
    const { _grad3: grad3, _gradP: gradP, _perm: perm, _p: p } = this;
    let seed = inputSeed;
    if (seed > 0 && seed < 1) {
      seed *= 65536;
    }
    seed = Math.floor(seed);
    if (seed < 256) {
      seed |= seed << 8;
    }
    for (let i = 0; i < 256; i++) {
      const v = i & 1 ? p[i] ^ seed & 255 : p[i] ^ seed >> 8 & 255;
      perm[i] = perm[i + 256] = v;
      gradP[i] = gradP[i + 256] = grad3[v % 12];
    }
  }
  _fade(t) {
    return t * t * t * (t * (t * 6 - 15) + 10);
  }
  _lerp(a, b, t) {
    return (1 - t) * a + t * b;
  }
};

// node_modules/@tsparticles/path-perlin-noise/browser/PerlinNoiseGenerator.js
var double30 = 2;
var doublePI16 = Math.PI * double30;
var defaultOptions2 = {
  draw: false,
  size: 20,
  increment: 4e-3,
  columns: 0,
  rows: 0,
  width: 0,
  height: 0,
  factor: {
    angle: 0.02,
    length: 0.01
  },
  offset: {
    x: 4e4,
    y: 4e4
  }
};
var PerlinNoiseGenerator = class {
  constructor() {
    this._calculateField = () => {
      const { field, noiseGen, options } = this, lengthFactor = options.factor.length, angleFactor = options.factor.angle;
      for (let x = 0; x < options.columns; x++) {
        const column = field[x];
        for (let y = 0; y < options.rows; y++) {
          const cell = column[y];
          cell.length = noiseGen.noise3d(x * lengthFactor + options.offset.x, y * lengthFactor + options.offset.y, this.noiseZ);
          cell.angle = noiseGen.noise3d(x * angleFactor, y * angleFactor, this.noiseZ) * doublePI16;
        }
      }
    };
    this._drawField = (ctx) => {
      const { field, options } = this;
      for (let x = 0; x < options.columns; x++) {
        const column = field[x];
        for (let y = 0; y < options.rows; y++) {
          const cell = column[y], { angle, length } = cell;
          ctx.setTransform(1, 0, 0, 1, x * this.options.size, y * this.options.size);
          ctx.rotate(angle);
          ctx.strokeStyle = "white";
          ctx.beginPath();
          ctx.moveTo(0, 0);
          ctx.lineTo(0, this.options.size * length);
          ctx.stroke();
          ctx.setTransform(1, 0, 0, 1, 0, 0);
        }
      }
    };
    this._initField = () => {
      const { columns, rows } = this.options;
      this.field = new Array(columns);
      for (let x = 0; x < columns; x++) {
        this.field[x] = new Array(rows);
        for (let y = 0; y < rows; y++) {
          this.field[x][y] = Vector.origin;
        }
      }
    };
    this.noiseGen = new PerlinNoise();
    this.field = [];
    this.noiseZ = 0;
    this.options = deepExtend({}, defaultOptions2);
  }
  generate(particle) {
    var _a;
    const pos = particle.getPosition(), { size } = this.options, point = {
      x: Math.max(Math.floor(pos.x / size), 0),
      y: Math.max(Math.floor(pos.y / size), 0)
    }, { field } = this;
    return !((_a = field == null ? void 0 : field[point.x]) == null ? void 0 : _a[point.y]) ? Vector.origin : field[point.x][point.y].copy();
  }
  init(container) {
    this.container = container;
    this._setup();
  }
  reset() {
  }
  update() {
    if (!this.container) {
      return;
    }
    this._calculateField();
    this.noiseZ += this.options.increment;
    if (this.options.draw) {
      this.container.canvas.draw((ctx) => this._drawField(ctx));
    }
  }
  _resetField() {
    const container = this.container;
    if (!container) {
      return;
    }
    const sourceOptions = container.actualOptions.particles.move.path.options, { options } = this;
    options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions2.size;
    options.increment = sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions2.increment;
    options.draw = !!sourceOptions.draw;
    const offset = sourceOptions.offset;
    options.offset.x = (offset == null ? void 0 : offset.x) ?? defaultOptions2.offset.x;
    options.offset.y = (offset == null ? void 0 : offset.y) ?? defaultOptions2.offset.y;
    const factor = sourceOptions.factor;
    options.factor.angle = (factor == null ? void 0 : factor.angle) ?? defaultOptions2.factor.angle;
    options.factor.length = (factor == null ? void 0 : factor.length) ?? defaultOptions2.factor.length;
    options.width = container.canvas.size.width;
    options.height = container.canvas.size.height;
    this.options.seed = sourceOptions.seed;
    this.noiseGen.seed(this.options.seed ?? getRandom());
    options.columns = Math.floor(this.options.width / this.options.size) + 1;
    options.rows = Math.floor(this.options.height / this.options.size) + 1;
    this._initField();
  }
  _setup() {
    this.noiseZ = 0;
    this._resetField();
    window.addEventListener("resize", () => this._resetField());
  }
};

// node_modules/@tsparticles/path-perlin-noise/browser/index.js
var perlinNoisePathName = "perlinNoise";
async function loadPerlinNoisePath(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPathGenerator(perlinNoisePathName, new PerlinNoiseGenerator(), refresh);
}

// node_modules/@tsparticles/plugin-poisson-disc/browser/Options/Classes/Poisson.js
var Poisson = class {
  constructor() {
    this.enable = false;
    this.dimensions = 2;
    this.radius = 0;
    this.retries = 30;
    this.steps = 0;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.dimensions !== void 0) {
      this.dimensions = data.dimensions;
    }
    if (data.radius !== void 0) {
      this.radius = data.radius;
    }
    if (data.retries !== void 0) {
      this.retries = data.retries;
    }
  }
};

// node_modules/@tsparticles/plugin-poisson-disc/browser/PoissonDisc.js
var double31 = 2;
var doublePI17 = Math.PI * double31;
var PoissonDisc = class {
  constructor(size, radius, retries, dimensions, firstPoint) {
    this.size = { ...size };
    this.radius = radius;
    this.retries = retries;
    this.dimensions = dimensions;
    this.cellSize = Math.floor(this.radius / Math.sqrt(this.dimensions));
    this.cols = Math.floor(this.size.width / this.cellSize);
    this.rows = Math.floor(this.size.height / this.cellSize);
    this.points = [];
    this.active = [];
    this.grid = [];
    this.firstPoint = firstPoint ? { ...firstPoint } : void 0;
    this.reset();
  }
  addPoint(inputPoint) {
    const point = {
      position: { ...inputPoint },
      gridPosition: {
        x: Math.floor(inputPoint.x / this.cellSize),
        y: Math.floor(inputPoint.y / this.cellSize)
      }
    }, pointIndex = this.points.length;
    this.points.push(point);
    this.grid[point.gridPosition.y][point.gridPosition.x] = pointIndex;
    this.active.push(pointIndex);
  }
  getRandom(min, max) {
    return Math.floor(getRandom() * (max - min)) + min;
  }
  initialiseGrid() {
    for (let y = 0; y <= this.rows; y++) {
      this.grid[y] = [];
      for (let x = 0; x <= this.cols; x++) {
        this.grid[y][x] = -1;
      }
    }
  }
  reset() {
    this.points = [];
    this.active = [];
    this.grid = [];
    this.initialiseGrid();
    if (this.firstPoint) {
      this.addPoint(this.firstPoint);
    } else {
      const minCoordinate = 0;
      this.addPoint({
        x: this.getRandom(minCoordinate, this.size.width),
        y: this.getRandom(minCoordinate, this.size.height)
      });
    }
  }
  async run() {
    this.reset();
    const minCount = 0, step = 1;
    while (this.active.length > minCount) {
      await this.steps(step);
    }
  }
  async steps(steps) {
    const minCount = 0;
    for (let i = 0; i < steps; i++) {
      if (this.active.length <= minCount) {
        continue;
      }
      await this._step();
    }
  }
  _getNewPoint(currentPoint, tries) {
    const minCoordinate = 0, gridMinValue = 0, maxNeighbourIndex = 1, newAngle = tries * (doublePI17 / this.retries), newDist = this.getRandom(this.radius, this.radius * double31), offset = {
      x: Math.cos(newAngle) * newDist,
      y: Math.sin(newAngle) * newDist
    }, newPoint = {
      x: Math.floor(currentPoint.position.x + offset.x),
      y: Math.floor(currentPoint.position.y + offset.y)
    }, newGridCoords = {
      x: Math.floor(newPoint.x / this.cellSize),
      y: Math.floor(newPoint.y / this.cellSize)
    };
    if (newPoint.x > minCoordinate && newPoint.x < this.size.width && newPoint.y > minCoordinate && newPoint.y < this.size.height) {
      if (this.grid[newGridCoords.y][newGridCoords.x] < gridMinValue) {
        for (let i = -1; i <= maxNeighbourIndex; i++) {
          for (let j = -1; j <= maxNeighbourIndex; j++) {
            const neighbourGrid = {
              x: newGridCoords.x + j,
              y: newGridCoords.y + i
            };
            if (neighbourGrid.x >= minCoordinate && neighbourGrid.y >= minCoordinate && neighbourGrid.x < this.cols && neighbourGrid.y < this.rows && (neighbourGrid.x !== newGridCoords.x || neighbourGrid.y !== newGridCoords.y)) {
              if (this.grid[neighbourGrid.y][neighbourGrid.x] >= gridMinValue) {
                const neighbourIndex = this.grid[neighbourGrid.y][neighbourGrid.x], neighbour = this.points[neighbourIndex], dist = getDistance(newPoint, neighbour.position);
                if (dist < this.radius) {
                  return;
                }
              }
            }
          }
        }
      } else {
        return;
      }
    } else {
      return;
    }
    return newPoint;
  }
  async _step() {
    const minCount = 0, randomActive = this.getRandom(minCount, this.active.length);
    return new Promise((resolve) => {
      let foundNewPoint = false;
      for (let tries = 0; tries < this.retries; tries++) {
        const newPoint = this._getNewPoint(this.points[this.active[randomActive]], tries);
        if (newPoint) {
          foundNewPoint = true;
          this.addPoint(newPoint);
          break;
        }
      }
      if (!foundNewPoint) {
        const deleteCount = 1;
        this.active.splice(randomActive, deleteCount);
      }
      resolve();
    });
  }
};

// node_modules/@tsparticles/plugin-poisson-disc/browser/PoissonInstance.js
var PoissonInstance = class {
  constructor(container, engine) {
    this._container = container;
    this._engine = engine;
    this._currentIndex = 0;
  }
  async init() {
    await this._initData();
  }
  particlePosition(position) {
    var _a, _b;
    const container = this._container, options = container.actualOptions.poisson;
    if (!this.poissonDisc || !((options == null ? void 0 : options.enable) ?? false) || this._currentIndex >= this.poissonDisc.points.length) {
      return;
    }
    return position ?? ((_b = (_a = this.poissonDisc) == null ? void 0 : _a.points[this._currentIndex++]) == null ? void 0 : _b.position);
  }
  resize() {
    const container = this._container, options = container.actualOptions.poisson;
    if (!((options == null ? void 0 : options.enable) ?? false)) {
      return;
    }
    if (this.redrawTimeout) {
      clearTimeout(this.redrawTimeout);
    }
    const timeout = 250;
    this.redrawTimeout = window.setTimeout(() => {
      void (async () => {
        await this._initData();
        await container.particles.redraw();
      })();
    }, timeout);
  }
  stop() {
    delete this.poissonDisc;
  }
  async _initData() {
    const container = this._container, poissonOptions = container.actualOptions.poisson, particlesOptions = container.actualOptions.particles, canvasSize = container.canvas.size, pixelRatio = container.retina.pixelRatio;
    if (!(poissonOptions == null ? void 0 : poissonOptions.enable)) {
      return;
    }
    this._currentIndex = 0;
    this.poissonDisc = new PoissonDisc(canvasSize, poissonOptions.radius ? poissonOptions.radius * pixelRatio : Math.max(getRangeMax(particlesOptions.size.value) * pixelRatio, Math.sqrt(canvasSize.width * canvasSize.height / particlesOptions.number.value)), poissonOptions.retries, poissonOptions.dimensions);
    const noSteps = 0;
    if (poissonOptions.steps > noSteps) {
      await this.poissonDisc.steps(poissonOptions.steps);
    } else {
      await this.poissonDisc.run();
    }
  }
};

// node_modules/@tsparticles/plugin-poisson-disc/browser/PoissonDiscPlugin.js
var PoissonDiscPlugin = class {
  constructor(engine) {
    this.id = "poisson";
    this._engine = engine;
  }
  getPlugin(container) {
    return Promise.resolve(new PoissonInstance(container, this._engine));
  }
  loadOptions(options, source) {
    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
      return;
    }
    let poissonOptions = options.poisson;
    if ((poissonOptions == null ? void 0 : poissonOptions.load) === void 0) {
      options.poisson = poissonOptions = new Poisson();
    }
    poissonOptions.load(source == null ? void 0 : source.poisson);
  }
  needsPlugin(options) {
    var _a;
    return ((_a = options == null ? void 0 : options.poisson) == null ? void 0 : _a.enable) ?? false;
  }
};

// node_modules/@tsparticles/plugin-poisson-disc/browser/index.js
async function loadPoissonDiscPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPlugin(new PoissonDiscPlugin(engine), refresh);
}

// node_modules/@tsparticles/plugin-polygon-mask/browser/pathseg.js
(function() {
  "use strict";
  try {
    if (typeof window === "undefined")
      return;
    if (!("SVGPathSeg" in window)) {
      window.SVGPathSeg = function(type, typeAsLetter, owningPathSegList) {
        this.pathSegType = type;
        this.pathSegTypeAsLetter = typeAsLetter;
        this._owningPathSegList = owningPathSegList;
      };
      window.SVGPathSeg.prototype.classname = "SVGPathSeg";
      window.SVGPathSeg.PATHSEG_UNKNOWN = 0;
      window.SVGPathSeg.PATHSEG_CLOSEPATH = 1;
      window.SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
      window.SVGPathSeg.PATHSEG_MOVETO_REL = 3;
      window.SVGPathSeg.PATHSEG_LINETO_ABS = 4;
      window.SVGPathSeg.PATHSEG_LINETO_REL = 5;
      window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
      window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
      window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
      window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
      window.SVGPathSeg.PATHSEG_ARC_ABS = 10;
      window.SVGPathSeg.PATHSEG_ARC_REL = 11;
      window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
      window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
      window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
      window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
      window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
      window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
      window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
      window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;
      window.SVGPathSeg.prototype._segmentChanged = function() {
        if (this._owningPathSegList)
          this._owningPathSegList.segmentChanged(this);
      };
      window.SVGPathSegClosePath = function(owningPathSegList) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CLOSEPATH, "z", owningPathSegList);
      };
      window.SVGPathSegClosePath.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegClosePath.prototype.toString = function() {
        return "[object SVGPathSegClosePath]";
      };
      window.SVGPathSegClosePath.prototype._asPathString = function() {
        return this.pathSegTypeAsLetter;
      };
      window.SVGPathSegClosePath.prototype.clone = function() {
        return new window.SVGPathSegClosePath(void 0);
      };
      window.SVGPathSegMovetoAbs = function(owningPathSegList, x, y) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_ABS, "M", owningPathSegList);
        this._x = x;
        this._y = y;
      };
      window.SVGPathSegMovetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegMovetoAbs.prototype.toString = function() {
        return "[object SVGPathSegMovetoAbs]";
      };
      window.SVGPathSegMovetoAbs.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x} ${this._y}`;
      };
      window.SVGPathSegMovetoAbs.prototype.clone = function() {
        return new window.SVGPathSegMovetoAbs(void 0, this._x, this._y);
      };
      Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegMovetoRel = function(owningPathSegList, x, y) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_REL, "m", owningPathSegList);
        this._x = x;
        this._y = y;
      };
      window.SVGPathSegMovetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegMovetoRel.prototype.toString = function() {
        return "[object SVGPathSegMovetoRel]";
      };
      window.SVGPathSegMovetoRel.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x} ${this._y}`;
      };
      window.SVGPathSegMovetoRel.prototype.clone = function() {
        return new window.SVGPathSegMovetoRel(void 0, this._x, this._y);
      };
      Object.defineProperty(window.SVGPathSegMovetoRel.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegMovetoRel.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegLinetoAbs = function(owningPathSegList, x, y) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_ABS, "L", owningPathSegList);
        this._x = x;
        this._y = y;
      };
      window.SVGPathSegLinetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegLinetoAbs.prototype.toString = function() {
        return "[object SVGPathSegLinetoAbs]";
      };
      window.SVGPathSegLinetoAbs.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x} ${this._y}`;
      };
      window.SVGPathSegLinetoAbs.prototype.clone = function() {
        return new window.SVGPathSegLinetoAbs(void 0, this._x, this._y);
      };
      Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegLinetoRel = function(owningPathSegList, x, y) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_REL, "l", owningPathSegList);
        this._x = x;
        this._y = y;
      };
      window.SVGPathSegLinetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegLinetoRel.prototype.toString = function() {
        return "[object SVGPathSegLinetoRel]";
      };
      window.SVGPathSegLinetoRel.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x} ${this._y}`;
      };
      window.SVGPathSegLinetoRel.prototype.clone = function() {
        return new window.SVGPathSegLinetoRel(void 0, this._x, this._y);
      };
      Object.defineProperty(window.SVGPathSegLinetoRel.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegLinetoRel.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegCurvetoCubicAbs = function(owningPathSegList, x, y, x1, y1, x2, y2) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, "C", owningPathSegList);
        this._x = x;
        this._y = y;
        this._x1 = x1;
        this._y1 = y1;
        this._x2 = x2;
        this._y2 = y2;
      };
      window.SVGPathSegCurvetoCubicAbs.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegCurvetoCubicAbs.prototype.toString = function() {
        return "[object SVGPathSegCurvetoCubicAbs]";
      };
      window.SVGPathSegCurvetoCubicAbs.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter}  ${this._x1} ${this._y1} ${this._x2} ${this._y2} ${this._x} ${this._y}`;
      };
      window.SVGPathSegCurvetoCubicAbs.prototype.clone = function() {
        return new window.SVGPathSegCurvetoCubicAbs(void 0, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
      };
      Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x1", {
        get: function() {
          return this._x1;
        },
        set: function(x1) {
          this._x1 = x1;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y1", {
        get: function() {
          return this._y1;
        },
        set: function(y1) {
          this._y1 = y1;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x2", {
        get: function() {
          return this._x2;
        },
        set: function(x2) {
          this._x2 = x2;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y2", {
        get: function() {
          return this._y2;
        },
        set: function(y2) {
          this._y2 = y2;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegCurvetoCubicRel = function(owningPathSegList, x, y, x1, y1, x2, y2) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, "c", owningPathSegList);
        this._x = x;
        this._y = y;
        this._x1 = x1;
        this._y1 = y1;
        this._x2 = x2;
        this._y2 = y2;
      };
      window.SVGPathSegCurvetoCubicRel.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegCurvetoCubicRel.prototype.toString = function() {
        return "[object SVGPathSegCurvetoCubicRel]";
      };
      window.SVGPathSegCurvetoCubicRel.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x1} ${this._y1} ${this._x2} ${this._y2} ${this._x} ${this._y}`;
      };
      window.SVGPathSegCurvetoCubicRel.prototype.clone = function() {
        return new window.SVGPathSegCurvetoCubicRel(void 0, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
      };
      Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x1", {
        get: function() {
          return this._x1;
        },
        set: function(x1) {
          this._x1 = x1;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y1", {
        get: function() {
          return this._y1;
        },
        set: function(y1) {
          this._y1 = y1;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x2", {
        get: function() {
          return this._x2;
        },
        set: function(x2) {
          this._x2 = x2;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y2", {
        get: function() {
          return this._y2;
        },
        set: function(y2) {
          this._y2 = y2;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegCurvetoQuadraticAbs = function(owningPathSegList, x, y, x1, y1) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, "Q", owningPathSegList);
        this._x = x;
        this._y = y;
        this._x1 = x1;
        this._y1 = y1;
      };
      window.SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegCurvetoQuadraticAbs.prototype.toString = function() {
        return "[object SVGPathSegCurvetoQuadraticAbs]";
      };
      window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x1} ${this._y1} ${this._x} ${this._y}`;
      };
      window.SVGPathSegCurvetoQuadraticAbs.prototype.clone = function() {
        return new window.SVGPathSegCurvetoQuadraticAbs(void 0, this._x, this._y, this._x1, this._y1);
      };
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "x1", {
        get: function() {
          return this._x1;
        },
        set: function(x1) {
          this._x1 = x1;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "y1", {
        get: function() {
          return this._y1;
        },
        set: function(y1) {
          this._y1 = y1;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegCurvetoQuadraticRel = function(owningPathSegList, x, y, x1, y1) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, "q", owningPathSegList);
        this._x = x;
        this._y = y;
        this._x1 = x1;
        this._y1 = y1;
      };
      window.SVGPathSegCurvetoQuadraticRel.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegCurvetoQuadraticRel.prototype.toString = function() {
        return "[object SVGPathSegCurvetoQuadraticRel]";
      };
      window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x1} ${this._y1} ${this._x} ${this._y}`;
      };
      window.SVGPathSegCurvetoQuadraticRel.prototype.clone = function() {
        return new window.SVGPathSegCurvetoQuadraticRel(void 0, this._x, this._y, this._x1, this._y1);
      };
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "x1", {
        get: function() {
          return this._x1;
        },
        set: function(x1) {
          this._x1 = x1;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "y1", {
        get: function() {
          return this._y1;
        },
        set: function(y1) {
          this._y1 = y1;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegArcAbs = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_ABS, "A", owningPathSegList);
        this._x = x;
        this._y = y;
        this._r1 = r1;
        this._r2 = r2;
        this._angle = angle;
        this._largeArcFlag = largeArcFlag;
        this._sweepFlag = sweepFlag;
      };
      window.SVGPathSegArcAbs.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegArcAbs.prototype.toString = function() {
        return "[object SVGPathSegArcAbs]";
      };
      window.SVGPathSegArcAbs.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._r1} ${this._r2} ${this._angle} ${this._largeArcFlag ? "1" : "0"} ${this._sweepFlag ? "1" : "0"} ${this._x} ${this._y}`;
      };
      window.SVGPathSegArcAbs.prototype.clone = function() {
        return new window.SVGPathSegArcAbs(void 0, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
      };
      Object.defineProperty(window.SVGPathSegArcAbs.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcAbs.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcAbs.prototype, "r1", {
        get: function() {
          return this._r1;
        },
        set: function(r1) {
          this._r1 = r1;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcAbs.prototype, "r2", {
        get: function() {
          return this._r2;
        },
        set: function(r2) {
          this._r2 = r2;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcAbs.prototype, "angle", {
        get: function() {
          return this._angle;
        },
        set: function(angle) {
          this._angle = angle;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcAbs.prototype, "largeArcFlag", {
        get: function() {
          return this._largeArcFlag;
        },
        set: function(largeArcFlag) {
          this._largeArcFlag = largeArcFlag;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcAbs.prototype, "sweepFlag", {
        get: function() {
          return this._sweepFlag;
        },
        set: function(sweepFlag) {
          this._sweepFlag = sweepFlag;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegArcRel = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_REL, "a", owningPathSegList);
        this._x = x;
        this._y = y;
        this._r1 = r1;
        this._r2 = r2;
        this._angle = angle;
        this._largeArcFlag = largeArcFlag;
        this._sweepFlag = sweepFlag;
      };
      window.SVGPathSegArcRel.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegArcRel.prototype.toString = function() {
        return "[object SVGPathSegArcRel]";
      };
      window.SVGPathSegArcRel.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._r1} ${this._r2} ${this._angle} ${this._largeArcFlag ? "1" : "0"} ${this._sweepFlag ? "1" : "0"} ${this._x} ${this._y}`;
      };
      window.SVGPathSegArcRel.prototype.clone = function() {
        return new window.SVGPathSegArcRel(void 0, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
      };
      Object.defineProperty(window.SVGPathSegArcRel.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcRel.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcRel.prototype, "r1", {
        get: function() {
          return this._r1;
        },
        set: function(r1) {
          this._r1 = r1;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcRel.prototype, "r2", {
        get: function() {
          return this._r2;
        },
        set: function(r2) {
          this._r2 = r2;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcRel.prototype, "angle", {
        get: function() {
          return this._angle;
        },
        set: function(angle) {
          this._angle = angle;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcRel.prototype, "largeArcFlag", {
        get: function() {
          return this._largeArcFlag;
        },
        set: function(largeArcFlag) {
          this._largeArcFlag = largeArcFlag;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegArcRel.prototype, "sweepFlag", {
        get: function() {
          return this._sweepFlag;
        },
        set: function(sweepFlag) {
          this._sweepFlag = sweepFlag;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegLinetoHorizontalAbs = function(owningPathSegList, x) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, "H", owningPathSegList);
        this._x = x;
      };
      window.SVGPathSegLinetoHorizontalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegLinetoHorizontalAbs.prototype.toString = function() {
        return "[object SVGPathSegLinetoHorizontalAbs]";
      };
      window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x}`;
      };
      window.SVGPathSegLinetoHorizontalAbs.prototype.clone = function() {
        return new window.SVGPathSegLinetoHorizontalAbs(void 0, this._x);
      };
      Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegLinetoHorizontalRel = function(owningPathSegList, x) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, "h", owningPathSegList);
        this._x = x;
      };
      window.SVGPathSegLinetoHorizontalRel.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegLinetoHorizontalRel.prototype.toString = function() {
        return "[object SVGPathSegLinetoHorizontalRel]";
      };
      window.SVGPathSegLinetoHorizontalRel.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x}`;
      };
      window.SVGPathSegLinetoHorizontalRel.prototype.clone = function() {
        return new window.SVGPathSegLinetoHorizontalRel(void 0, this._x);
      };
      Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegLinetoVerticalAbs = function(owningPathSegList, y) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, "V", owningPathSegList);
        this._y = y;
      };
      window.SVGPathSegLinetoVerticalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegLinetoVerticalAbs.prototype.toString = function() {
        return "[object SVGPathSegLinetoVerticalAbs]";
      };
      window.SVGPathSegLinetoVerticalAbs.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._y}`;
      };
      window.SVGPathSegLinetoVerticalAbs.prototype.clone = function() {
        return new window.SVGPathSegLinetoVerticalAbs(void 0, this._y);
      };
      Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegLinetoVerticalRel = function(owningPathSegList, y) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, "v", owningPathSegList);
        this._y = y;
      };
      window.SVGPathSegLinetoVerticalRel.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegLinetoVerticalRel.prototype.toString = function() {
        return "[object SVGPathSegLinetoVerticalRel]";
      };
      window.SVGPathSegLinetoVerticalRel.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._y}`;
      };
      window.SVGPathSegLinetoVerticalRel.prototype.clone = function() {
        return new window.SVGPathSegLinetoVerticalRel(void 0, this._y);
      };
      Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegCurvetoCubicSmoothAbs = function(owningPathSegList, x, y, x2, y2) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, "S", owningPathSegList);
        this._x = x;
        this._y = y;
        this._x2 = x2;
        this._y2 = y2;
      };
      window.SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function() {
        return "[object SVGPathSegCurvetoCubicSmoothAbs]";
      };
      window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x2} ${this._y2} ${this._x} ${this._y}`;
      };
      window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function() {
        return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0, this._x, this._y, this._x2, this._y2);
      };
      Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "x2", {
        get: function() {
          return this._x2;
        },
        set: function(x2) {
          this._x2 = x2;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "y2", {
        get: function() {
          return this._y2;
        },
        set: function(y2) {
          this._y2 = y2;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegCurvetoCubicSmoothRel = function(owningPathSegList, x, y, x2, y2) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, "s", owningPathSegList);
        this._x = x;
        this._y = y;
        this._x2 = x2;
        this._y2 = y2;
      };
      window.SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function() {
        return "[object SVGPathSegCurvetoCubicSmoothRel]";
      };
      window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x2} ${this._y2} ${this._x} ${this._y}`;
      };
      window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function() {
        return new window.SVGPathSegCurvetoCubicSmoothRel(void 0, this._x, this._y, this._x2, this._y2);
      };
      Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "x2", {
        get: function() {
          return this._x2;
        },
        set: function(x2) {
          this._x2 = x2;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "y2", {
        get: function() {
          return this._y2;
        },
        set: function(y2) {
          this._y2 = y2;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegCurvetoQuadraticSmoothAbs = function(owningPathSegList, x, y) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, "T", owningPathSegList);
        this._x = x;
        this._y = y;
      };
      window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function() {
        return "[object SVGPathSegCurvetoQuadraticSmoothAbs]";
      };
      window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x} ${this._y}`;
      };
      window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function() {
        return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0, this._x, this._y);
      };
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathSegCurvetoQuadraticSmoothRel = function(owningPathSegList, x, y) {
        window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, "t", owningPathSegList);
        this._x = x;
        this._y = y;
      };
      window.SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
      window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function() {
        return "[object SVGPathSegCurvetoQuadraticSmoothRel]";
      };
      window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function() {
        return `${this.pathSegTypeAsLetter} ${this._x} ${this._y}`;
      };
      window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function() {
        return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0, this._x, this._y);
      };
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(x) {
          this._x = x;
          this._segmentChanged();
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(y) {
          this._y = y;
          this._segmentChanged();
        },
        enumerable: true
      });
      window.SVGPathElement.prototype.createSVGPathSegClosePath = function() {
        return new window.SVGPathSegClosePath(void 0);
      };
      window.SVGPathElement.prototype.createSVGPathSegMovetoAbs = function(x, y) {
        return new window.SVGPathSegMovetoAbs(void 0, x, y);
      };
      window.SVGPathElement.prototype.createSVGPathSegMovetoRel = function(x, y) {
        return new window.SVGPathSegMovetoRel(void 0, x, y);
      };
      window.SVGPathElement.prototype.createSVGPathSegLinetoAbs = function(x, y) {
        return new window.SVGPathSegLinetoAbs(void 0, x, y);
      };
      window.SVGPathElement.prototype.createSVGPathSegLinetoRel = function(x, y) {
        return new window.SVGPathSegLinetoRel(void 0, x, y);
      };
      window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function(x, y, x1, y1, x2, y2) {
        return new window.SVGPathSegCurvetoCubicAbs(void 0, x, y, x1, y1, x2, y2);
      };
      window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function(x, y, x1, y1, x2, y2) {
        return new window.SVGPathSegCurvetoCubicRel(void 0, x, y, x1, y1, x2, y2);
      };
      window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function(x, y, x1, y1) {
        return new window.SVGPathSegCurvetoQuadraticAbs(void 0, x, y, x1, y1);
      };
      window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function(x, y, x1, y1) {
        return new window.SVGPathSegCurvetoQuadraticRel(void 0, x, y, x1, y1);
      };
      window.SVGPathElement.prototype.createSVGPathSegArcAbs = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
        return new window.SVGPathSegArcAbs(void 0, x, y, r1, r2, angle, largeArcFlag, sweepFlag);
      };
      window.SVGPathElement.prototype.createSVGPathSegArcRel = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
        return new window.SVGPathSegArcRel(void 0, x, y, r1, r2, angle, largeArcFlag, sweepFlag);
      };
      window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function(x) {
        return new window.SVGPathSegLinetoHorizontalAbs(void 0, x);
      };
      window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function(x) {
        return new window.SVGPathSegLinetoHorizontalRel(void 0, x);
      };
      window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function(y) {
        return new window.SVGPathSegLinetoVerticalAbs(void 0, y);
      };
      window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function(y) {
        return new window.SVGPathSegLinetoVerticalRel(void 0, y);
      };
      window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function(x, y, x2, y2) {
        return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0, x, y, x2, y2);
      };
      window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function(x, y, x2, y2) {
        return new window.SVGPathSegCurvetoCubicSmoothRel(void 0, x, y, x2, y2);
      };
      window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function(x, y) {
        return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0, x, y);
      };
      window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function(x, y) {
        return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0, x, y);
      };
      if (!("getPathSegAtLength" in window.SVGPathElement.prototype)) {
        window.SVGPathElement.prototype.getPathSegAtLength = function(distance) {
          if (distance === void 0 || !isFinite(distance))
            throw "Invalid arguments.";
          const measurementElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
          measurementElement.setAttribute("d", this.getAttribute("d"));
          let lastPathSegment = measurementElement.pathSegList.numberOfItems - 1;
          if (lastPathSegment <= 0)
            return 0;
          do {
            measurementElement.pathSegList.removeItem(lastPathSegment);
            if (distance > measurementElement.getTotalLength())
              break;
            lastPathSegment--;
          } while (lastPathSegment > 0);
          return lastPathSegment;
        };
      }
    }
    if (!("SVGPathSegList" in window) || !("appendItem" in window.SVGPathSegList.prototype)) {
      window.SVGPathSegList = function(pathElement) {
        this._pathElement = pathElement;
        this._list = this._parsePath(this._pathElement.getAttribute("d"));
        this._mutationObserverConfig = { attributes: true, attributeFilter: ["d"] };
        this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
        this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
      };
      window.SVGPathSegList.prototype.classname = "SVGPathSegList";
      Object.defineProperty(window.SVGPathSegList.prototype, "numberOfItems", {
        get: function() {
          this._checkPathSynchronizedToList();
          return this._list.length;
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathSegList.prototype, "length", {
        get: function() {
          this._checkPathSynchronizedToList();
          return this._list.length;
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathElement.prototype, "pathSegList", {
        get: function() {
          if (!this._pathSegList)
            this._pathSegList = new window.SVGPathSegList(this);
          return this._pathSegList;
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathElement.prototype, "normalizedPathSegList", {
        get: function() {
          return this.pathSegList;
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathElement.prototype, "animatedPathSegList", {
        get: function() {
          return this.pathSegList;
        },
        enumerable: true
      });
      Object.defineProperty(window.SVGPathElement.prototype, "animatedNormalizedPathSegList", {
        get: function() {
          return this.pathSegList;
        },
        enumerable: true
      });
      window.SVGPathSegList.prototype._checkPathSynchronizedToList = function() {
        this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
      };
      window.SVGPathSegList.prototype._updateListFromPathMutations = function(mutationRecords) {
        if (!this._pathElement)
          return;
        let hasPathMutations = false;
        mutationRecords.forEach(function(record) {
          if (record.attributeName == "d")
            hasPathMutations = true;
        });
        if (hasPathMutations)
          this._list = this._parsePath(this._pathElement.getAttribute("d"));
      };
      window.SVGPathSegList.prototype._writeListToPath = function() {
        this._pathElementMutationObserver.disconnect();
        this._pathElement.setAttribute("d", window.SVGPathSegList._pathSegArrayAsString(this._list));
        this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
      };
      window.SVGPathSegList.prototype.segmentChanged = function() {
        this._writeListToPath();
      };
      window.SVGPathSegList.prototype.clear = function() {
        this._checkPathSynchronizedToList();
        this._list.forEach(function(pathSeg) {
          pathSeg._owningPathSegList = null;
        });
        this._list = [];
        this._writeListToPath();
      };
      window.SVGPathSegList.prototype.initialize = function(newItem) {
        this._checkPathSynchronizedToList();
        this._list = [newItem];
        newItem._owningPathSegList = this;
        this._writeListToPath();
        return newItem;
      };
      window.SVGPathSegList.prototype._checkValidIndex = function(index) {
        if (isNaN(index) || index < 0 || index >= this.numberOfItems)
          throw "INDEX_SIZE_ERR";
      };
      window.SVGPathSegList.prototype.getItem = function(index) {
        this._checkPathSynchronizedToList();
        this._checkValidIndex(index);
        return this._list[index];
      };
      window.SVGPathSegList.prototype.insertItemBefore = function(newItem, index) {
        this._checkPathSynchronizedToList();
        if (index > this.numberOfItems)
          index = this.numberOfItems;
        if (newItem._owningPathSegList) {
          newItem = newItem.clone();
        }
        this._list.splice(index, 0, newItem);
        newItem._owningPathSegList = this;
        this._writeListToPath();
        return newItem;
      };
      window.SVGPathSegList.prototype.replaceItem = function(newItem, index) {
        this._checkPathSynchronizedToList();
        if (newItem._owningPathSegList) {
          newItem = newItem.clone();
        }
        this._checkValidIndex(index);
        this._list[index] = newItem;
        newItem._owningPathSegList = this;
        this._writeListToPath();
        return newItem;
      };
      window.SVGPathSegList.prototype.removeItem = function(index) {
        this._checkPathSynchronizedToList();
        this._checkValidIndex(index);
        const item = this._list[index];
        this._list.splice(index, 1);
        this._writeListToPath();
        return item;
      };
      window.SVGPathSegList.prototype.appendItem = function(newItem) {
        this._checkPathSynchronizedToList();
        if (newItem._owningPathSegList) {
          newItem = newItem.clone();
        }
        this._list.push(newItem);
        newItem._owningPathSegList = this;
        this._writeListToPath();
        return newItem;
      };
      window.SVGPathSegList._pathSegArrayAsString = function(pathSegArray) {
        let string = "";
        let first = true;
        pathSegArray.forEach(function(pathSeg) {
          if (first) {
            first = false;
            string += pathSeg._asPathString();
          } else {
            string += ` ${pathSeg._asPathString()}`;
          }
        });
        return string;
      };
      window.SVGPathSegList.prototype._parsePath = function(string) {
        if (!string || !string.length)
          return [];
        const owningPathSegList = this;
        const Builder = function() {
          this.pathSegList = [];
        };
        Builder.prototype.appendSegment = function(pathSeg) {
          this.pathSegList.push(pathSeg);
        };
        const Source = function(string2) {
          this._string = string2;
          this._currentIndex = 0;
          this._endIndex = this._string.length;
          this._previousCommand = window.SVGPathSeg.PATHSEG_UNKNOWN;
          this._skipOptionalSpaces();
        };
        Source.prototype._isCurrentSpace = function() {
          const character = this._string[this._currentIndex];
          return character <= " " && (character == " " || character == "\n" || character == "	" || character == "\r" || character == "\f");
        };
        Source.prototype._skipOptionalSpaces = function() {
          while (this._currentIndex < this._endIndex && this._isCurrentSpace())
            this._currentIndex++;
          return this._currentIndex < this._endIndex;
        };
        Source.prototype._skipOptionalSpacesOrDelimiter = function() {
          if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ",")
            return false;
          if (this._skipOptionalSpaces()) {
            if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ",") {
              this._currentIndex++;
              this._skipOptionalSpaces();
            }
          }
          return this._currentIndex < this._endIndex;
        };
        Source.prototype.hasMoreData = function() {
          return this._currentIndex < this._endIndex;
        };
        Source.prototype.peekSegmentType = function() {
          const lookahead = this._string[this._currentIndex];
          return this._pathSegTypeFromChar(lookahead);
        };
        Source.prototype._pathSegTypeFromChar = function(lookahead) {
          switch (lookahead) {
            case "Z":
            case "z":
              return window.SVGPathSeg.PATHSEG_CLOSEPATH;
            case "M":
              return window.SVGPathSeg.PATHSEG_MOVETO_ABS;
            case "m":
              return window.SVGPathSeg.PATHSEG_MOVETO_REL;
            case "L":
              return window.SVGPathSeg.PATHSEG_LINETO_ABS;
            case "l":
              return window.SVGPathSeg.PATHSEG_LINETO_REL;
            case "C":
              return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
            case "c":
              return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
            case "Q":
              return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
            case "q":
              return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
            case "A":
              return window.SVGPathSeg.PATHSEG_ARC_ABS;
            case "a":
              return window.SVGPathSeg.PATHSEG_ARC_REL;
            case "H":
              return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
            case "h":
              return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
            case "V":
              return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
            case "v":
              return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
            case "S":
              return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
            case "s":
              return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
            case "T":
              return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
            case "t":
              return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
            default:
              return window.SVGPathSeg.PATHSEG_UNKNOWN;
          }
        };
        Source.prototype._nextCommandHelper = function(lookahead, previousCommand) {
          if ((lookahead == "+" || lookahead == "-" || lookahead == "." || lookahead >= "0" && lookahead <= "9") && previousCommand != window.SVGPathSeg.PATHSEG_CLOSEPATH) {
            if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_ABS)
              return window.SVGPathSeg.PATHSEG_LINETO_ABS;
            if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_REL)
              return window.SVGPathSeg.PATHSEG_LINETO_REL;
            return previousCommand;
          }
          return window.SVGPathSeg.PATHSEG_UNKNOWN;
        };
        Source.prototype.initialCommandIsMoveTo = function() {
          if (!this.hasMoreData())
            return true;
          const command = this.peekSegmentType();
          return command == window.SVGPathSeg.PATHSEG_MOVETO_ABS || command == window.SVGPathSeg.PATHSEG_MOVETO_REL;
        };
        Source.prototype._parseNumber = function() {
          let exponent = 0;
          let integer = 0;
          let frac = 1;
          let decimal = 0;
          let sign = 1;
          let expsign = 1;
          const startIndex = this._currentIndex;
          this._skipOptionalSpaces();
          if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "+")
            this._currentIndex++;
          else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "-") {
            this._currentIndex++;
            sign = -1;
          }
          if (this._currentIndex == this._endIndex || (this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") && this._string.charAt(this._currentIndex) != ".")
            return void 0;
          const startIntPartIndex = this._currentIndex;
          while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9")
            this._currentIndex++;
          if (this._currentIndex != startIntPartIndex) {
            let scanIntPartIndex = this._currentIndex - 1;
            let multiplier = 1;
            while (scanIntPartIndex >= startIntPartIndex) {
              integer += multiplier * (this._string.charAt(scanIntPartIndex--) - "0");
              multiplier *= 10;
            }
          }
          if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ".") {
            this._currentIndex++;
            if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9")
              return void 0;
            while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
              frac *= 10;
              decimal += (this._string.charAt(this._currentIndex) - "0") / frac;
              this._currentIndex += 1;
            }
          }
          if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == "e" || this._string.charAt(this._currentIndex) == "E") && this._string.charAt(this._currentIndex + 1) != "x" && this._string.charAt(this._currentIndex + 1) != "m") {
            this._currentIndex++;
            if (this._string.charAt(this._currentIndex) == "+") {
              this._currentIndex++;
            } else if (this._string.charAt(this._currentIndex) == "-") {
              this._currentIndex++;
              expsign = -1;
            }
            if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9")
              return void 0;
            while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
              exponent *= 10;
              exponent += this._string.charAt(this._currentIndex) - "0";
              this._currentIndex++;
            }
          }
          let number = integer + decimal;
          number *= sign;
          if (exponent)
            number *= Math.pow(10, expsign * exponent);
          if (startIndex == this._currentIndex)
            return void 0;
          this._skipOptionalSpacesOrDelimiter();
          return number;
        };
        Source.prototype._parseArcFlag = function() {
          if (this._currentIndex >= this._endIndex)
            return void 0;
          let flag = false;
          const flagChar = this._string.charAt(this._currentIndex++);
          if (flagChar == "0")
            flag = false;
          else if (flagChar == "1")
            flag = true;
          else
            return void 0;
          this._skipOptionalSpacesOrDelimiter();
          return flag;
        };
        Source.prototype.parseSegment = function() {
          const lookahead = this._string[this._currentIndex];
          let command = this._pathSegTypeFromChar(lookahead);
          if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) {
            if (this._previousCommand == window.SVGPathSeg.PATHSEG_UNKNOWN)
              return null;
            command = this._nextCommandHelper(lookahead, this._previousCommand);
            if (command == window.SVGPathSeg.PATHSEG_UNKNOWN)
              return null;
          } else {
            this._currentIndex++;
          }
          this._previousCommand = command;
          let points;
          switch (command) {
            case window.SVGPathSeg.PATHSEG_MOVETO_REL:
              return new window.SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
            case window.SVGPathSeg.PATHSEG_MOVETO_ABS:
              return new window.SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
            case window.SVGPathSeg.PATHSEG_LINETO_REL:
              return new window.SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
            case window.SVGPathSeg.PATHSEG_LINETO_ABS:
              return new window.SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
            case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
              return new window.SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
            case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
              return new window.SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
            case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
              return new window.SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
            case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
              return new window.SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
            case window.SVGPathSeg.PATHSEG_CLOSEPATH:
              this._skipOptionalSpaces();
              return new window.SVGPathSegClosePath(owningPathSegList);
            case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
              points = {
                x1: this._parseNumber(),
                y1: this._parseNumber(),
                x2: this._parseNumber(),
                y2: this._parseNumber(),
                x: this._parseNumber(),
                y: this._parseNumber()
              };
              return new window.SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
            case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
              points = {
                x1: this._parseNumber(),
                y1: this._parseNumber(),
                x2: this._parseNumber(),
                y2: this._parseNumber(),
                x: this._parseNumber(),
                y: this._parseNumber()
              };
              return new window.SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
            case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
              points = {
                x2: this._parseNumber(),
                y2: this._parseNumber(),
                x: this._parseNumber(),
                y: this._parseNumber()
              };
              return new window.SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
            case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
              points = {
                x2: this._parseNumber(),
                y2: this._parseNumber(),
                x: this._parseNumber(),
                y: this._parseNumber()
              };
              return new window.SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
            case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
              points = {
                x1: this._parseNumber(),
                y1: this._parseNumber(),
                x: this._parseNumber(),
                y: this._parseNumber()
              };
              return new window.SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
            case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
              points = {
                x1: this._parseNumber(),
                y1: this._parseNumber(),
                x: this._parseNumber(),
                y: this._parseNumber()
              };
              return new window.SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
            case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
              return new window.SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
            case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
              return new window.SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
            case window.SVGPathSeg.PATHSEG_ARC_REL:
              points = {
                x1: this._parseNumber(),
                y1: this._parseNumber(),
                arcAngle: this._parseNumber(),
                arcLarge: this._parseArcFlag(),
                arcSweep: this._parseArcFlag(),
                x: this._parseNumber(),
                y: this._parseNumber()
              };
              return new window.SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
            case window.SVGPathSeg.PATHSEG_ARC_ABS:
              points = {
                x1: this._parseNumber(),
                y1: this._parseNumber(),
                arcAngle: this._parseNumber(),
                arcLarge: this._parseArcFlag(),
                arcSweep: this._parseArcFlag(),
                x: this._parseNumber(),
                y: this._parseNumber()
              };
              return new window.SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
            default:
              throw "Unknown path seg type.";
          }
        };
        const builder = new Builder();
        const source = new Source(string);
        if (!source.initialCommandIsMoveTo())
          return [];
        while (source.hasMoreData()) {
          const pathSeg = source.parseSegment();
          if (!pathSeg)
            return [];
          builder.appendSegment(pathSeg);
        }
        return builder.pathSegList;
      };
    }
  } catch (e) {
    console.warn("An error occurred in tsParticles pathseg polyfill. If the Polygon Mask is not working, please open an issue here: https://github.com/tsparticles/tsparticles", e);
  }
})();

// node_modules/@tsparticles/plugin-polygon-mask/browser/Options/Classes/PolygonMaskDrawStroke.js
var PolygonMaskDrawStroke = class {
  constructor(engine) {
    this._engine = engine;
    this.color = new OptionsColor();
    this.width = 0.5;
    this.opacity = 1;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.color = OptionsColor.create(this.color, data.color);
    if (isString(this.color.value)) {
      this.opacity = stringToAlpha(this._engine, this.color.value) ?? this.opacity;
    }
    if (data.opacity !== void 0) {
      this.opacity = data.opacity;
    }
    if (data.width !== void 0) {
      this.width = data.width;
    }
  }
};

// node_modules/@tsparticles/plugin-polygon-mask/browser/Options/Classes/PolygonMaskDraw.js
var PolygonMaskDraw = class {
  constructor(engine) {
    this.enable = false;
    this.stroke = new PolygonMaskDrawStroke(engine);
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    const stroke = data.stroke;
    this.stroke.load(stroke);
  }
};

// node_modules/@tsparticles/plugin-polygon-mask/browser/Enums/PolygonMaskInlineArrangement.js
var PolygonMaskInlineArrangement;
(function(PolygonMaskInlineArrangement2) {
  PolygonMaskInlineArrangement2["equidistant"] = "equidistant";
  PolygonMaskInlineArrangement2["onePerPoint"] = "one-per-point";
  PolygonMaskInlineArrangement2["perPoint"] = "per-point";
  PolygonMaskInlineArrangement2["randomLength"] = "random-length";
  PolygonMaskInlineArrangement2["randomPoint"] = "random-point";
})(PolygonMaskInlineArrangement || (PolygonMaskInlineArrangement = {}));

// node_modules/@tsparticles/plugin-polygon-mask/browser/Options/Classes/PolygonMaskInline.js
var PolygonMaskInline = class {
  constructor() {
    this.arrangement = PolygonMaskInlineArrangement.onePerPoint;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.arrangement !== void 0) {
      this.arrangement = data.arrangement;
    }
  }
};

// node_modules/@tsparticles/plugin-polygon-mask/browser/Options/Classes/PolygonMaskLocalSvg.js
var PolygonMaskLocalSvg = class {
  constructor() {
    this.path = [];
    this.size = {
      height: 0,
      width: 0
    };
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.path !== void 0) {
      this.path = data.path;
    }
    if (data.size !== void 0) {
      if (data.size.width !== void 0) {
        this.size.width = data.size.width;
      }
      if (data.size.height !== void 0) {
        this.size.height = data.size.height;
      }
    }
  }
};

// node_modules/@tsparticles/plugin-polygon-mask/browser/Enums/PolygonMaskMoveType.js
var PolygonMaskMoveType;
(function(PolygonMaskMoveType2) {
  PolygonMaskMoveType2["path"] = "path";
  PolygonMaskMoveType2["radius"] = "radius";
})(PolygonMaskMoveType || (PolygonMaskMoveType = {}));

// node_modules/@tsparticles/plugin-polygon-mask/browser/Options/Classes/PolygonMaskMove.js
var PolygonMaskMove = class {
  constructor() {
    this.radius = 10;
    this.type = PolygonMaskMoveType.path;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.radius !== void 0) {
      this.radius = data.radius;
    }
    if (data.type !== void 0) {
      this.type = data.type;
    }
  }
};

// node_modules/@tsparticles/plugin-polygon-mask/browser/Enums/PolygonMaskType.js
var PolygonMaskType;
(function(PolygonMaskType2) {
  PolygonMaskType2["inline"] = "inline";
  PolygonMaskType2["inside"] = "inside";
  PolygonMaskType2["outside"] = "outside";
  PolygonMaskType2["none"] = "none";
})(PolygonMaskType || (PolygonMaskType = {}));

// node_modules/@tsparticles/plugin-polygon-mask/browser/Options/Classes/PolygonMask.js
var PolygonMask = class {
  constructor(engine) {
    this.draw = new PolygonMaskDraw(engine);
    this.enable = false;
    this.inline = new PolygonMaskInline();
    this.move = new PolygonMaskMove();
    this.scale = 1;
    this.type = PolygonMaskType.none;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    this.draw.load(data.draw);
    this.inline.load(data.inline);
    this.move.load(data.move);
    if (data.scale !== void 0) {
      this.scale = data.scale;
    }
    if (data.type !== void 0) {
      this.type = data.type;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    } else {
      this.enable = this.type !== PolygonMaskType.none;
    }
    if (data.url !== void 0) {
      this.url = data.url;
    }
    if (data.data !== void 0) {
      if (isString(data.data)) {
        this.data = data.data;
      } else {
        this.data = new PolygonMaskLocalSvg();
        this.data.load(data.data);
      }
    }
    if (data.position !== void 0) {
      this.position = deepExtend({}, data.position);
    }
  }
};

// node_modules/@tsparticles/plugin-polygon-mask/browser/utils.js
var squareExp5 = 2;
var inSegmentRange = {
  min: 0,
  max: 1
};
var double32 = 2;
function drawPolygonMask(engine, context, rawData, stroke) {
  const color = rangeColorToRgb(engine, stroke.color);
  if (!color) {
    return;
  }
  const firstIndex2 = 0, firstItem = rawData[firstIndex2];
  context.beginPath();
  context.moveTo(firstItem.x, firstItem.y);
  for (const item of rawData) {
    context.lineTo(item.x, item.y);
  }
  context.closePath();
  context.strokeStyle = getStyleFromRgb(color);
  context.lineWidth = stroke.width;
  context.stroke();
}
function drawPolygonMaskPath(engine, context, path, stroke, position) {
  const defaultTransform2 = {
    a: 1,
    b: 0,
    c: 0,
    d: 1
  };
  context.setTransform(defaultTransform2.a, defaultTransform2.b, defaultTransform2.c, defaultTransform2.d, position.x, position.y);
  const color = rangeColorToRgb(engine, stroke.color);
  if (!color) {
    return;
  }
  context.strokeStyle = getStyleFromRgb(color, stroke.opacity);
  context.lineWidth = stroke.width;
  context.stroke(path);
  context.resetTransform();
}
function parsePaths(paths2, scale, offset) {
  const res = [], defaultCount = 0;
  for (const path of paths2) {
    const segments = path.element.pathSegList, len = (segments == null ? void 0 : segments.numberOfItems) ?? defaultCount, p = {
      x: 0,
      y: 0
    };
    for (let i = 0; i < len; i++) {
      const segment = segments == null ? void 0 : segments.getItem(i), svgPathSeg = window.SVGPathSeg;
      switch (segment == null ? void 0 : segment.pathSegType) {
        case svgPathSeg.PATHSEG_MOVETO_ABS:
        case svgPathSeg.PATHSEG_LINETO_ABS:
        case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
        case svgPathSeg.PATHSEG_ARC_ABS:
        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {
          const absSeg = segment;
          p.x = absSeg.x;
          p.y = absSeg.y;
          break;
        }
        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
          p.x = segment.x;
          break;
        case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
          p.y = segment.y;
          break;
        case svgPathSeg.PATHSEG_LINETO_REL:
        case svgPathSeg.PATHSEG_MOVETO_REL:
        case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:
        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
        case svgPathSeg.PATHSEG_ARC_REL:
        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {
          const relSeg = segment;
          p.x += relSeg.x;
          p.y += relSeg.y;
          break;
        }
        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
          p.x += segment.x;
          break;
        case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:
          p.y += segment.y;
          break;
        case svgPathSeg.PATHSEG_UNKNOWN:
        case svgPathSeg.PATHSEG_CLOSEPATH:
          continue;
      }
      res.push({
        x: p.x * scale + offset.x,
        y: p.y * scale + offset.y
      });
    }
  }
  return res;
}
function calcClosestPointOnSegment(s1, s2, pos) {
  const { dx: dx1, dy: dy1 } = getDistances(pos, s1), { dx: dx2, dy: dy2 } = getDistances(s2, s1), t = (dx1 * dx2 + dy1 * dy2) / (dx2 ** squareExp5 + dy2 ** squareExp5), res = {
    x: s1.x + dx2 * t,
    y: s1.y + dy2 * t,
    isOnSegment: t >= inSegmentRange.min && t <= inSegmentRange.max
  };
  if (t < inSegmentRange.min) {
    res.x = s1.x;
    res.y = s1.y;
  } else if (t > inSegmentRange.max) {
    res.x = s2.x;
    res.y = s2.y;
  }
  return res;
}
function segmentBounce(start, stop, velocity) {
  const { dx, dy } = getDistances(start, stop), wallAngle = Math.atan2(dy, dx), wallNormal = Vector.create(Math.sin(wallAngle), -Math.cos(wallAngle)), d = double32 * (velocity.x * wallNormal.x + velocity.y * wallNormal.y);
  wallNormal.multTo(d);
  velocity.subFrom(wallNormal);
}

// node_modules/@tsparticles/plugin-polygon-mask/browser/PolygonMaskInstance.js
var noPolygonDataLoaded = `${errorPrefix} No polygon data loaded.`;
var noPolygonFound = `${errorPrefix} No polygon found, you need to specify SVG url in config.`;
var origin11 = {
  x: 0,
  y: 0
};
var half23 = 0.5;
var double33 = 2;
var PolygonMaskInstance = class {
  constructor(container, engine) {
    this._checkInsidePolygon = (position) => {
      const container2 = this._container, options = container2.actualOptions.polygon;
      if (!(options == null ? void 0 : options.enable) || options.type === PolygonMaskType.none || options.type === PolygonMaskType.inline) {
        return true;
      }
      if (!this.raw) {
        throw new Error(noPolygonFound);
      }
      const canvasSize = container2.canvas.size, x = (position == null ? void 0 : position.x) ?? getRandom() * canvasSize.width, y = (position == null ? void 0 : position.y) ?? getRandom() * canvasSize.height, indexOffset = 1;
      let inside = false;
      for (let i = 0, j = this.raw.length - indexOffset; i < this.raw.length; j = i++) {
        const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;
        if (intersect) {
          inside = !inside;
        }
      }
      if (options.type === PolygonMaskType.inside) {
        return inside;
      } else {
        return options.type === PolygonMaskType.outside ? !inside : false;
      }
    };
    this._createPath2D = () => {
      var _a, _b;
      const container2 = this._container, options = container2.actualOptions.polygon;
      if (!options || !((_a = this.paths) == null ? void 0 : _a.length)) {
        return;
      }
      for (const path of this.paths) {
        const pathData = (_b = path.element) == null ? void 0 : _b.getAttribute("d");
        if (pathData) {
          const path2d = new Path2D(pathData), matrix = document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(this._scale);
          if (finalPath.addPath) {
            finalPath.addPath(path2d, transform);
            path.path2d = finalPath;
          } else {
            delete path.path2d;
          }
        } else {
          delete path.path2d;
        }
        if (path.path2d ?? !this.raw) {
          continue;
        }
        path.path2d = new Path2D();
        const firstIndex2 = 0, firstPoint = this.raw[firstIndex2];
        path.path2d.moveTo(firstPoint.x, firstPoint.y);
        this.raw.forEach((pos, i) => {
          var _a2;
          if (i > firstIndex2) {
            (_a2 = path.path2d) == null ? void 0 : _a2.lineTo(pos.x, pos.y);
          }
        });
        path.path2d.closePath();
      }
    };
    this._downloadSvgPath = async (svgUrl, force) => {
      const options = this._container.actualOptions.polygon;
      if (!options) {
        return;
      }
      const url = svgUrl ?? options.url, forceDownload = force ?? false;
      if (!url || this.paths !== void 0 && !forceDownload) {
        return this.raw;
      }
      const req = await fetch(url);
      if (!req.ok) {
        throw new Error(`${errorPrefix} occurred during polygon mask download`);
      }
      return this._parseSvgPath(await req.text(), force);
    };
    this._drawPoints = () => {
      if (!this.raw) {
        return;
      }
      for (const item of this.raw) {
        void this._container.particles.addParticle({
          x: item.x,
          y: item.y
        });
      }
    };
    this._getEquidistantPointByIndex = (index) => {
      var _a, _b, _c, _d;
      const container2 = this._container, options = container2.actualOptions, polygonMaskOptions = options.polygon;
      if (!polygonMaskOptions) {
        return;
      }
      if (!((_a = this.raw) == null ? void 0 : _a.length) || !((_b = this.paths) == null ? void 0 : _b.length)) {
        throw new Error(noPolygonDataLoaded);
      }
      let offset = 0, point;
      const baseAccumulator = 0, totalLength = this.paths.reduce((tot, path) => tot + path.length, baseAccumulator), distance = totalLength / options.particles.number.value;
      for (const path of this.paths) {
        const pathDistance = distance * index - offset;
        if (pathDistance <= path.length) {
          point = path.element.getPointAtLength(pathDistance);
          break;
        } else {
          offset += path.length;
        }
      }
      const scale = this._scale;
      return {
        x: ((point == null ? void 0 : point.x) ?? origin11.x) * scale + (((_c = this.offset) == null ? void 0 : _c.x) ?? origin11.x),
        y: ((point == null ? void 0 : point.y) ?? origin11.y) * scale + (((_d = this.offset) == null ? void 0 : _d.y) ?? origin11.y)
      };
    };
    this._getPointByIndex = (index) => {
      var _a;
      if (!((_a = this.raw) == null ? void 0 : _a.length)) {
        throw new Error(noPolygonDataLoaded);
      }
      const coords = this.raw[index % this.raw.length];
      return {
        x: coords.x,
        y: coords.y
      };
    };
    this._getRandomPoint = () => {
      var _a;
      if (!((_a = this.raw) == null ? void 0 : _a.length)) {
        throw new Error(noPolygonDataLoaded);
      }
      const coords = itemFromArray(this.raw);
      return {
        x: coords.x,
        y: coords.y
      };
    };
    this._getRandomPointByLength = () => {
      var _a, _b, _c, _d;
      const container2 = this._container, options = container2.actualOptions.polygon;
      if (!options) {
        return;
      }
      if (!((_a = this.raw) == null ? void 0 : _a.length) || !((_b = this.paths) == null ? void 0 : _b.length)) {
        throw new Error(noPolygonDataLoaded);
      }
      const path = itemFromArray(this.paths), offset = 1, distance = Math.floor(getRandom() * path.length) + offset, point = path.element.getPointAtLength(distance), scale = this._scale;
      return {
        x: point.x * scale + (((_c = this.offset) == null ? void 0 : _c.x) ?? origin11.x),
        y: point.y * scale + (((_d = this.offset) == null ? void 0 : _d.y) ?? origin11.y)
      };
    };
    this._initRawData = async (force) => {
      const options = this._container.actualOptions.polygon;
      if (!options) {
        return;
      }
      if (options.url) {
        this.raw = await this._downloadSvgPath(options.url, force);
      } else if (options.data) {
        const data = options.data;
        let svg;
        if (isString(data)) {
          svg = data;
        } else {
          const getPath = (p) => `<path d="${p}" />`, path = isArray(data.path) ? data.path.map(getPath).join("") : getPath(data.path);
          const namespaces = 'xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"';
          svg = `<svg ${namespaces} width="${data.size.width}" height="${data.size.height}">${path}</svg>`;
        }
        this.raw = this._parseSvgPath(svg, force);
      }
      this._createPath2D();
      this._engine.dispatchEvent("polygonMaskLoaded", {
        container: this._container
      });
    };
    this._parseSvgPath = (xml, force) => {
      const forceDownload = force ?? false;
      if (this.paths !== void 0 && !forceDownload) {
        return this.raw;
      }
      const container2 = this._container, options = container2.actualOptions.polygon;
      if (!options) {
        return;
      }
      const parser = new DOMParser(), doc = parser.parseFromString(xml, "image/svg+xml"), firstIndex2 = 0, svg = doc.getElementsByTagName("svg")[firstIndex2];
      let svgPaths = svg.getElementsByTagName("path");
      if (!svgPaths.length) {
        svgPaths = doc.getElementsByTagName("path");
      }
      this.paths = [];
      for (let i = 0; i < svgPaths.length; i++) {
        const path = svgPaths.item(i);
        if (path) {
          this.paths.push({
            element: path,
            length: path.getTotalLength()
          });
        }
      }
      const scale = this._scale;
      this.dimension.width = parseFloat(svg.getAttribute("width") ?? "0") * scale;
      this.dimension.height = parseFloat(svg.getAttribute("height") ?? "0") * scale;
      const position = options.position ?? {
        x: 50,
        y: 50
      }, canvasSize = container2.canvas.size;
      this.offset = {
        x: canvasSize.width * position.x / percentDenominator - this.dimension.width * half23,
        y: canvasSize.height * position.y / percentDenominator - this.dimension.height * half23
      };
      return parsePaths(this.paths, scale, this.offset);
    };
    this._polygonBounce = (particle, delta, direction) => {
      const options = this._container.actualOptions.polygon;
      if (!this.raw || !(options == null ? void 0 : options.enable) || direction !== OutModeDirection.top) {
        return false;
      }
      if (options.type === PolygonMaskType.inside || options.type === PolygonMaskType.outside) {
        let closest, dx, dy;
        const pos = particle.getPosition(), radius = particle.getRadius(), offset = 1;
        for (let i = 0, j = this.raw.length - offset; i < this.raw.length; j = i++) {
          const pi = this.raw[i], pj = this.raw[j];
          closest = calcClosestPointOnSegment(pi, pj, pos);
          const dist = getDistances(pos, closest);
          [dx, dy] = [dist.dx, dist.dy];
          if (dist.distance < radius) {
            segmentBounce(pi, pj, particle.velocity);
            return true;
          }
        }
        if (closest && dx !== void 0 && dy !== void 0 && !this._checkInsidePolygon(pos)) {
          const factor = { x: 1, y: 1 }, diameter = radius * double33, inverse = -1;
          if (pos.x >= closest.x) {
            factor.x = -1;
          }
          if (pos.y >= closest.y) {
            factor.y = -1;
          }
          particle.position.x = closest.x + diameter * factor.x;
          particle.position.y = closest.y + diameter * factor.y;
          particle.velocity.mult(inverse);
          return true;
        }
      } else if (options.type === PolygonMaskType.inline && particle.initialPosition) {
        const dist = getDistance(particle.initialPosition, particle.getPosition()), { velocity } = particle;
        if (dist > this._moveRadius) {
          velocity.x = velocity.y * half23 - velocity.x;
          velocity.y = velocity.x * half23 - velocity.y;
          return true;
        }
      }
      return false;
    };
    this._randomPoint = () => {
      const container2 = this._container, options = container2.actualOptions.polygon;
      if (!options) {
        return;
      }
      let position;
      if (options.type === PolygonMaskType.inline) {
        switch (options.inline.arrangement) {
          case PolygonMaskInlineArrangement.randomPoint:
            position = this._getRandomPoint();
            break;
          case PolygonMaskInlineArrangement.randomLength:
            position = this._getRandomPointByLength();
            break;
          case PolygonMaskInlineArrangement.equidistant:
            position = this._getEquidistantPointByIndex(container2.particles.count);
            break;
          case PolygonMaskInlineArrangement.onePerPoint:
          case PolygonMaskInlineArrangement.perPoint:
          default:
            position = this._getPointByIndex(container2.particles.count);
        }
      } else {
        const canvasSize = container2.canvas.size;
        position = {
          x: getRandom() * canvasSize.width,
          y: getRandom() * canvasSize.height
        };
      }
      if (this._checkInsidePolygon(position)) {
        return position;
      } else {
        return this._randomPoint();
      }
    };
    this._container = container;
    this._engine = engine;
    this.dimension = {
      height: 0,
      width: 0
    };
    this._moveRadius = 0;
    this._scale = 1;
  }
  clickPositionValid(position) {
    const options = this._container.actualOptions.polygon;
    return !!(options == null ? void 0 : options.enable) && options.type !== PolygonMaskType.none && options.type !== PolygonMaskType.inline && this._checkInsidePolygon(position);
  }
  draw(context) {
    var _a;
    if (!((_a = this.paths) == null ? void 0 : _a.length)) {
      return;
    }
    const options = this._container.actualOptions.polygon;
    if (!(options == null ? void 0 : options.enable)) {
      return;
    }
    const polygonDraw = options.draw;
    if (!polygonDraw.enable) {
      return;
    }
    const rawData = this.raw;
    for (const path of this.paths) {
      const path2d = path.path2d;
      if (!context) {
        continue;
      }
      if (path2d && this.offset) {
        drawPolygonMaskPath(this._engine, context, path2d, polygonDraw.stroke, this.offset);
      } else if (rawData) {
        drawPolygonMask(this._engine, context, rawData, polygonDraw.stroke);
      }
    }
  }
  async init() {
    const container = this._container, polygonMaskOptions = container.actualOptions.polygon, pxRatio = container.retina.pixelRatio;
    if (!polygonMaskOptions) {
      return;
    }
    this._moveRadius = polygonMaskOptions.move.radius * pxRatio;
    this._scale = polygonMaskOptions.scale * pxRatio;
    if (polygonMaskOptions.enable) {
      await this._initRawData();
    }
  }
  particleBounce(particle, delta, direction) {
    return this._polygonBounce(particle, delta, direction);
  }
  particlePosition(position) {
    var _a;
    const options = this._container.actualOptions.polygon, defaultLength2 = 0;
    if (!((options == null ? void 0 : options.enable) && (((_a = this.raw) == null ? void 0 : _a.length) ?? defaultLength2) > defaultLength2)) {
      return;
    }
    return deepExtend({}, position ? position : this._randomPoint());
  }
  particlesInitialization() {
    const options = this._container.actualOptions.polygon;
    if ((options == null ? void 0 : options.enable) && options.type === PolygonMaskType.inline && (options.inline.arrangement === PolygonMaskInlineArrangement.onePerPoint || options.inline.arrangement === PolygonMaskInlineArrangement.perPoint)) {
      this._drawPoints();
      return true;
    }
    return false;
  }
  resize() {
    const container = this._container, options = container.actualOptions.polygon;
    if (!((options == null ? void 0 : options.enable) && options.type !== PolygonMaskType.none)) {
      return;
    }
    if (this.redrawTimeout) {
      clearTimeout(this.redrawTimeout);
    }
    const timeout = 250;
    this.redrawTimeout = window.setTimeout(() => {
      void (async () => {
        await this._initRawData(true);
        await container.particles.redraw();
      })();
    }, timeout);
  }
  stop() {
    delete this.raw;
    delete this.paths;
  }
};

// node_modules/@tsparticles/plugin-polygon-mask/browser/PolygonMaskPlugin.js
var PolygonMaskPlugin = class {
  constructor(engine) {
    this.id = "polygonMask";
    this._engine = engine;
  }
  getPlugin(container) {
    return Promise.resolve(new PolygonMaskInstance(container, this._engine));
  }
  loadOptions(options, source) {
    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
      return;
    }
    let polygonOptions = options.polygon;
    if ((polygonOptions == null ? void 0 : polygonOptions.load) === void 0) {
      options.polygon = polygonOptions = new PolygonMask(this._engine);
    }
    polygonOptions.load(source == null ? void 0 : source.polygon);
  }
  needsPlugin(options) {
    var _a, _b;
    return ((_a = options == null ? void 0 : options.polygon) == null ? void 0 : _a.enable) ?? (((_b = options == null ? void 0 : options.polygon) == null ? void 0 : _b.type) !== void 0 && options.polygon.type !== PolygonMaskType.none);
  }
};

// node_modules/@tsparticles/plugin-polygon-mask/browser/index.js
async function loadPolygonMaskPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPlugin(new PolygonMaskPlugin(engine), refresh);
}

// node_modules/@tsparticles/path-polygon/browser/PolygonPathGenerator.js
var PolygonPathGenerator = class {
  constructor() {
    this._createDirs = () => {
      this.dirsList = [];
      for (let i = 0; i < 360; i += 360 / this.options.sides) {
        const angle = this.options.angle + i;
        this.dirsList.push(Vector.create(Math.cos(angle * Math.PI / 180), Math.sin(angle * Math.PI / 180)));
      }
    };
    this.dirsList = [];
    this.options = {
      sides: 6,
      turnSteps: 20,
      angle: 30
    };
  }
  generate(p) {
    const { sides: sides7 } = this.options;
    if (p.hexStep === void 0) {
      p.hexStep = 0;
    }
    if (p.hexDirection === void 0) {
      p.hexDirection = sides7 === 6 ? (getRandom() * 3 | 0) * 2 : getRandom() * sides7 | 0;
    }
    if (p.hexSpeed === void 0) {
      p.hexSpeed = p.velocity.length;
    }
    if (p.hexStep % this.options.turnSteps === 0) {
      p.hexDirection = getRandom() > 0.5 ? (p.hexDirection + 1) % sides7 : (p.hexDirection + sides7 - 1) % sides7;
    }
    p.velocity.x = 0;
    p.velocity.y = 0;
    p.hexStep++;
    const direction = this.dirsList[p.hexDirection];
    return Vector.create(direction.x * p.hexSpeed, direction.y * p.hexSpeed);
  }
  init(container) {
    const options = container.actualOptions.particles.move.path.options;
    this.options.sides = options.sides > 0 ? options.sides : 6;
    this.options.angle = options.angle ?? 30;
    this.options.turnSteps = options.turnSteps >= 0 ? options.turnSteps : 20;
    this._createDirs();
  }
  reset(particle) {
    delete particle.hexStep;
    delete particle.hexDirection;
    delete particle.hexSpeed;
  }
  update() {
  }
};

// node_modules/@tsparticles/path-polygon/browser/index.js
var polygonPathName = "polygonPathGenerator";
async function loadPolygonPath(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPathGenerator(polygonPathName, new PolygonPathGenerator(), refresh);
}

// node_modules/@tsparticles/shape-rounded-polygon/browser/Utils.js
var double34 = 2;
var doublePI18 = Math.PI * double34;
var half24 = 0.5;
var defaultRotation3 = 0;
function polygon(sides7, radius, rot = defaultRotation3) {
  const step = doublePI18 / sides7, path = [];
  for (let i = 0; i < sides7; i++) {
    path.push({ x: Math.cos(i * step + rot) * radius, y: Math.sin(i * step + rot) * radius });
  }
  return path;
}
function roundedPath(context, path, radius) {
  const index1 = 0, index2 = 1, increment2 = 1;
  let p1 = path[index1], p2 = path[index2];
  const len = path.length;
  context.moveTo((p1.x + p2.x) * half24, (p1.y + p2.y) * half24);
  for (let i = 1; i <= len; i++) {
    p1 = p2;
    p2 = path[(i + increment2) % len];
    context.arcTo(p1.x, p1.y, (p1.x + p2.x) * half24, (p1.y + p2.y) * half24, radius);
  }
}

// node_modules/@tsparticles/shape-rounded-polygon/browser/RoundedPolygonDrawer.js
var defaultSides3 = 5;
var defaultRadius = 5;
var RoundedPolygonDrawer = class {
  constructor() {
    this.validTypes = ["rounded-polygon"];
  }
  draw(data) {
    const { context, particle, radius } = data;
    roundedPath(context, polygon(particle.sides, radius), particle.borderRadius ?? defaultRadius);
  }
  getSidesCount(particle) {
    const roundedPolygon = particle.shapeData;
    return Math.round(getRangeValue((roundedPolygon == null ? void 0 : roundedPolygon.sides) ?? defaultSides3));
  }
  particleInit(container, particle) {
    const shapeData = particle.shapeData;
    particle.borderRadius = Math.round(getRangeValue((shapeData == null ? void 0 : shapeData.radius) ?? defaultSides3)) * container.retina.pixelRatio;
  }
};

// node_modules/@tsparticles/shape-rounded-polygon/browser/index.js
async function loadRoundedPolygonShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new RoundedPolygonDrawer(), refresh);
}

// node_modules/@tsparticles/shape-rounded-rect/browser/Utils.js
function drawRoundedRect(ctx, fixedRadius, fixedDiameter, borderRadius) {
  const info = {
    x: -fixedRadius,
    y: -fixedRadius,
    height: fixedDiameter,
    width: fixedDiameter
  }, radius = {
    topLeft: borderRadius,
    topRight: borderRadius,
    bottomLeft: borderRadius,
    bottomRight: borderRadius
  }, { x, y, width, height } = info, r = x + width, b = y + height;
  ctx.moveTo(x + radius.topLeft, y);
  ctx.lineTo(r - radius.topRight, y);
  ctx.quadraticCurveTo(r, y, r, y + radius.topRight);
  ctx.lineTo(r, y + height - radius.bottomRight);
  ctx.quadraticCurveTo(r, b, r - radius.bottomRight, b);
  ctx.lineTo(x + radius.bottomLeft, b);
  ctx.quadraticCurveTo(x, b, x, b - radius.bottomLeft);
  ctx.lineTo(x, y + radius.topLeft);
  ctx.quadraticCurveTo(x, y, x + radius.topLeft, y);
}

// node_modules/@tsparticles/shape-rounded-rect/browser/RoundedRectDrawer.js
var fixFactorSquare = 2;
var fixFactor2 = Math.sqrt(fixFactorSquare);
var double35 = 2;
var defaultRadius2 = 5;
var RoundedRectDrawer = class {
  constructor() {
    this.validTypes = ["rounded-rect"];
  }
  draw(data) {
    const { context, particle, radius } = data, fixedRadius = radius / fixFactor2, fixedDiameter = fixedRadius * double35, borderRadius = particle.borderRadius ?? defaultRadius2;
    if ("roundRect" in context) {
      context.roundRect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter, borderRadius);
    } else {
      drawRoundedRect(context, fixedRadius, fixedDiameter, borderRadius);
    }
  }
  particleInit(container, particle) {
    const shapeData = particle.shapeData;
    particle.borderRadius = getRangeValue((shapeData == null ? void 0 : shapeData.radius) ?? defaultRadius2) * container.retina.pixelRatio;
  }
};

// node_modules/@tsparticles/shape-rounded-rect/browser/index.js
async function loadRoundedRectShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new RoundedRectDrawer(), refresh);
}

// node_modules/@tsparticles/path-svg/browser/SVGPathGenerator.js
var SVGPathDirection;
(function(SVGPathDirection2) {
  SVGPathDirection2[SVGPathDirection2["normal"] = 0] = "normal";
  SVGPathDirection2[SVGPathDirection2["reverse"] = 1] = "reverse";
})(SVGPathDirection || (SVGPathDirection = {}));
var defaultSpeed = 1;
var minStep = 0;
var minIndex = 0;
var minWidth4 = 0;
var minScale = 1;
var SVGPathGenerator = class {
  constructor() {
    this._paths = [];
    this._reverse = false;
    this._size = { width: 0, height: 0 };
    this._scale = 1;
    this._offset = { x: 0, y: 0, mode: PixelMode.percent };
    this._width = 0;
  }
  generate(particle, delta) {
    const container = particle.container, pxRatio = container.retina.pixelRatio;
    if (particle.svgDirection === void 0) {
      particle.svgDirection = getRandom() > half ? SVGPathDirection.normal : SVGPathDirection.reverse;
    }
    if (particle.svgPathIndex === void 0) {
      particle.svgPathIndex = Math.floor(Math.random() * this._paths.length);
    }
    if (particle.svgSpeed === void 0) {
      particle.svgSpeed = particle.velocity.mult((particle.retina.moveSpeed ?? defaultSpeed) * half).length;
    }
    if (particle.svgStep === void 0) {
      particle.svgStep = randomInRange({ min: 0, max: this._paths[particle.svgPathIndex].length }) * pxRatio;
    }
    if (particle.svgOffset === void 0) {
      particle.svgOffset = {
        width: randomInRange({ min: -this._width * half, max: this._width * half }) * pxRatio,
        height: randomInRange({ min: -this._width * half, max: this._width * half }) * pxRatio
      };
    }
    if (particle.svgInitialPosition === void 0) {
      particle.svgInitialPosition = { ...particle.position };
    }
    particle.velocity.x = 0;
    particle.velocity.y = 0;
    if (particle.svgDirection === SVGPathDirection.normal) {
      particle.svgStep += particle.svgSpeed * delta.factor;
    } else {
      particle.svgStep -= particle.svgSpeed * delta.factor;
    }
    let path = this._paths[particle.svgPathIndex];
    if (path) {
      const pathLength = path.length, indexOffset = 1;
      if (particle.svgStep >= pathLength) {
        particle.svgPathIndex = particle.svgPathIndex + indexOffset;
        if (particle.svgPathIndex >= this._paths.length) {
          if (this._reverse) {
            particle.svgPathIndex = this._paths.length - indexOffset;
            particle.svgDirection = SVGPathDirection.reverse;
          } else {
            particle.svgPathIndex = 0;
            particle.svgStep = 0;
          }
        }
      } else if (particle.svgStep <= minStep) {
        particle.svgPathIndex = particle.svgPathIndex - indexOffset;
        if (particle.svgPathIndex < minIndex) {
          if (this._reverse) {
            particle.svgPathIndex = 0;
            particle.svgDirection = SVGPathDirection.normal;
          } else {
            particle.svgPathIndex = this._paths.length - indexOffset;
            path = this._paths[particle.svgPathIndex];
            particle.svgStep = path.length;
          }
        }
      }
      path = this._paths[particle.svgPathIndex];
    }
    if (path) {
      const pathElement = path.element, pos = pathElement.getPointAtLength(particle.svgStep), canvasSize = particle.container.canvas.size, offset = getPosition(this._offset, canvasSize), scale = this._scale * pxRatio;
      particle.position.x = (pos.x - this._size.width * half) * scale + particle.svgInitialPosition.x + offset.x + particle.svgOffset.width;
      particle.position.y = (pos.y - this._size.height * half) * scale + particle.svgInitialPosition.y + offset.y + particle.svgOffset.height;
    }
    return Vector.origin;
  }
  init(container) {
    const options = container.actualOptions.particles.move.path.options, position = options.position ?? this._offset;
    this._reverse = options.reverse ?? this._reverse;
    this._scale = options.scale ?? minScale;
    this._offset.x = position.x;
    this._offset.y = position.y;
    this._offset.mode = position.mode;
    this._width = options.width ?? minWidth4;
    if (options.url && !options.path) {
      const url = options.url;
      void (async () => {
        const response = await fetch(url), data = await response.text();
        const parser = new DOMParser(), doc = parser.parseFromString(data, "image/svg+xml"), firstIndex2 = 0, svg = doc.getElementsByTagName("svg")[firstIndex2];
        let svgPaths = svg.getElementsByTagName("path");
        if (!svgPaths.length) {
          svgPaths = doc.getElementsByTagName("path");
        }
        this._paths = [];
        for (let i = 0; i < svgPaths.length; i++) {
          const path = svgPaths.item(i);
          if (path) {
            this._paths.push({
              element: path,
              length: path.getTotalLength()
            });
          }
        }
        this._size.height = parseFloat(svg.getAttribute("height") ?? "0");
        this._size.width = parseFloat(svg.getAttribute("width") ?? "0");
      })();
    } else if (options.path) {
      const path = options.path;
      this._paths = [];
      for (const item of path.data) {
        const element = document.createElementNS("http://www.w3.org/2000/svg", "path");
        element.setAttribute("d", item);
        this._paths.push({
          element,
          length: element.getTotalLength()
        });
      }
      this._size.height = path.size.height;
      this._size.width = path.size.width;
    }
  }
  reset() {
  }
  update() {
  }
};

// node_modules/@tsparticles/path-svg/browser/index.js
var svgPathName = "svgPathGenerator";
async function loadSVGPath(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPathGenerator(svgPathName, new SVGPathGenerator(), refresh);
}

// node_modules/@tsparticles/path-simplex-noise/browser/SimplexNoiseGenerator.js
var defaultOptions3 = {
  size: 20,
  increment: 4e-3,
  columns: 0,
  rows: 0,
  layers: 0,
  width: 0,
  height: 0,
  offset: {
    x: 4e4,
    y: 4e4,
    z: 4e4
  }
};
var SimplexNoiseGenerator = class {
  constructor() {
    const simplex = new SimplexNoise();
    this._simplex = simplex.noise4d;
    this.field = [];
    this.noiseW = 0;
    this.options = deepExtend({}, defaultOptions3);
  }
  generate(particle) {
    var _a, _b, _c;
    const pos = particle.getPosition(), point = {
      x: Math.max(Math.floor(pos.x / this.options.size), 0),
      y: Math.max(Math.floor(pos.y / this.options.size), 0),
      z: Math.max(Math.floor(pos.z / this.options.size), 0)
    }, v = Vector.origin;
    if (!((_c = (_b = (_a = this.field) == null ? void 0 : _a[point.x]) == null ? void 0 : _b[point.y]) == null ? void 0 : _c[point.z])) {
      return v;
    }
    v.setTo(this.field[point.x][point.y][point.z]);
    return v;
  }
  init(container) {
    this.container = container;
    this._setup();
  }
  reset() {
  }
  update() {
    if (!this.container) {
      return;
    }
    this._calculateField();
    this.noiseW += this.options.increment;
  }
  _calculateField() {
    const options = this.options;
    for (let x = 0; x < options.columns; x++) {
      for (let y = 0; y < options.rows; y++) {
        for (let z = 0; z < options.layers; z++) {
          this.field[x][y][z].angle = this._simplex.noise(x / 50, y / 50, z / 50, this.noiseW) * Math.PI * 2;
          this.field[x][y][z].length = this._simplex.noise(x / 100 + options.offset.x, y / 100 + options.offset.y, z / 100 + options.offset.z, this.noiseW);
        }
      }
    }
  }
  _initField() {
    this.field = new Array(this.options.columns);
    for (let x = 0; x < this.options.columns; x++) {
      this.field[x] = new Array(this.options.rows);
      for (let y = 0; y < this.options.rows; y++) {
        this.field[x][y] = new Array(this.options.layers);
        for (let z = 0; z < this.options.layers; z++) {
          this.field[x][y][z] = Vector.origin;
        }
      }
    }
  }
  _resetField() {
    const container = this.container;
    if (!container) {
      return;
    }
    const sourceOptions = container.actualOptions.particles.move.path.options;
    this.options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions3.size;
    this.options.increment = sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions3.increment;
    this.options.width = container.canvas.size.width;
    this.options.height = container.canvas.size.height;
    const offset = sourceOptions.offset;
    this.options.offset.x = (offset == null ? void 0 : offset.x) ?? defaultOptions3.offset.x;
    this.options.offset.y = (offset == null ? void 0 : offset.y) ?? defaultOptions3.offset.y;
    this.options.offset.z = (offset == null ? void 0 : offset.z) ?? defaultOptions3.offset.z;
    this.options.seed = sourceOptions.seed ?? defaultOptions3.seed;
    this._simplex.seed(this.options.seed ?? getRandom());
    this.options.columns = Math.floor(this.options.width / this.options.size) + 1;
    this.options.rows = Math.floor(this.options.height / this.options.size) + 1;
    this.options.layers = Math.floor(container.zLayers / this.options.size) + 1;
    this._initField();
  }
  _setup() {
    this.noiseW = 0;
    this._resetField();
    addEventListener("resize", () => this._resetField());
  }
};

// node_modules/@tsparticles/path-simplex-noise/browser/index.js
var simplexNoisePathName = "simplexNoise";
async function loadSimplexNoisePath(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPathGenerator(simplexNoisePathName, new SimplexNoiseGenerator(), refresh);
}

// node_modules/@tsparticles/plugin-sounds/browser/Options/Classes/SoundsAudio.js
var SoundsAudio = class {
  constructor() {
    this.loop = false;
    this.source = "";
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (isObject(data)) {
      if (data.loop !== void 0) {
        this.loop = data.loop;
      }
      if (data.source !== void 0) {
        this.source = data.source;
      }
    } else {
      this.source = data;
    }
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/Options/Classes/SoundsNote.js
var SoundsNote = class {
  constructor() {
    this.duration = 500;
    this.value = [];
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.duration !== void 0) {
      this.duration = data.duration;
    }
    if (data.value !== void 0) {
      this.value = data.value;
    }
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/Options/Classes/SoundsMelody.js
var SoundsMelody = class _SoundsMelody {
  constructor() {
    this.loop = false;
    this.melodies = [];
    this.notes = [];
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.loop !== void 0) {
      this.loop = data.loop;
    }
    if (data.melodies !== void 0) {
      this.melodies = data.melodies.map((s) => {
        const tmp = new _SoundsMelody();
        tmp.load(s);
        return tmp;
      });
    }
    if (data.notes !== void 0) {
      this.notes = data.notes.map((s) => {
        const tmp = new SoundsNote();
        tmp.load(s);
        return tmp;
      });
    }
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/Options/Classes/SoundsEvent.js
var SoundsEvent = class {
  constructor() {
    this.event = [];
    this.notes = [];
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.event !== void 0) {
      this.event = data.event;
    }
    if (data.audio !== void 0) {
      if (isArray(data.audio)) {
        this.audio = data.audio.map((s) => {
          const tmp = new SoundsAudio();
          tmp.load(s);
          return tmp;
        });
      } else {
        this.audio = new SoundsAudio();
        this.audio.load(data.audio);
      }
    }
    if (data.notes !== void 0) {
      this.notes = data.notes.map((t) => {
        const tmp = new SoundsNote();
        tmp.load(t);
        return tmp;
      });
    }
    if (data.melodies !== void 0) {
      this.melodies = data.melodies.map((t) => {
        const tmp = new SoundsMelody();
        tmp.load(t);
        return tmp;
      });
    }
    if (data.filter) {
      if (isString(data.filter)) {
        const filterFunc = window[data.filter];
        if (isFunction(filterFunc)) {
          this.filter = filterFunc;
        }
      } else {
        this.filter = data.filter;
      }
    }
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/Options/Classes/SoundsIcon.js
var SoundsIcon = class {
  constructor() {
    this.width = 24;
    this.height = 24;
    this.style = "";
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.path !== void 0) {
      this.path = data.path;
    }
    if (data.svg !== void 0) {
      this.svg = data.svg;
    }
    if (data.width !== void 0) {
      this.width = data.width;
    }
    if (data.height !== void 0) {
      this.height = data.height;
    }
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/Options/Classes/SoundsIcons.js
var SoundsIcons = class {
  constructor() {
    this.mute = new SoundsIcon();
    this.unmute = new SoundsIcon();
    this.volumeDown = new SoundsIcon();
    this.volumeUp = new SoundsIcon();
    this.enable = false;
    this.mute.svg = `<?xml version="1.0"?>
<svg baseProfile="tiny" height="24px" version="1.2" viewBox="0 0 24 24" width="24px"
    xml:space="preserve" xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="Layer_1">
        <path fill="#fff" d="M19.707,5.293c-0.391-0.391-1.023-0.391-1.414,0l-1.551,1.551c-0.345-0.688-0.987-1.02-1.604-1.02c-0.449,0-0.905,0.152-1.356,0.453l-2.672,1.781C10.357,8.561,8.904,9,8,9c-1.654,0-3,1.346-3,3v2c0,1.237,0.754,2.302,1.826,2.76l-1.533,1.533c-0.391,0.391-0.391,1.023,0,1.414C5.488,19.902,5.744,20,6,20s0.512-0.098,0.707-0.293l2.527-2.527c0.697,0.174,1.416,0.455,1.875,0.762l2.672,1.781c0.451,0.301,0.907,0.453,1.356,0.453C16.035,20.176,17,19.495,17,18V9.414l2.707-2.707C20.098,6.316,20.098,5.684,19.707,5.293z M14.891,7.941c0.038-0.025,0.073-0.046,0.104-0.062C14.998,7.914,15,7.954,15,8v1.293l-2,2V9.202L14.891,7.941z M7,12c0-0.552,0.448-1,1-1c1.211,0,2.907-0.495,4-1.146v2.439l-2.83,2.83C8.757,15.046,8.356,15,8,15c-0.552,0-1-0.448-1-1V12z M10.301,15.406L12,13.707v2.439C11.519,15.859,10.925,15.604,10.301,15.406z M14.994,18.12c-0.03-0.016-0.065-0.036-0.104-0.062L13,16.798v-4.091l2-2V18C15,18.046,14.998,18.086,14.994,18.12z"/>
    </g>
</svg>`;
    this.unmute.svg = `<?xml version="1.0"?>
<svg baseProfile="tiny" height="24px" version="1.2" viewBox="0 0 24 24" width="24px"
    xml:space="preserve" xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="Layer_1">
        <path fill="#fff" d="M17.138,5.824c-0.449,0-0.905,0.152-1.356,0.453l-2.672,1.781C12.357,8.561,10.904,9,10,9c-1.654,0-3,1.346-3,3v2c0,1.654,1.346,3,3,3c0.904,0,2.357,0.439,3.109,0.941l2.672,1.781c0.451,0.301,0.907,0.453,1.356,0.453C18.035,20.176,19,19.495,19,18V8C19,6.505,18.035,5.824,17.138,5.824z M14,16.146C12.907,15.495,11.211,15,10,15c-0.552,0-1-0.448-1-1v-2c0-0.552,0.448-1,1-1c1.211,0,2.907-0.495,4-1.146V16.146z M17,18c0,0.046-0.002,0.086-0.006,0.12c-0.03-0.016-0.065-0.036-0.104-0.062L15,16.798V9.202l1.891-1.261c0.038-0.025,0.073-0.046,0.104-0.062C16.998,7.914,17,7.954,17,8V18z"/>
    </g>
</svg>`;
    this.volumeDown.svg = `<?xml version="1.0"?>
<svg baseProfile="tiny" height="24px" version="1.2" viewBox="0 0 24 24" width="24px"
    xml:space="preserve" xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="Layer_1">
        <path fill="#fff" d="M15.138,5.824c-0.449,0-0.905,0.152-1.356,0.453l-2.672,1.781C10.357,8.561,8.904,9,8,9c-1.654,0-3,1.346-3,3v2c0,1.654,1.346,3,3,3c0.904,0,2.357,0.439,3.109,0.941l2.672,1.781c0.451,0.301,0.907,0.453,1.356,0.453C16.035,20.176,17,19.495,17,18V8C17,6.505,16.035,5.824,15.138,5.824z M8,15c-0.552,0-1-0.448-1-1v-2c0-0.552,0.448-1,1-1c1.211,0,2.907-0.495,4-1.146v6.293C10.907,15.495,9.211,15,8,15z M15,18c0,0.046-0.002,0.086-0.006,0.12c-0.03-0.016-0.065-0.036-0.104-0.062L13,16.798V9.202l1.891-1.261c0.038-0.025,0.073-0.046,0.104-0.062C14.998,7.914,15,7.954,15,8V18z"/>
        <path fill="#fff" d="M18.292,10.294c-0.39,0.391-0.39,1.023,0.002,1.414c0.345,0.345,0.535,0.803,0.535,1.291c0,0.489-0.19,0.948-0.536,1.294c-0.391,0.39-0.391,1.023,0,1.414C18.488,15.902,18.744,16,19,16s0.512-0.098,0.707-0.293c0.724-0.723,1.122-1.685,1.122-2.708s-0.398-1.984-1.123-2.707C19.317,9.903,18.683,9.901,18.292,10.294z"/>
    </g>
</svg>`;
    this.volumeUp.svg = `<?xml version="1.0"?>
<svg baseProfile="tiny" height="24px" version="1.2" viewBox="0 0 24 24" width="24px"
    xml:space="preserve" xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="Layer_1">
        <path fill="#fff" d="M16.706,10.292c-0.389-0.389-1.023-0.391-1.414,0.002c-0.39,0.391-0.39,1.023,0.002,1.414c0.345,0.345,0.535,0.803,0.535,1.291c0,0.489-0.19,0.948-0.536,1.294c-0.391,0.39-0.391,1.023,0,1.414C15.488,15.902,15.744,16,16,16s0.512-0.098,0.707-0.293c0.724-0.723,1.122-1.685,1.122-2.708S17.431,11.015,16.706,10.292z"/>
        <path fill="#fff" d="M18.706,8.292c-0.391-0.389-1.023-0.39-1.414,0.002c-0.39,0.391-0.39,1.024,0.002,1.414c0.879,0.877,1.363,2.044,1.364,3.287c0.001,1.246-0.484,2.417-1.365,3.298c-0.391,0.391-0.391,1.023,0,1.414C17.488,17.902,17.744,18,18,18s0.512-0.098,0.707-0.293c1.259-1.259,1.952-2.933,1.951-4.713C20.657,11.217,19.964,9.547,18.706,8.292z"/>
        <path fill="#fff" d="M20.706,6.292c-0.391-0.389-1.023-0.39-1.414,0.002c-0.39,0.391-0.39,1.024,0.002,1.414c1.412,1.409,2.191,3.285,2.192,5.284c0.002,2.002-0.777,3.885-2.193,5.301c-0.391,0.391-0.391,1.023,0,1.414C19.488,19.902,19.744,20,20,20s0.512-0.098,0.707-0.293c1.794-1.794,2.781-4.18,2.779-6.717C23.485,10.457,22.497,8.078,20.706,6.292z"/>
        <path fill="#fff" d="M12.138,5.824c-0.449,0-0.905,0.152-1.356,0.453L8.109,8.059C7.357,8.561,5.904,9,5,9c-1.654,0-3,1.346-3,3v2c0,1.654,1.346,3,3,3c0.904,0,2.357,0.439,3.109,0.941l2.672,1.781c0.451,0.301,0.907,0.453,1.356,0.453C13.035,20.176,14,19.495,14,18V8C14,6.505,13.035,5.824,12.138,5.824z M5,15c-0.552,0-1-0.448-1-1v-2c0-0.552,0.448-1,1-1c1.211,0,2.907-0.495,4-1.146v6.293C7.907,15.495,6.211,15,5,15z M12,18c0,0.046-0.002,0.086-0.006,0.12c-0.03-0.016-0.065-0.036-0.104-0.062L10,16.798V9.202l1.891-1.261c0.038-0.025,0.073-0.046,0.104-0.062C11.998,7.914,12,7.954,12,8V18z"/>
    </g>
</svg>`;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    this.mute.load(data.mute);
    this.unmute.load(data.unmute);
    this.volumeDown.load(data.volumeDown);
    this.volumeUp.load(data.volumeUp);
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/Options/Classes/SoundsVolume.js
var SoundsVolume = class {
  constructor() {
    this.value = 100;
    this.max = 100;
    this.min = 0;
    this.step = 10;
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (isObject(data)) {
      if (data.max !== void 0) {
        this.max = data.max;
      }
      if (data.min !== void 0) {
        this.min = data.min;
      }
      if (data.step !== void 0) {
        this.step = data.step;
      }
      if (data.value !== void 0) {
        this.value = data.value;
      }
    } else {
      this.value = data;
    }
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/Options/Classes/Sounds.js
var Sounds = class {
  constructor() {
    this.autoPlay = true;
    this.enable = false;
    this.events = [];
    this.icons = new SoundsIcons();
    this.volume = new SoundsVolume();
  }
  load(data) {
    if (isNull(data)) {
      return;
    }
    if (data.autoPlay !== void 0) {
      this.autoPlay = data.autoPlay;
    }
    if (data.enable !== void 0) {
      this.enable = data.enable;
    }
    if (data.events !== void 0) {
      this.events = data.events.map((t) => {
        const event = new SoundsEvent();
        event.load(t);
        return event;
      });
    }
    this.icons.load(data.icons);
    if (data.volume !== void 0) {
      this.volume.load(data.volume);
    }
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/enums.js
var SoundsEventType;
(function(SoundsEventType2) {
  SoundsEventType2["mute"] = "soundsMuted";
  SoundsEventType2["unmute"] = "soundsUnmuted";
})(SoundsEventType || (SoundsEventType = {}));
var ImageDisplay;
(function(ImageDisplay2) {
  ImageDisplay2["Block"] = "block";
  ImageDisplay2["None"] = "none";
})(ImageDisplay || (ImageDisplay = {}));

// node_modules/@tsparticles/plugin-sounds/browser/utils.js
var notes = /* @__PURE__ */ new Map();
notes.set("C", [16.35, 32.7, 65.41, 130.81, 261.63, 523.25, 1046.5, 2093, 4186.01]);
notes.set("Db", [17.32, 34.65, 69.3, 138.59, 277.18, 554.37, 1108.73, 2217.46, 4434.92]);
notes.set("D", [18.35, 36.71, 73.42, 146.83, 293.66, 587.33, 1174.66, 2349.32, 4698.63]);
notes.set("Eb", [19.45, 38.89, 77.78, 155.56, 311.13, 622.25, 1244.51, 2489.02, 4978.03]);
notes.set("E", [20.6, 41.2, 82.41, 164.81, 329.63, 659.25, 1318.51, 2637.02, 5274.04]);
notes.set("F", [21.83, 43.65, 87.31, 174.61, 349.23, 698.46, 1396.91, 2793.83, 5587.65]);
notes.set("Gb", [23.12, 46.25, 92.5, 185, 369.99, 739.99, 1479.98, 2959.96, 5919.91]);
notes.set("G", [24.5, 49, 98, 196, 392, 783.99, 1567.98, 3135.96, 6271.93]);
notes.set("Ab", [25.96, 51.91, 103.83, 207.65, 415.3, 830.61, 1661.22, 3322.44, 6644.88]);
notes.set("A", [27.5, 55, 110, 220, 440, 880, 1760, 3520, 7040]);
notes.set("Bb", [29.14, 58.27, 116.54, 233.08, 466.16, 932.33, 1864.66, 3729.31, 7458.62]);
notes.set("B", [30.87, 61.74, 123.47, 246.94, 493.88, 987.77, 1975.53, 3951.07, 7902.13]);
notes.set("pause", [0]);
function getNoteFrequency(note) {
  const regex = /(([A-G]b?)(\d))|pause/i, result = regex.exec(note), groupKey = 2, defaultMatchKey = 0, innerGroupKey = 3;
  if (!(result == null ? void 0 : result.length)) {
    return;
  }
  const noteKey = result[groupKey] || result[defaultMatchKey], noteItem = notes.get(noteKey);
  if (!noteItem) {
    return;
  }
  return noteItem[parseInt(result[innerGroupKey] || "0")];
}
var muted = true;
var isWindowMuted = () => {
  return muted;
};
var unmuteWindow = () => {
  muted = false;
};

// node_modules/@tsparticles/plugin-sounds/browser/SoundsInstance.js
var zIndexOffset = 1;
var rightOffset = 1;
var minVolume = 0;
function initImage(data) {
  var _a;
  const img = document.createElement("img"), { clickCb, container, display, iconOptions, margin, options, pos, rightOffsets } = data, { width, path, style, svg } = iconOptions, defaultAccumulator = 0;
  setIconStyle(img, pos.top + margin, pos.right - (margin * (rightOffsets.length + rightOffset) + width + rightOffsets.reduce((a, b) => a + b, defaultAccumulator)), display, options.fullScreen.zIndex + zIndexOffset, width, margin, style);
  img.src = path ?? (svg ? `data:image/svg+xml;base64,${btoa(svg)}` : "");
  const parent = ((_a = container.canvas.element) == null ? void 0 : _a.parentNode) ?? document.body;
  parent.append(img);
  img.addEventListener("click", () => {
    void clickCb();
  });
  return img;
}
function removeImage(image) {
  if (!image) {
    return;
  }
  image.remove();
}
function setIconStyle(icon, top, left, display, zIndex, width, margin, style) {
  icon.style.userSelect = "none";
  icon.style.webkitUserSelect = "none";
  icon.style.position = "absolute";
  icon.style.top = `${top + margin}px`;
  icon.style.left = `${left - margin - width}px`;
  icon.style.display = display;
  icon.style.zIndex = `${zIndex + zIndexOffset}`;
  icon.style.cssText += style;
}
var SoundsInstance = class {
  constructor(container, engine) {
    this._addBuffer = (audioCtx) => {
      const buffer = audioCtx.createBufferSource();
      this._audioSources.push(buffer);
      return buffer;
    };
    this._addOscillator = (audioCtx) => {
      const oscillator = audioCtx.createOscillator();
      this._audioSources.push(oscillator);
      return oscillator;
    };
    this._initEvents = () => {
      const container2 = this._container, soundsOptions = container2.actualOptions.sounds;
      if (!(soundsOptions == null ? void 0 : soundsOptions.enable) || !container2.canvas.element) {
        return;
      }
      for (const event of soundsOptions.events) {
        const cb = (args) => {
          void (async () => {
            const filterNotValid = event.filter && !event.filter(args);
            if (this._container !== args.container) {
              return;
            }
            if (!this._container || !!this._container.muted || this._container.destroyed) {
              executeOnSingleOrMultiple(event.event, (item) => {
                this._engine.removeEventListener(item, cb);
              });
              return;
            }
            if (filterNotValid) {
              return;
            }
            const defaultNoteIndex = 0;
            if (event.audio) {
              this._playBuffer(itemFromSingleOrMultiple(event.audio));
            } else if (event.melodies) {
              const melody = itemFromArray(event.melodies);
              if (melody.melodies.length) {
                await Promise.allSettled(melody.melodies.map((m) => this._playNote(m.notes, defaultNoteIndex, melody.loop)));
              } else {
                await this._playNote(melody.notes, defaultNoteIndex, melody.loop);
              }
            } else if (event.notes) {
              const note = itemFromArray(event.notes);
              await this._playNote([note], defaultNoteIndex, false);
            }
          })();
        };
        executeOnSingleOrMultiple(event.event, (item) => {
          this._engine.addEventListener(item, cb);
        });
      }
    };
    this._mute = async () => {
      const container2 = this._container, audioContext = this._getAudioContext();
      for (const source of this._audioSources) {
        this._removeAudioSource(source);
      }
      if (this._gain) {
        this._gain.disconnect();
      }
      await audioContext.close();
      container2.audioContext = void 0;
      this._engine.dispatchEvent(SoundsEventType.mute, { container: this._container });
    };
    this._playBuffer = (audio) => {
      const audioBuffer = this._audioMap.get(audio.source);
      if (!audioBuffer) {
        return;
      }
      const audioCtx = this._container.audioContext;
      if (!audioCtx) {
        return;
      }
      const source = this._addBuffer(audioCtx);
      source.loop = audio.loop;
      source.buffer = audioBuffer;
      source.connect(this._gain ?? audioCtx.destination);
      source.start();
    };
    this._playFrequency = async (frequency, duration) => {
      if (!this._gain || this._container.muted) {
        return;
      }
      const audioContext = this._getAudioContext(), oscillator = this._addOscillator(audioContext);
      oscillator.connect(this._gain);
      oscillator.type = "sine";
      oscillator.frequency.value = frequency;
      oscillator.start();
      return new Promise((resolve) => {
        setTimeout(() => {
          this._removeAudioSource(oscillator);
          resolve();
        }, duration);
      });
    };
    this._playMuteSound = () => {
      if (this._container.muted) {
        return;
      }
      const audioContext = this._getAudioContext(), gain = audioContext.createGain();
      gain.connect(audioContext.destination);
      gain.gain.value = 0;
      const oscillator = audioContext.createOscillator();
      oscillator.connect(gain);
      oscillator.type = "sine";
      oscillator.frequency.value = 1;
      oscillator.start();
      setTimeout(() => {
        oscillator.stop();
        oscillator.disconnect();
        gain.disconnect();
      });
    };
    this._playNote = async (notes2, noteIdx, loop) => {
      if (this._container.muted) {
        return;
      }
      const note = notes2[noteIdx];
      if (!note) {
        return;
      }
      const value = note.value;
      const promises = executeOnSingleOrMultiple(value, async (_, idx) => {
        return this._playNoteValue(notes2, noteIdx, idx);
      });
      await (isArray(promises) ? Promise.allSettled(promises) : promises);
      const indexOffset = 1;
      let nextNoteIdx = noteIdx + indexOffset;
      if (loop && nextNoteIdx >= notes2.length) {
        nextNoteIdx = nextNoteIdx % notes2.length;
      }
      if (this._container.muted) {
        return;
      }
      await this._playNote(notes2, nextNoteIdx, loop);
    };
    this._playNoteValue = async (notes2, noteIdx, valueIdx) => {
      const note = notes2[noteIdx];
      if (!note) {
        return;
      }
      const value = itemFromSingleOrMultiple(note.value, valueIdx, true);
      try {
        const freq = getNoteFrequency(value);
        if (!isNumber(freq)) {
          return;
        }
        await this._playFrequency(freq, note.duration);
      } catch (e) {
        getLogger().error(e);
      }
    };
    this._removeAudioSource = (source) => {
      source.stop();
      source.disconnect();
      const deleteCount = 1;
      this._audioSources.splice(this._audioSources.indexOf(source), deleteCount);
    };
    this._unmute = () => {
      const container2 = this._container, options = container2.actualOptions, soundsOptions = options.sounds;
      if (!soundsOptions) {
        return;
      }
      const audioContext = this._getAudioContext();
      if (!this._audioSources) {
        this._audioSources = [];
      }
      const gain = audioContext.createGain();
      gain.connect(audioContext.destination);
      gain.gain.value = soundsOptions.volume.value / percentDenominator;
      this._gain = gain;
      this._initEvents();
      this._engine.dispatchEvent(SoundsEventType.unmute, { container: this._container });
    };
    this._updateMuteIcons = () => {
      const container2 = this._container, soundsOptions = container2.actualOptions.sounds;
      if (!(soundsOptions == null ? void 0 : soundsOptions.enable) || !soundsOptions.icons.enable) {
        return;
      }
      const muteImg = this._muteImg, unmuteImg = this._unmuteImg;
      if (muteImg) {
        muteImg.style.display = container2.muted ? "block" : "none";
      }
      if (unmuteImg) {
        unmuteImg.style.display = container2.muted ? "none" : "block";
      }
    };
    this._updateMuteStatus = async () => {
      const container2 = this._container, audioContext = this._getAudioContext();
      if (container2.muted) {
        await (audioContext == null ? void 0 : audioContext.suspend());
        await this._mute();
      } else {
        await (audioContext == null ? void 0 : audioContext.resume());
        this._unmute();
        this._playMuteSound();
      }
    };
    this._updateVolume = async () => {
      var _a;
      const container2 = this._container, soundsOptions = container2.actualOptions.sounds;
      if (!(soundsOptions == null ? void 0 : soundsOptions.enable)) {
        return;
      }
      clamp(this._volume, soundsOptions.volume.min, soundsOptions.volume.max);
      let stateChanged = false;
      if (this._volume <= minVolume && !container2.muted) {
        this._volume = 0;
        container2.muted = true;
        stateChanged = true;
      } else if (this._volume > minVolume && container2.muted) {
        container2.muted = false;
        stateChanged = true;
      }
      if (stateChanged) {
        this._updateMuteIcons();
        await this._updateMuteStatus();
      }
      if ((_a = this._gain) == null ? void 0 : _a.gain) {
        this._gain.gain.value = this._volume / percentDenominator;
      }
    };
    this._container = container;
    this._engine = engine;
    this._volume = 0;
    this._audioSources = [];
    this._audioMap = /* @__PURE__ */ new Map();
  }
  async init() {
    const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;
    if (!(soundsOptions == null ? void 0 : soundsOptions.enable)) {
      return;
    }
    if (soundsOptions.autoPlay && isWindowMuted()) {
      const firstClickHandler = () => {
        removeEventListener(mouseDownEvent, firstClickHandler);
        removeEventListener(touchStartEvent, firstClickHandler);
        unmuteWindow();
        void this.unmute();
      };
      const listenerOptions = {
        capture: true,
        once: true
      };
      addEventListener(mouseDownEvent, firstClickHandler, listenerOptions);
      addEventListener(touchStartEvent, firstClickHandler, listenerOptions);
    }
    this._volume = soundsOptions.volume.value;
    const events = soundsOptions.events;
    this._audioMap = /* @__PURE__ */ new Map();
    for (const event of events) {
      if (!event.audio) {
        continue;
      }
      const promises = executeOnSingleOrMultiple(event.audio, async (audio) => {
        const response = await fetch(audio.source);
        if (!response.ok) {
          return;
        }
        const arrayBuffer = await response.arrayBuffer(), audioContext = this._getAudioContext(), audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
        this._audioMap.set(audio.source, audioBuffer);
      });
      if (promises instanceof Promise) {
        await promises;
      } else {
        await Promise.allSettled(promises);
      }
    }
  }
  async mute() {
    if (!this._container.muted) {
      await this.toggleMute();
    }
  }
  async start() {
    const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;
    if (!(soundsOptions == null ? void 0 : soundsOptions.enable) || !container.canvas.element) {
      return;
    }
    container.muted = true;
    const canvas = container.canvas.element, pos = {
      top: canvas.offsetTop,
      right: canvas.offsetLeft + canvas.offsetWidth
    }, { mute, unmute, volumeDown, volumeUp } = soundsOptions.icons, margin = 10, toggleMute = async () => {
      await this.toggleMute();
    }, enableIcons = soundsOptions.icons.enable, display = enableIcons ? ImageDisplay.Block : ImageDisplay.None;
    this._muteImg = initImage({
      container,
      options,
      pos,
      display,
      iconOptions: mute,
      margin,
      rightOffsets: [volumeDown.width, volumeUp.width],
      clickCb: toggleMute
    });
    this._unmuteImg = initImage({
      container,
      options,
      pos,
      display: ImageDisplay.None,
      iconOptions: unmute,
      margin,
      rightOffsets: [volumeDown.width, volumeUp.width],
      clickCb: toggleMute
    });
    this._volumeDownImg = initImage({
      container,
      options,
      pos,
      display,
      iconOptions: volumeDown,
      margin,
      rightOffsets: [volumeUp.width],
      clickCb: async () => {
        await this.volumeDown();
      }
    });
    this._volumeUpImg = initImage({
      container,
      options,
      pos,
      display,
      iconOptions: volumeUp,
      margin,
      rightOffsets: [],
      clickCb: async () => {
        await this.volumeUp();
      }
    });
    if (!isWindowMuted() && soundsOptions.autoPlay) {
      await this.unmute();
    }
  }
  stop() {
    this._container.muted = true;
    void (async () => {
      await this._mute();
      removeImage(this._muteImg);
      removeImage(this._unmuteImg);
      removeImage(this._volumeDownImg);
      removeImage(this._volumeUpImg);
    })();
  }
  async toggleMute() {
    const container = this._container;
    container.muted = !container.muted;
    this._updateMuteIcons();
    await this._updateMuteStatus();
  }
  async unmute() {
    if (this._container.muted) {
      await this.toggleMute();
    }
  }
  async volumeDown() {
    const container = this._container, soundsOptions = container.actualOptions.sounds;
    if (!(soundsOptions == null ? void 0 : soundsOptions.enable)) {
      return;
    }
    if (container.muted) {
      this._volume = 0;
    }
    this._volume -= soundsOptions.volume.step;
    await this._updateVolume();
  }
  async volumeUp() {
    const container = this._container, soundsOptions = container.actualOptions.sounds;
    if (!(soundsOptions == null ? void 0 : soundsOptions.enable)) {
      return;
    }
    this._volume += soundsOptions.volume.step;
    await this._updateVolume();
  }
  _getAudioContext() {
    const container = this._container;
    if (!container.audioContext) {
      container.audioContext = new AudioContext();
    }
    return container.audioContext;
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/SoundsPlugin.js
var generalFirstClickHandler = () => {
  removeEventListener(mouseDownEvent, generalFirstClickHandler);
  removeEventListener(touchStartEvent, generalFirstClickHandler);
  unmuteWindow();
};
var SoundsPlugin = class {
  constructor(engine) {
    this.id = "sounds";
    this._engine = engine;
    const listenerOptions = {
      capture: true,
      once: true
    };
    addEventListener(mouseDownEvent, generalFirstClickHandler, listenerOptions);
    addEventListener(touchStartEvent, generalFirstClickHandler, listenerOptions);
  }
  getPlugin(container) {
    return Promise.resolve(new SoundsInstance(container, this._engine));
  }
  loadOptions(options, source) {
    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
      return;
    }
    let soundsOptions = options.sounds;
    if ((soundsOptions == null ? void 0 : soundsOptions.load) === void 0) {
      options.sounds = soundsOptions = new Sounds();
    }
    soundsOptions.load(source == null ? void 0 : source.sounds);
  }
  needsPlugin(options) {
    var _a;
    return ((_a = options == null ? void 0 : options.sounds) == null ? void 0 : _a.enable) ?? false;
  }
};

// node_modules/@tsparticles/plugin-sounds/browser/index.js
async function loadSoundsPlugin(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPlugin(new SoundsPlugin(engine), refresh);
}

// node_modules/@tsparticles/shape-spiral/browser/Utils.js
function drawSpiral(data) {
  const { context, particle, radius } = data;
  if (particle.spiralInnerRadius === void 0 || particle.spiralLineSpacing === void 0 || particle.spiralWidthFactor === void 0) {
    return;
  }
  const realWidth = (radius - particle.spiralInnerRadius) / particle.spiralLineSpacing, widthFactor = 10;
  for (let i = 0; i < realWidth * widthFactor; i++) {
    const angle = i / widthFactor, factor = particle.spiralInnerRadius + particle.spiralLineSpacing * angle, pos = {
      x: factor * Math.cos(angle),
      y: factor * Math.sin(angle)
    };
    context.lineTo(pos.x, pos.y);
  }
}

// node_modules/@tsparticles/shape-spiral/browser/SpiralDrawer.js
var defaultInnerRadius2 = 1;
var defaultLineSpacing = 1;
var defaultWidthFactor = 10;
var SpiralDrawer = class {
  constructor() {
    this.validTypes = ["spiral"];
  }
  draw(data) {
    drawSpiral(data);
  }
  particleInit(container, particle) {
    const pixelRatio = container.retina.pixelRatio, shapeData = particle.shapeData;
    particle.spiralInnerRadius = getRangeValue((shapeData == null ? void 0 : shapeData.innerRadius) ?? defaultInnerRadius2) * pixelRatio;
    particle.spiralLineSpacing = getRangeValue((shapeData == null ? void 0 : shapeData.lineSpacing) ?? defaultLineSpacing) * pixelRatio;
    particle.spiralWidthFactor = getRangeValue((shapeData == null ? void 0 : shapeData.widthFactor) ?? defaultWidthFactor);
  }
};

// node_modules/@tsparticles/shape-spiral/browser/index.js
async function loadSpiralShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new SpiralDrawer(), refresh);
}

// node_modules/@tsparticles/effect-trail/browser/TrailDrawer.js
var minTrailLength = 2;
var trailLengthOffset = 1;
var minWidth5 = -1;
var defaultLength = 10;
var defaultTransform = {
  a: 1,
  b: 0,
  c: 0,
  d: 1
};
var TrailDrawer = class {
  draw(data) {
    const { context, radius, particle, transformData } = data, diameter = radius * double, pxRatio = particle.container.retina.pixelRatio, currentPos = particle.getPosition(), trail = particle.trail;
    if (!trail || !particle.trailLength) {
      return;
    }
    const pathLength = particle.trailLength + radius;
    trail.push({
      color: context.fillStyle ?? context.strokeStyle,
      position: {
        x: currentPos.x,
        y: currentPos.y
      },
      transformData: { ...data.transformData }
    });
    if (trail.length < minTrailLength) {
      return;
    }
    while (trail.length > pathLength) {
      trail.shift();
    }
    const trailLength = Math.min(trail.length, pathLength), canvasSize = {
      width: particle.container.canvas.size.width + diameter,
      height: particle.container.canvas.size.height + diameter
    };
    let lastPos = trail[trailLength - trailLengthOffset].position;
    for (let i = trailLength; i > none; i--) {
      const step = trail[i - trailLengthOffset], position = step.position, stepTransformData = particle.trailTransform ? step.transformData ?? defaultTransform : defaultTransform;
      context.setTransform(stepTransformData.a, stepTransformData.b, stepTransformData.c, stepTransformData.d, position.x, position.y);
      context.beginPath();
      context.moveTo(lastPos.x - position.x, lastPos.y - position.y);
      const warp = {
        x: (lastPos.x + canvasSize.width) % canvasSize.width,
        y: (lastPos.y + canvasSize.height) % canvasSize.height
      };
      if (Math.abs(lastPos.x - position.x) > canvasSize.width * half || Math.abs(lastPos.y - position.y) > canvasSize.height * half) {
        lastPos = position;
        continue;
      }
      context.lineTo(Math.abs(lastPos.x - position.x) > canvasSize.width * half ? warp.x : originPoint.x, Math.abs(lastPos.y - position.y) > canvasSize.height * half ? warp.y : originPoint.y);
      const width = Math.max(i / trailLength * diameter, pxRatio, particle.trailMinWidth ?? minWidth5), oldAlpha = context.globalAlpha;
      context.globalAlpha = particle.trailFade ? i / trailLength : defaultAlpha;
      context.lineWidth = particle.trailMaxWidth ? Math.min(width, particle.trailMaxWidth) : width;
      context.strokeStyle = step.color;
      context.stroke();
      context.globalAlpha = oldAlpha;
      lastPos = position;
    }
    context.setTransform(transformData.a, transformData.b, transformData.c, transformData.d, currentPos.x, currentPos.y);
  }
  particleInit(container, particle) {
    particle.trail = [];
    const effectData = particle.effectData;
    particle.trailFade = (effectData == null ? void 0 : effectData.fade) ?? true;
    particle.trailLength = getRangeValue((effectData == null ? void 0 : effectData.length) ?? defaultLength) * container.retina.pixelRatio;
    particle.trailMaxWidth = (effectData == null ? void 0 : effectData.maxWidth) ? getRangeValue(effectData.maxWidth) * container.retina.pixelRatio : void 0;
    particle.trailMinWidth = (effectData == null ? void 0 : effectData.minWidth) ? getRangeValue(effectData.minWidth) * container.retina.pixelRatio : void 0;
    particle.trailTransform = (effectData == null ? void 0 : effectData.transform) ?? false;
  }
};

// node_modules/@tsparticles/effect-trail/browser/index.js
async function loadTrailEffect(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addEffect("trail", new TrailDrawer(), refresh);
}

// node_modules/@tsparticles/path-zig-zag/browser/ZigZagPathGenerator.js
var angularFrequencyFactor = 0.5;
var half25 = 0.5;
var halfPI4 = Math.PI * half25;
var ZigZagPathGenerator = class {
  constructor() {
    this.options = {
      waveHeight: { min: 0, max: 3 },
      waveLength: { min: 0, max: 5 }
    };
  }
  generate(particle, delta) {
    if (particle.zigzag === void 0) {
      particle.zigzag = {
        counter: getRandom(),
        waveHeight: getRangeValue(this.options.waveHeight),
        waveLength: getRangeValue(this.options.waveLength)
      };
    }
    const angularFrequency = angularFrequencyFactor / particle.zigzag.waveLength * delta.factor;
    particle.zigzag.counter += angularFrequency;
    const zigzagAngle = particle.zigzag.waveHeight * Math.sin(particle.zigzag.counter);
    particle.position.x += zigzagAngle * Math.cos(particle.velocity.angle + halfPI4);
    particle.position.y += zigzagAngle * Math.sin(particle.velocity.angle + halfPI4);
    return Vector.origin;
  }
  init(container) {
    const options = container.actualOptions.particles.move.path.options;
    this.options.waveLength = options.waveLength ?? this.options.waveLength;
    this.options.waveHeight = options.waveHeight ?? this.options.waveHeight;
  }
  reset() {
  }
  update() {
  }
};

// node_modules/@tsparticles/path-zig-zag/browser/index.js
var zigZagPathName = "zigZagPathGenerator";
async function loadZigZagPath(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addPathGenerator(zigZagPathName, new ZigZagPathGenerator(), refresh);
}

// node_modules/@tsparticles/all/browser/index.js
async function loadAll(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  initPjs(engine);
  await loadFull(engine, false);
  await loadHsvColorPlugin(engine, false);
  await loadNamedColorPlugin(engine, false);
  await loadOklchColorPlugin(engine, false);
  await loadEasingBackPlugin(engine, false);
  await loadEasingCircPlugin(engine, false);
  await loadEasingCubicPlugin(engine, false);
  await loadEasingExpoPlugin(engine, false);
  await loadEasingLinearPlugin(engine, false);
  await loadEasingQuartPlugin(engine, false);
  await loadEasingQuintPlugin(engine, false);
  await loadEasingSinePlugin(engine, false);
  await loadEmittersShapeCanvas(engine, false);
  await loadEmittersShapePath(engine, false);
  await loadEmittersShapePolygon(engine, false);
  await loadCanvasMaskPlugin(engine, false);
  await loadInfectionPlugin(engine, false);
  await loadMotionPlugin(engine, false);
  await loadPolygonMaskPlugin(engine, false);
  await loadSoundsPlugin(engine, false);
  await loadExportImagePlugin(engine, false);
  await loadExportJSONPlugin(engine, false);
  await loadExportVideoPlugin(engine, false);
  await loadExternalParticleInteraction(engine, false);
  await loadExternalPopInteraction(engine, false);
  await loadLightInteraction(engine, false);
  await loadParticlesRepulseInteraction(engine, false);
  await loadGradientUpdater(engine, false);
  await loadOrbitUpdater(engine, false);
  await loadCurvesPath(engine, false);
  await loadCurlNoisePath(engine, false);
  await loadPerlinNoisePath(engine, false);
  await loadPoissonDiscPlugin(engine, false);
  await loadPolygonPath(engine, false);
  await loadSVGPath(engine, false);
  await loadZigZagPath(engine, false);
  await loadSimplexNoisePath(engine, false);
  await loadBubbleEffect(engine, false);
  await loadArrowShape(engine, false);
  await loadCardsShape(engine, false);
  await loadCogShape(engine, false);
  await loadHeartShape(engine, false);
  await loadInfinityShape(engine, false);
  await loadPathShape(engine, false);
  await loadRoundedPolygonShape(engine, false);
  await loadRoundedRectShape(engine, false);
  await loadSpiralShape(engine, false);
  await loadTrailEffect(engine, false);
  await engine.refresh(refresh);
}
export {
  loadAll
};
//# sourceMappingURL=@tsparticles_all.js.map
